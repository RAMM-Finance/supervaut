/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TrancheFactory {
  export type InitParamsStruct = {
    _want: PromiseOrValue<string>;
    _instruments: PromiseOrValue<string>[];
    _ratios: PromiseOrValue<BigNumberish>[];
    _junior_weight: PromiseOrValue<BigNumberish>;
    _promisedReturn: PromiseOrValue<BigNumberish>;
    _time_to_maturity: PromiseOrValue<BigNumberish>;
    vaultId: PromiseOrValue<BigNumberish>;
    inceptionPrice: PromiseOrValue<BigNumberish>;
  };

  export type InitParamsStructOutput = [
    string,
    string[],
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    _want: string;
    _instruments: string[];
    _ratios: BigNumber[];
    _junior_weight: BigNumber;
    _promisedReturn: BigNumber;
    _time_to_maturity: BigNumber;
    vaultId: BigNumber;
    inceptionPrice: BigNumber;
  };

  export type ContractsStruct = {
    vault: PromiseOrValue<string>;
    splitter: PromiseOrValue<string>;
    amm: PromiseOrValue<string>;
    lendingPool: PromiseOrValue<string>;
    cSenior: PromiseOrValue<string>;
    cJunior: PromiseOrValue<string>;
    param: TrancheFactory.InitParamsStruct;
  };

  export type ContractsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    TrancheFactory.InitParamsStructOutput
  ] & {
    vault: string;
    splitter: string;
    amm: string;
    lendingPool: string;
    cSenior: string;
    cJunior: string;
    param: TrancheFactory.InitParamsStructOutput;
  };
}

export interface TrancheFactoryInterface extends utils.Interface {
  functions: {
    "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256,uint256),string[],string)": FunctionFragment;
    "decreaseLPTokenBalance(address,uint256,uint256)": FunctionFragment;
    "getAmm(uint256)": FunctionFragment;
    "getCJunior(uint256)": FunctionFragment;
    "getCSenior(uint256)": FunctionFragment;
    "getContracts(uint256)": FunctionFragment;
    "getLPTokenBalance(address,uint256)": FunctionFragment;
    "getParams(uint256)": FunctionFragment;
    "getSplitter(uint256)": FunctionFragment;
    "getSuperVault(uint256)": FunctionFragment;
    "increaseLPTokenBalance(address,uint256,uint256)": FunctionFragment;
    "setTrancheMaster(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createParams"
      | "createVault"
      | "decreaseLPTokenBalance"
      | "getAmm"
      | "getCJunior"
      | "getCSenior"
      | "getContracts"
      | "getLPTokenBalance"
      | "getParams"
      | "getSplitter"
      | "getSuperVault"
      | "increaseLPTokenBalance"
      | "setTrancheMaster"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createParams",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [
      TrancheFactory.InitParamsStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLPTokenBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmm",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCJunior",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCSenior",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getParams",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuperVault",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLPTokenBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrancheMaster",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAmm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCJunior", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCSenior", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuperVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrancheMaster",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TrancheFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrancheFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createParams(
      _want: PromiseOrValue<string>,
      _instruments: PromiseOrValue<string>[],
      _ratios: PromiseOrValue<BigNumberish>[],
      _junior_weight: PromiseOrValue<BigNumberish>,
      _promisedReturn: PromiseOrValue<BigNumberish>,
      _time_to_maturity: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      inceptionPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVault(
      params: TrancheFactory.InitParamsStruct,
      names: PromiseOrValue<string>[],
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmm(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCJunior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCSenior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContracts(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TrancheFactory.ContractsStructOutput]>;

    getLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getParams(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSplitter(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSuperVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrancheMaster(
      _tMasterAd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createParams(
    _want: PromiseOrValue<string>,
    _instruments: PromiseOrValue<string>[],
    _ratios: PromiseOrValue<BigNumberish>[],
    _junior_weight: PromiseOrValue<BigNumberish>,
    _promisedReturn: PromiseOrValue<BigNumberish>,
    _time_to_maturity: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    inceptionPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVault(
    params: TrancheFactory.InitParamsStruct,
    names: PromiseOrValue<string>[],
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseLPTokenBalance(
    to: PromiseOrValue<string>,
    vaultId: PromiseOrValue<BigNumberish>,
    lpshares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmm(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCJunior(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCSenior(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContracts(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TrancheFactory.ContractsStructOutput>;

  getLPTokenBalance(
    to: PromiseOrValue<string>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getParams(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSplitter(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSuperVault(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseLPTokenBalance(
    to: PromiseOrValue<string>,
    vaultId: PromiseOrValue<BigNumberish>,
    lpshares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrancheMaster(
    _tMasterAd: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createParams(
      _want: PromiseOrValue<string>,
      _instruments: PromiseOrValue<string>[],
      _ratios: PromiseOrValue<BigNumberish>[],
      _junior_weight: PromiseOrValue<BigNumberish>,
      _promisedReturn: PromiseOrValue<BigNumberish>,
      _time_to_maturity: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      inceptionPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TrancheFactory.InitParamsStructOutput>;

    createVault(
      params: TrancheFactory.InitParamsStruct,
      names: PromiseOrValue<string>[],
      _description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmm(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCJunior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCSenior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContracts(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TrancheFactory.ContractsStructOutput>;

    getLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParams(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TrancheFactory.InitParamsStructOutput>;

    getSplitter(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSuperVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrancheMaster(
      _tMasterAd: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createParams(
      _want: PromiseOrValue<string>,
      _instruments: PromiseOrValue<string>[],
      _ratios: PromiseOrValue<BigNumberish>[],
      _junior_weight: PromiseOrValue<BigNumberish>,
      _promisedReturn: PromiseOrValue<BigNumberish>,
      _time_to_maturity: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      inceptionPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVault(
      params: TrancheFactory.InitParamsStruct,
      names: PromiseOrValue<string>[],
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmm(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCJunior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCSenior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContracts(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParams(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSplitter(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuperVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrancheMaster(
      _tMasterAd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createParams(
      _want: PromiseOrValue<string>,
      _instruments: PromiseOrValue<string>[],
      _ratios: PromiseOrValue<BigNumberish>[],
      _junior_weight: PromiseOrValue<BigNumberish>,
      _promisedReturn: PromiseOrValue<BigNumberish>,
      _time_to_maturity: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      inceptionPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      params: TrancheFactory.InitParamsStruct,
      names: PromiseOrValue<string>[],
      _description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmm(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCJunior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCSenior(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContracts(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParams(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSplitter(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuperVault(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLPTokenBalance(
      to: PromiseOrValue<string>,
      vaultId: PromiseOrValue<BigNumberish>,
      lpshares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrancheMaster(
      _tMasterAd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
