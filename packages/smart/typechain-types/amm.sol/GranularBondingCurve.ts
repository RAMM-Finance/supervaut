/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GranularBondingCurveInterface extends utils.Interface {
  functions: {
    "PRECISION()": FunctionFragment;
    "ROUNDLIMIT()": FunctionFragment;
    "addDelta(uint128,int128)": FunctionFragment;
    "baseGivenLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "bidsLeft(uint16)": FunctionFragment;
    "claimFilledOrder(address,uint16,bool)": FunctionFragment;
    "claimPartiallyFilledOrder(address,uint16,bool)": FunctionFragment;
    "collect(address,uint16,uint16,uint128,uint128)": FunctionFragment;
    "entry()": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeGrowthGlobalBase()": FunctionFragment;
    "feeGrowthGlobalTrade()": FunctionFragment;
    "getCurPrice()": FunctionFragment;
    "getLiq(address,uint16,bool)": FunctionFragment;
    "getMaxLiquidity()": FunctionFragment;
    "getNextPriceLimit(uint16,uint256,bool)": FunctionFragment;
    "getNumCross(uint16,bool)": FunctionFragment;
    "getOneTimeLiquidity(uint16,bool)": FunctionFragment;
    "liquidity()": FunctionFragment;
    "liquidityGivenBase(uint256,uint256,uint256)": FunctionFragment;
    "liquidityGivenTrade(uint256,uint256,uint256)": FunctionFragment;
    "lock()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeLimitOrder(address,uint16,uint128,bool)": FunctionFragment;
    "pointToPrice(uint16)": FunctionFragment;
    "positionIsFilled(address,uint16,bool)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "priceDelta()": FunctionFragment;
    "priceToPoint(uint256)": FunctionFragment;
    "provide(address,uint16,uint16,uint128,bytes)": FunctionFragment;
    "reduceLimitOrder(address,uint16,uint128,bool)": FunctionFragment;
    "remove(address,uint16,uint16,uint128)": FunctionFragment;
    "setEntry(address)": FunctionFragment;
    "setLiquidity(uint128)": FunctionFragment;
    "setPriceAndPoint(uint256)": FunctionFragment;
    "slot0()": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "ticks(uint16)": FunctionFragment;
    "trade(address,bool,int256,uint256,bytes)": FunctionFragment;
    "tradeGivenLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "tradeToken()": FunctionFragment;
    "xMax(uint256,uint256,uint256)": FunctionFragment;
    "xMaxRoundUp(uint256,uint256,uint256)": FunctionFragment;
    "yInt(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRECISION"
      | "ROUNDLIMIT"
      | "addDelta"
      | "baseGivenLiquidity"
      | "baseToken"
      | "bidsLeft"
      | "claimFilledOrder"
      | "claimPartiallyFilledOrder"
      | "collect"
      | "entry"
      | "factory"
      | "fee"
      | "feeGrowthGlobalBase"
      | "feeGrowthGlobalTrade"
      | "getCurPrice"
      | "getLiq"
      | "getMaxLiquidity"
      | "getNextPriceLimit"
      | "getNumCross"
      | "getOneTimeLiquidity"
      | "liquidity"
      | "liquidityGivenBase"
      | "liquidityGivenTrade"
      | "lock"
      | "owner"
      | "placeLimitOrder"
      | "pointToPrice"
      | "positionIsFilled"
      | "positions"
      | "priceDelta"
      | "priceToPoint"
      | "provide"
      | "reduceLimitOrder"
      | "remove"
      | "setEntry"
      | "setLiquidity"
      | "setPriceAndPoint"
      | "slot0"
      | "tickSpacing"
      | "ticks"
      | "trade"
      | "tradeGivenLiquidity"
      | "tradeToken"
      | "xMax"
      | "xMaxRoundUp"
      | "yInt"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROUNDLIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDelta",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseGivenLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bidsLeft",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFilledOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPartiallyFilledOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "entry", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobalBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobalTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiq",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPriceLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumCross",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOneTimeLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityGivenBase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityGivenTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pointToPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "positionIsFilled",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceToPoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "provide",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceLimitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceAndPoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "slot0", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeGivenLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xMax",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xMaxRoundUp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "yInt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROUNDLIMIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseGivenLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidsLeft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFilledOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPartiallyFilledOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobalBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobalTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLiq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPriceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumCross",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneTimeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityGivenBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityGivenTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointToPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionIsFilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceToPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "provide", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEntry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceAndPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slot0", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeGivenLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xMaxRoundUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yInt", data: BytesLike): Result;

  events: {};
}

export interface GranularBondingCurve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GranularBondingCurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROUNDLIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDelta(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    baseGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    bidsLeft(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPartiallyFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collect(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entry(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    feeGrowthGlobalBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobalTrade(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiq(
      to: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextPriceLimit(
      point: PromiseOrValue<BigNumberish>,
      pDelta: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumCross(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOneTimeLiquidity(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityGivenBase(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      B: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityGivenTrade(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      T: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pointToPrice(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    positionIsFilled(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidCrossId: BigNumber;
        askCrossId: BigNumber;
        askLiq: BigNumber;
        bidLiq: BigNumber;
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
      }
    >;

    priceDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceToPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    provide(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reduceLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEntry(
      _entry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidity(
      liq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceAndPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slot0(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, boolean] & {
        curPrice: BigNumber;
        point: number;
        feeProtocol: number;
        unlocked: boolean;
      }
    >;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutsideBase: BigNumber;
        feeGrowthOutsideTrade: BigNumber;
        tickCumulativeOutside: BigNumber;
        secondsPerLiquidityOutsideX128: BigNumber;
        secondsOutside: number;
        initialized: boolean;
        askLiquidityGross: BigNumber;
        bidLiquidityGross: BigNumber;
        askNumCross: BigNumber;
        bidNumCross: BigNumber;
      }
    >;

    trade(
      recipient: PromiseOrValue<string>,
      moveUp: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradeToken(overrides?: CallOverrides): Promise<[string]>;

    xMax(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    xMaxRoundUp(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yInt(
      curPrice: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  ROUNDLIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  addDelta(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseGivenLiquidity(
    p2: PromiseOrValue<BigNumberish>,
    p1: PromiseOrValue<BigNumberish>,
    L: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  bidsLeft(
    point: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimFilledOrder(
    recipient: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    isAsk: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPartiallyFilledOrder(
    recipient: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    isAsk: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collect(
    recipient: PromiseOrValue<string>,
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    amount0Requested: PromiseOrValue<BigNumberish>,
    amount1Requested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entry(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<number>;

  feeGrowthGlobalBase(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobalTrade(overrides?: CallOverrides): Promise<BigNumber>;

  getCurPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getLiq(
    to: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    isAsk: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  getNextPriceLimit(
    point: PromiseOrValue<BigNumberish>,
    pDelta: PromiseOrValue<BigNumberish>,
    moveUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumCross(
    point: PromiseOrValue<BigNumberish>,
    moveUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOneTimeLiquidity(
    point: PromiseOrValue<BigNumberish>,
    moveUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityGivenBase(
    p2: PromiseOrValue<BigNumberish>,
    p1: PromiseOrValue<BigNumberish>,
    B: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityGivenTrade(
    p2: PromiseOrValue<BigNumberish>,
    p1: PromiseOrValue<BigNumberish>,
    T: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeLimitOrder(
    recipient: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isAsk: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pointToPrice(
    point: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  positionIsFilled(
    recipient: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    isAsk: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  positions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      bidCrossId: BigNumber;
      askCrossId: BigNumber;
      askLiq: BigNumber;
      bidLiq: BigNumber;
      liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
    }
  >;

  priceDelta(overrides?: CallOverrides): Promise<BigNumber>;

  priceToPoint(
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  provide(
    recipient: PromiseOrValue<string>,
    pointLower: PromiseOrValue<BigNumberish>,
    pointUpper: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reduceLimitOrder(
    recipient: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isAsk: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove(
    recipient: PromiseOrValue<string>,
    pointLower: PromiseOrValue<BigNumberish>,
    pointUpper: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEntry(
    _entry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidity(
    liq: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceAndPoint(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slot0(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, boolean] & {
      curPrice: BigNumber;
      point: number;
      feeProtocol: number;
      unlocked: boolean;
    }
  >;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  ticks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutsideBase: BigNumber;
      feeGrowthOutsideTrade: BigNumber;
      tickCumulativeOutside: BigNumber;
      secondsPerLiquidityOutsideX128: BigNumber;
      secondsOutside: number;
      initialized: boolean;
      askLiquidityGross: BigNumber;
      bidLiquidityGross: BigNumber;
      askNumCross: BigNumber;
      bidNumCross: BigNumber;
    }
  >;

  trade(
    recipient: PromiseOrValue<string>,
    moveUp: PromiseOrValue<boolean>,
    amountSpecified: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeGivenLiquidity(
    p2: PromiseOrValue<BigNumberish>,
    p1: PromiseOrValue<BigNumberish>,
    L: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradeToken(overrides?: CallOverrides): Promise<string>;

  xMax(
    curPrice: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    a: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  xMaxRoundUp(
    curPrice: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    a: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yInt(
    curPrice: PromiseOrValue<BigNumberish>,
    moveUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ROUNDLIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    addDelta(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    bidsLeft(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPartiallyFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; tradeAmount: BigNumber }
    >;

    collect(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    entry(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<number>;

    feeGrowthGlobalBase(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobalTrade(overrides?: CallOverrides): Promise<BigNumber>;

    getCurPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLiq(
      to: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getNextPriceLimit(
      point: PromiseOrValue<BigNumberish>,
      pDelta: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumCross(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOneTimeLiquidity(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityGivenBase(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      B: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityGivenTrade(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      T: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountToEscrow: BigNumber;
        numCross: BigNumber;
      }
    >;

    pointToPrice(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionIsFilled(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bidCrossId: BigNumber;
        askCrossId: BigNumber;
        askLiq: BigNumber;
        bidLiq: BigNumber;
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
      }
    >;

    priceDelta(overrides?: CallOverrides): Promise<BigNumber>;

    priceToPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    provide(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    reduceLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setEntry(
      _entry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidity(
      liq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceAndPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slot0(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, boolean] & {
        curPrice: BigNumber;
        point: number;
        feeProtocol: number;
        unlocked: boolean;
      }
    >;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutsideBase: BigNumber;
        feeGrowthOutsideTrade: BigNumber;
        tickCumulativeOutside: BigNumber;
        secondsPerLiquidityOutsideX128: BigNumber;
        secondsOutside: number;
        initialized: boolean;
        askLiquidityGross: BigNumber;
        bidLiquidityGross: BigNumber;
        askNumCross: BigNumber;
        bidNumCross: BigNumber;
      }
    >;

    trade(
      recipient: PromiseOrValue<string>,
      moveUp: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    tradeGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeToken(overrides?: CallOverrides): Promise<string>;

    xMax(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xMaxRoundUp(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yInt(
      curPrice: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ROUNDLIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    addDelta(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    bidsLeft(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPartiallyFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collect(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entry(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobalBase(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobalTrade(overrides?: CallOverrides): Promise<BigNumber>;

    getCurPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getLiq(
      to: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getNextPriceLimit(
      point: PromiseOrValue<BigNumberish>,
      pDelta: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumCross(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOneTimeLiquidity(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityGivenBase(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      B: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityGivenTrade(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      T: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pointToPrice(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionIsFilled(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceDelta(overrides?: CallOverrides): Promise<BigNumber>;

    priceToPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provide(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reduceLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEntry(
      _entry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidity(
      liq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceAndPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slot0(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      recipient: PromiseOrValue<string>,
      moveUp: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeToken(overrides?: CallOverrides): Promise<BigNumber>;

    xMax(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xMaxRoundUp(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yInt(
      curPrice: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUNDLIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDelta(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidsLeft(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPartiallyFilledOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobalBase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeGrowthGlobalTrade(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiq(
      to: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextPriceLimit(
      point: PromiseOrValue<BigNumberish>,
      pDelta: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumCross(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOneTimeLiquidity(
      point: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityGivenBase(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      B: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityGivenTrade(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      T: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pointToPrice(
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionIsFilled(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceToPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provide(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reduceLimitOrder(
      recipient: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isAsk: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      recipient: PromiseOrValue<string>,
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEntry(
      _entry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidity(
      liq: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceAndPoint(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slot0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      recipient: PromiseOrValue<string>,
      moveUp: PromiseOrValue<boolean>,
      amountSpecified: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeGivenLiquidity(
      p2: PromiseOrValue<BigNumberish>,
      p1: PromiseOrValue<BigNumberish>,
      L: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xMax(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xMaxRoundUp(
      curPrice: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yInt(
      curPrice: PromiseOrValue<BigNumberish>,
      moveUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
