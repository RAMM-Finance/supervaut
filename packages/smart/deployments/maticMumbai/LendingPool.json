{
  "address": "0xC2fcC51189466E37C2127e1A7dac86A14083164f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ds_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dss_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "defaultor",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ILendingPool.LoanMetadata",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "Default",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ILendingPool.LoanMetadata",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "FullRepayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ILendingPool.LoanMetadata",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "LoanApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "loan_id",
          "type": "bytes32"
        }
      ],
      "name": "LoanProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ILendingPool.LoanMetadata",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "LoanProposalRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LOANS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrued_interest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalInterest",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ammFactoryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "marketFactoryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAmountUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "odds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IController.MarketInfo",
          "name": "market_info",
          "type": "tuple"
        }
      ],
      "name": "addContractLoanProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalInterest",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "ammFactoryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "marketFactoryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAmountUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "odds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IController.MarketInfo",
          "name": "market_info",
          "type": "tuple"
        }
      ],
      "name": "addDiscretionaryLoanProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "addValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amount_borrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "marketFactoryAddress",
          "type": "address"
        }
      ],
      "name": "approveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrower_allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowers_array",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "checkAddressLoans",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "checkLoanStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "col_idx",
          "type": "uint256"
        }
      ],
      "name": "collectRedemption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dss_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "contractBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "repay_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repay_interest",
          "type": "uint256"
        }
      ],
      "name": "contractRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "contractResolveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "controllerBurnDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "controllerMintDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "current_loan_data",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repaymentDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullLoanCheck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getBorrowerLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct ILendingPool.LoanMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getLoan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct ILendingPool.LoanMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getLoans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "repaymentDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct ILendingPool.LoanMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_total_borrowed_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_accrued_interest",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingPool.LoanData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "is_borrower",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateral_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "DS_out_min",
          "type": "uint256"
        }
      ],
      "name": "mintDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "num_loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "num_proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemCollateralBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "DS_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "DSS_out_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "COLLATERAL_out_min",
          "type": "uint256"
        }
      ],
      "name": "redeemDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemDSSBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "removeProposal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "removeProposalGov",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "repay_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repay_interest",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "resolveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "new_ceiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_bonus_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_redemption_delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_mint_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_redeem_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_buyback_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_recollat_fee",
          "type": "uint256"
        }
      ],
      "name": "setPoolParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "total_borrowed_amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedPoolCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedPoolDSS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xefaab9fa05d137cfe7c3d143578a0f1e5e2075147d1df04afc73d6edd5954561",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0xC2fcC51189466E37C2127e1A7dac86A14083164f",
    "transactionIndex": 9,
    "gasUsed": "4723761",
    "logsBloom": "0x
    "blockHash": "0xf24c236c1aa101dadfbdae632874915fdea374ba288b32672e4602cdd4923391",
    "transactionHash": "0xefaab9fa05d137cfe7c3d143578a0f1e5e2075147d1df04afc73d6edd5954561",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 27300802,
        "transactionHash": "0xefaab9fa05d137cfe7c3d143578a0f1e5e2075147d1df04afc73d6edd5954561",
        "address": "0xC2fcC51189466E37C2127e1A7dac86A14083164f",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
        "logIndex": 18,
        "blockHash": "0xf24c236c1aa101dadfbdae632874915fdea374ba288b32672e4602cdd4923391"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 27300802,
        "transactionHash": "0xefaab9fa05d137cfe7c3d143578a0f1e5e2075147d1df04afc73d6edd5954561",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008641e280bc9a470000000000000000000000000000000000000000000000026a38a3594626c8f300000000000000000000000000000000000000000000121461bec63157f154d700000000000000000000000000000000000000000000000269b26176c56a2eac00000000000000000000000000000000000000000000121462450813d8adef1e",
        "logIndex": 19,
        "blockHash": "0xf24c236c1aa101dadfbdae632874915fdea374ba288b32672e4602cdd4923391"
      }
    ],
    "blockNumber": 27300802,
    "cumulativeGasUsed": "6144564",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb21ae1581F747C7913B9d8e3026A949f0cB0221b",
    "0x3Be0BB766c928dC4514c296485D2c094af57a25b",
    "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xf2B351F19Cc58f52ca7C4f7B8B2663B932f889AC"
  ],
  "numDeployments": 3,
  "solcInputHash": "682a37cc14a38ce0b7923449370aad26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ds_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dss_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"defaultor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ILendingPool.LoanMetadata\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"Default\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ILendingPool.LoanMetadata\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"FullRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ILendingPool.LoanMetadata\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"LoanApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"loan_id\",\"type\":\"bytes32\"}],\"name\":\"LoanProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ILendingPool.LoanMetadata\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"LoanProposalRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOANS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrued_interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ammFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"odds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IController.MarketInfo\",\"name\":\"market_info\",\"type\":\"tuple\"}],\"name\":\"addContractLoanProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ammFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"odds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IController.MarketInfo\",\"name\":\"market_info\",\"type\":\"tuple\"}],\"name\":\"addDiscretionaryLoanProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amount_borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrower_allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowers_array\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"checkAddressLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"checkLoanStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"col_idx\",\"type\":\"uint256\"}],\"name\":\"collectRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dss_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contractBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"repay_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repay_interest\",\"type\":\"uint256\"}],\"name\":\"contractRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"contractResolveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"controllerBurnDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"controllerMintDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"current_loan_data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullLoanCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getBorrowerLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ILendingPool.LoanMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getLoan\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ILendingPool.LoanMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ILendingPool.LoanMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_total_borrowed_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accrued_interest\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingPool.LoanData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_borrower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DS_out_min\",\"type\":\"uint256\"}],\"name\":\"mintDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"num_loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"num_proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemCollateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DS_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DSS_out_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"COLLATERAL_out_min\",\"type\":\"uint256\"}],\"name\":\"redeemDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemDSSBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"removeProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"removeProposalGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"repay_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repay_interest\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"resolveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_bonus_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_redemption_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_mint_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_redeem_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_buyback_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_recollat_fee\",\"type\":\"uint256\"}],\"name\":\"setPoolParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_borrowed_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolDSS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stablecoin/lendingpool.sol\":\"LendingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Common/AccessControl.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IAccessControl.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"../utils/Strings.sol\\\";\\r\\nimport \\\"../utils/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n    struct RoleData {\\r\\n        mapping(address => bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n     * with a standardized message including the required role.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     *\\r\\n     * _Available since v4.1._\\r\\n     */\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\r\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\r\\n     *\\r\\n     * Format of the revert message is described in {_checkRole}.\\r\\n     *\\r\\n     * _Available since v4.6._\\r\\n     */\\r\\n    function _checkRole(bytes32 role) internal view virtual {\\r\\n        _checkRole(role, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `account` is missing `role`.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     */\\r\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(account),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     *\\r\\n     * May emit a {RoleGranted} event.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     *\\r\\n     * May emit a {RoleRevoked} event.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     *\\r\\n     * May emit a {RoleRevoked} event.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * May emit a {RoleGranted} event.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     *\\r\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     *\\r\\n     * May emit a {RoleGranted} event.\\r\\n     */\\r\\n    function _grantRole(bytes32 role, address account) internal virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     *\\r\\n     * May emit a {RoleRevoked} event.\\r\\n     */\\r\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x18b28c7416f9046a502b93712b83d6212bc0495cdde2b363c0ef22211725044e\"},\"contracts/Common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7ec9f5a2b38b9e535f19f2b34f7fd4a6abc2e372149f1f8e5a0a01602d5e1cf4\",\"license\":\"MIT\"},\"contracts/Common/IAccessControl.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {AccessControl-_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``'s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\",\"keccak256\":\"0x666c15a23abcd75d14af1ab6ccdc3fce9e5bcf55b88d67ef6848fb56c3958c82\"},\"contracts/Common/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address creator_address) {\\r\\n        _transferOwnership(creator_address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x073c596e52911adac2e5e348312118e541eb6bb808282f2cfa4e40b87c09d3b9\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20Custom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../Common/Context.sol\\\";\\r\\n\\r\\ncontract ERC20Custom is Context, IERC20 {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\",\"keccak256\":\"0xfd4cd736d5f6f23f144fb0a3980b2bb153ccce508b1b94df151aab2ff4a614eb\",\"license\":\"MIT\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\",\"keccak256\":\"0x0eb493d672628ca9ec4ee04a6fcc65bf1de5bff279a2f2193fa31ed66d705526\",\"license\":\"MIT\"},\"contracts/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./draft-IERC20Permit.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x91d79931086b28230a0177b2e4a6eedcb8f925f731cf8399d0594ddfdacc1d9c\",\"license\":\"MIT\"},\"contracts/ERC20/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\",\"keccak256\":\"0x3de245e839997a5db2bb933bc5e6c3e4a7f81a31afde8d966b31425c0edaa5fc\",\"license\":\"MIT\"},\"contracts/stablecoin/DS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../ERC20/ERC20Custom.sol\\\";\\r\\nimport \\\"../Common/AccessControl.sol\\\";\\r\\nimport \\\"../Common/Ownable.sol\\\";\\r\\n\\r\\ncontract DS is ERC20Custom, AccessControl, Ownable {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n    \\r\\n    mapping(address => bool) pools;\\r\\n    \\r\\n    address[] public pools_array;\\r\\n    address public creator_address;\\r\\n    address timelock_address;\\r\\n    address public DEFAULT_ADMIN_ADDRESS;\\r\\n    \\r\\n    uint256 constant genesis_supply = 1000000e18;\\r\\n\\r\\n    \\r\\n    /* ========== MODIFIERS ========== */\\r\\n    modifier onlyPools() {\\r\\n        require(pools[msg.sender] == true, \\\"Only pools can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n    constructor (\\r\\n        address _creator_address,\\r\\n        address _timelock_address\\r\\n    )  ERC20Custom(\\\"Debita Stablecoin\\\",\\\"DS\\\") Ownable(_creator_address)\\r\\n    {\\r\\n        _mint(_creator_address, genesis_supply);\\r\\n        creator_address = _creator_address;\\r\\n        timelock_address = _timelock_address;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        DEFAULT_ADMIN_ADDRESS = _msgSender();\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _creator_address);\\r\\n    }\\r\\n\\r\\n    function addPool(address pool_address) public onlyOwner {\\r\\n        require(pool_address != address(0), \\\"Zero address detected\\\");\\r\\n\\r\\n        require(pools[pool_address] == false, \\\"Address already exists\\\");\\r\\n        pools[pool_address] = true; \\r\\n        pools_array.push(pool_address);\\r\\n    }\\r\\n    \\r\\n    // Used by pools when user redeems\\r\\n    function pool_burn(address b_address, uint256 b_amount) public onlyPools {\\r\\n        super._burn(b_address, b_amount);\\r\\n    }\\r\\n\\r\\n    function pool_mint(address m_address, uint256 m_amount) public onlyPools {\\r\\n        super._mint(m_address, m_amount);\\r\\n    }\\r\\n\\r\\n    function dss_price() public view returns(uint256){\\r\\n        return 1e6; \\r\\n    }\\r\\n\\r\\n    function get_collateral_ratio() public view returns(uint256){\\r\\n        return 1e6;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x18bada10155fd81ddc1f6f4b9c39eb3c46b93d4f6d34757257cffbb38aa7064b\",\"license\":\"MIT\"},\"contracts/stablecoin/DSS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../ERC20/ERC20Custom.sol\\\";\\r\\nimport \\\"../Common/AccessControl.sol\\\";\\r\\nimport \\\"../Common/Ownable.sol\\\";\\r\\n\\r\\ncontract DSS is ERC20Custom, AccessControl, Ownable {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n    \\r\\n    address[] public pools_array;\\r\\n    mapping(address => bool) pools;\\r\\n    \\r\\n    address public creator_address;\\r\\n    address timelock_address;\\r\\n    address public DEFAULT_ADMIN_ADDRESS;\\r\\n    uint256 constant genesis_supply = 1000000e18;\\r\\n\\r\\n    \\r\\n    /* ========== MODIFIERS ========== */\\r\\n    modifier onlyPools() {\\r\\n        require(pools[msg.sender] == true, \\\"Only pools can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (\\r\\n        address _creator_address,\\r\\n        address _timelock_address\\r\\n    )  ERC20Custom(\\\"Debita Stablecoin Share\\\",\\\"DSS\\\") Ownable(_creator_address)\\r\\n    {\\r\\n        _mint(_creator_address, genesis_supply);\\r\\n        creator_address = _creator_address;\\r\\n        timelock_address = _timelock_address;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        DEFAULT_ADMIN_ADDRESS = _msgSender();\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, _creator_address);\\r\\n    }\\r\\n\\r\\n    function addPool(address pool_address) public onlyOwner {\\r\\n        require(pool_address != address(0), \\\"Zero address detected\\\");\\r\\n\\r\\n        require(pools[pool_address] == false, \\\"Address already exists\\\");\\r\\n        pools[pool_address] = true; \\r\\n        pools_array.push(pool_address);\\r\\n\\r\\n        //emit PoolAdded(pool_address);\\r\\n    }\\r\\n    \\r\\n    // Used by pools when user redeems\\r\\n    function pool_burn(address b_address, uint256 b_amount) public onlyPools {\\r\\n        super._burn(b_address, b_amount);\\r\\n    }\\r\\n\\r\\n    function pool_mint(address m_address, uint256 m_amount) public onlyPools {\\r\\n        super._mint(m_address, m_amount);\\r\\n    }\\r\\n\\r\\n    function dss_price() public view returns(uint256){\\r\\n        return 1e6; \\r\\n    }\\r\\n\\r\\n    function get_collateral_ratio() public view returns(uint256){\\r\\n        return 1e6;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa9480b30f5827f7bb54132f4b2faf712e4da792605d88e544f5b4bc1a4e03bb2\",\"license\":\"MIT\"},\"contracts/stablecoin/IController.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n//controller contract responsible for providing initial liquidity to the\\r\\n//borrower cds market, collect winnings when default, and burn the corresponding DS\\r\\ninterface IController  {\\r\\n    struct MarketInfo {\\r\\n        address ammFactoryAddress; \\r\\n        address marketFactoryAddress;\\r\\n        uint256 liquidityAmountUSD;\\r\\n        uint256 marketID;\\r\\n        string description;\\r\\n        string[] names;\\r\\n        uint256[] odds;\\r\\n    }\\r\\n    \\r\\n    // function addPool(address pool_address) external;\\r\\n\\r\\n    function addValidator(address validator_address) external;\\r\\n\\r\\n    function initiateMarket(\\r\\n        address borrower,\\r\\n        address ammFactoryAddress, \\r\\n        address marketFactoryAddress, \\r\\n        uint256 liquidityAmountUSD, \\r\\n        string calldata description,  //Needs to be in format name + \\\":\\\" + borrower description since it is called offchain\\r\\n        bytes32 loanID, \\r\\n        string[] memory names, \\r\\n        uint256[] memory odds\\r\\n    ) external;\\r\\n\\r\\n    function resolveMarket(address recipient, bytes32 loanID, bool isDefault) external;\\r\\n    function verified(address _addr) external returns (bool);\\r\\n    function validators(address _addr) external returns (bool);\\r\\n    function canBeApproved (\\r\\n        address borrower, \\r\\n        bytes32 loanID, \\r\\n        address marketFactoryAddress \\r\\n    ) external returns(bool);\\r\\n    \\r\\n    function _initiateMarket(\\r\\n        MarketInfo memory data,\\r\\n        address borrower,\\r\\n        bytes32 loanID\\r\\n    ) external;\\r\\n    \\r\\n    function verifyAddress(\\r\\n        uint256 nullifier_hash, \\r\\n        uint256 external_nullifier,\\r\\n        uint256[8] calldata proof\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x5d4f390aa226bcd28cc1e4c2d8a361afd3470c7fbf66aace5b86899cafff25bf\"},\"contracts/stablecoin/ILendingPool.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport \\\"./IController.sol\\\";\\r\\n\\r\\ninterface ILendingPool {\\r\\n    struct LoanMetadata {\\r\\n        bytes32 id;\\r\\n        uint256 principal;\\r\\n        uint256 totalInterest; // total interest paid over duration\\r\\n        uint256 duration;\\r\\n        uint256 repaymentDate;\\r\\n        uint256 interestPaid; // how much paid toward interest\\r\\n        uint256 allowance;\\r\\n        uint256 amountBorrowed; // how much currently borrowed, should be 0 on full loan repayment\\r\\n        string description;\\r\\n        bool approved; // proposal => false, active loan => true\\r\\n        address recipient; // set to  0x0 if discretionary, address set to smart contract if smart contract loan.\\r\\n    }\\r\\n\\r\\n    struct LoanData {\\r\\n        uint256 _total_borrowed_amount;\\r\\n        uint256 _accrued_interest;\\r\\n    }\\r\\n\\r\\n    function mintDS(uint256 collateral_amount, uint256 DS_out_min) external;\\r\\n\\r\\n    function redeemDS(\\r\\n        uint256 DS_amount,\\r\\n        uint256 DSS_out_min,\\r\\n        uint256 COLLATERAL_out_min\\r\\n    ) external;\\r\\n\\r\\n    function collectRedemption(uint256 col_idx) external returns (uint256 dss_amount, uint256 collateral_amount);\\r\\n\\r\\n    function setPoolParameters(\\r\\n        uint256 new_ceiling,\\r\\n        uint256 new_bonus_rate,\\r\\n        uint256 new_redemption_delay,\\r\\n        uint256 new_mint_fee,\\r\\n        uint256 new_redeem_fee,\\r\\n        uint256 new_buyback_fee,\\r\\n        uint256 new_recollat_fee\\r\\n    ) external;\\r\\n\\r\\n    function setController(address controller) external;\\r\\n\\r\\n    function controllerMintDS(uint256 amount) external;\\r\\n\\r\\n    function controllerBurnDS(uint256 amount) external;\\r\\n\\r\\n    function addValidator(address validator) external;\\r\\n\\r\\n    function addDiscretionaryLoanProposal(\\r\\n        bytes32 _id,\\r\\n        uint256 _principal,\\r\\n        uint256 _duration,\\r\\n        uint256 _totalInterest,\\r\\n        string calldata _description,\\r\\n        IController.MarketInfo memory market_info\\r\\n    ) external;\\r\\n\\r\\n    function addContractLoanProposal(\\r\\n        bytes32 _id,\\r\\n        address _recipient,\\r\\n        uint256 _principal,\\r\\n        uint256 _duration,\\r\\n        uint256 _totalInterest,\\r\\n        string calldata _description,\\r\\n        IController.MarketInfo memory market_info\\r\\n    ) external;\\r\\n\\r\\n    function removeProposal(bytes32 id) external returns (bool); // called by recipient\\r\\n\\r\\n    function removeProposalGov(address recipient, bytes32 id) external returns (bool);\\r\\n\\r\\n    function approveLoan(\\r\\n        address recipient,\\r\\n        bytes32 id,\\r\\n        address marketFactoryAddress\\r\\n    ) external;\\r\\n\\r\\n    function borrow(bytes32 loan_id, uint256 amount) external;\\r\\n\\r\\n    function contractBorrow(\\r\\n        address owner,\\r\\n        bytes32 id,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function repay(\\r\\n        bytes32 loan_id,\\r\\n        uint256 repay_principal,\\r\\n        uint256 repay_interest\\r\\n    ) external;\\r\\n\\r\\n    function contractRepay(\\r\\n        address owner,\\r\\n        bytes32 loan_id,\\r\\n        uint256 repay_principal,\\r\\n        uint256 repay_interest\\r\\n    ) external;\\r\\n\\r\\n    function resolveLoan(bytes32 id) external;\\r\\n\\r\\n    function contractResolveLoan(address owner, bytes32 id) external;\\r\\n\\r\\n    function checkAddressLoans(address recipient) external;\\r\\n\\r\\n    function fullLoanCheck() external;\\r\\n\\r\\n    function checkLoanStatus (address owner, bytes32 id) external;\\r\\n\\r\\n    function is_borrower(address addr) external returns (bool);\\r\\n\\r\\n    function getLoan(address borrower, bytes32 id) external returns (LoanMetadata memory);\\r\\n\\r\\n    function getLoans(address borrower) external returns (LoanMetadata[] memory);\\r\\n\\r\\n    function borrower_allowance(address addr) external returns (uint256);\\r\\n\\r\\n    function amount_borrowed(address addr) external returns (uint256);\\r\\n\\r\\n    function num_loans(address addr) external returns (uint256);\\r\\n\\r\\n    function num_proposals(address addr) external returns (uint256);\\r\\n\\r\\n    function getBorrowerLoanData(address recipient) external returns (LoanMetadata memory);\\r\\n\\r\\n    function getProtocolLoanData() external returns (LoanData memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xb529eae8f4853b189befecfeb06f1e461f362a6a4561f29ce2f831f05243f890\"},\"contracts/stablecoin/lendingpool.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./owned.sol\\\";\\r\\nimport \\\"./DS.sol\\\";\\r\\nimport \\\"./DSS.sol\\\";\\r\\nimport \\\"../ERC20/IERC20.sol\\\";\\r\\nimport \\\"../ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"./ILendingPool.sol\\\";\\r\\nimport \\\"./IController.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n//borrowers borrow and repay from this lendingpool\\r\\ncontract LendingPool is ILendingPool, Owned {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    // addresses\\r\\n    address private collateral_address;\\r\\n    address private creator_address;\\r\\n    address private timelock_address;\\r\\n    IController private controller; \\r\\n    DS private DScontract;\\r\\n    DSS private DSScontract;\\r\\n\\r\\n    // pool parameters\\r\\n    uint256 pool_ceiling;\\r\\n    uint256 bonus_rate;\\r\\n    uint256 redemption_delay;\\r\\n    uint256 minting_fee;\\r\\n    uint256 redemption_fee;\\r\\n    uint256 buyback_fee;\\r\\n    uint256 recollat_fee;\\r\\n    uint256 missing_decimals;\\r\\n    uint256 private constant PRICE_PRECISION = 1e6;\\r\\n    uint256 public total_borrowed_amount;\\r\\n    uint256 public accrued_interest;\\r\\n    uint256 immutable public MAX_LOANS = 20;\\r\\n    uint256 immutable public MAX_PROPOSALS = 20;\\r\\n\\r\\n    // mint/redeem\\r\\n    mapping(address => uint256) public redeemDSSBalances;\\r\\n    mapping(address => uint256) public redeemCollateralBalances;\\r\\n    uint256 public unclaimedPoolCollateral;\\r\\n    uint256 public unclaimedPoolDSS;\\r\\n    mapping(address => uint256) public lastRedeemed;\\r\\n\\r\\n    // loan\\r\\n    mapping(address => bool) public override is_borrower;\\r\\n    mapping(address => uint256) public override borrower_allowance; // borrower total allowance\\r\\n    mapping(address => uint256) public override amount_borrowed; // borrower total amount borrowed\\r\\n    mapping(address => LoanMetadata[]) public current_loan_data; // current pending proposals and active loans for each user.\\r\\n    mapping(address => uint256) public override num_loans;\\r\\n    mapping(address => uint256) public override num_proposals;\\r\\n    address[] public borrowers_array;\\r\\n    mapping(bytes32 => bool) id_taken;\\r\\n\\r\\n    modifier onlyByOwnGov() {\\r\\n        require(msg.sender == timelock_address || msg.sender == owner, \\\"Not owner or timelock\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(address(controller) == msg.sender, \\\"is not controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBorrower() {\\r\\n        require(is_borrower[msg.sender], \\\"is not borrower\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVerified() {\\r\\n        //require(controller.verified(msg.sender), \\\"address not verified\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyValidator() {\\r\\n        require(controller.validators(msg.sender), \\\"address must be validator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyContract() {\\r\\n        require(address(msg.sender).isContract(), \\\"is not smart contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _ds_address,\\r\\n        address _dss_address,\\r\\n        address _collateral_address,\\r\\n        address _creator_address,\\r\\n        address _timelock_address\\r\\n    ) public Owned(_creator_address) {\\r\\n        require(\\r\\n            (_ds_address != address(0)) &&\\r\\n                (_dss_address != address(0)) &&\\r\\n                (_collateral_address != address(0)) &&\\r\\n                (_creator_address != address(0)) &&\\r\\n                (_timelock_address != address(0)),\\r\\n            \\\"Zero address detected\\\"\\r\\n        );\\r\\n\\r\\n        DScontract = DS(_ds_address);\\r\\n        DSScontract = DSS(_dss_address);\\r\\n        collateral_address = _collateral_address;\\r\\n        creator_address = _creator_address;\\r\\n        timelock_address = _timelock_address;\\r\\n        missing_decimals = uint256(0);\\r\\n    }\\r\\n\\r\\n    //Currently ds decimals is 6, same as USDC, so collateral amount should also be decimal 6\\r\\n    function mintDS(uint256 collateral_amount, uint256 DS_out_min) external override {\\r\\n        uint256 collateral_amount_d18 = collateral_amount * (10**missing_decimals);\\r\\n\\r\\n        uint256 DS_amount_18 = collateral_amount_d18; //1to1\\r\\n        DS_amount_18 = (DS_amount_18 * (1e6 - minting_fee)) / 1e6; // (DS_amount_18.mul(uint(1e6).sub(minting_fee))).div(uint(1e6));\\r\\n        require(DS_out_min <= DS_amount_18);\\r\\n\\r\\n        IERC20(collateral_address).safeTransferFrom(msg.sender, address(this), collateral_amount);\\r\\n        //TransferHelper.safeTransferFrom(collateral_address, msg.sender, address(this), collateral_amount);\\r\\n        DScontract.pool_mint(msg.sender, DS_amount_18);\\r\\n    }\\r\\n\\r\\n    function redeemDS(\\r\\n        uint256 DS_amount,\\r\\n        uint256 DSS_out_min,\\r\\n        uint256 COLLATERAL_out_min\\r\\n    ) external override {\\r\\n        uint256 dss_price = DScontract.dss_price();\\r\\n        uint256 collateral_ratio = DScontract.get_collateral_ratio();\\r\\n        uint256 DS_amount_18 = DS_amount * 10**missing_decimals; // DS_amount.mul(10**missing_decimals);\\r\\n\\r\\n        uint256 DS_amount_post_fee = (DS_amount * (1e6 - redemption_fee)) / 1e6; // (DS_amount.mul(uint(1e6).sub(redemption_fee))).div(uint(1e6));\\r\\n        uint256 dss_dollar_value = DS_amount_post_fee - ((DS_amount_post_fee * collateral_ratio) / PRICE_PRECISION); // DS_amount_post_fee.sub(DS_amount_post_fee.mul(collateral_ratio).div(PRICE_PRECISION));\\r\\n        uint256 dss_amount = (dss_dollar_value * PRICE_PRECISION) / dss_price; // dss_dollar_value.mul(PRICE_PRECISION).div(dss_price);\\r\\n\\r\\n        uint256 DS_amount_precision = DS_amount_post_fee;\\r\\n        uint256 collateral_dollar_value = (DS_amount_precision * collateral_ratio) / PRICE_PRECISION; // DS_amount_precision.mul(collateral_ratio).div(PRICE_PRECISION);\\r\\n        uint256 collateral_amount = collateral_dollar_value; //.mul(10**missing_decimals); //for now assume collateral is stable\\r\\n\\r\\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender] + collateral_amount; // redeemCollateralBalances[msg.sender].add(collateral_amount);\\r\\n        unclaimedPoolCollateral = unclaimedPoolCollateral + collateral_amount; // unclaimedPoolCollateral.add(collateral_amount);\\r\\n\\r\\n        redeemDSSBalances[msg.sender] = redeemDSSBalances[msg.sender] + dss_amount; // redeemDSSBalances[msg.sender].add(dss_amount);\\r\\n        unclaimedPoolDSS = unclaimedPoolDSS + dss_amount; // unclaimedPoolDSS.add(dss_amount);\\r\\n\\r\\n        lastRedeemed[msg.sender] = block.number;\\r\\n        DScontract.pool_burn(msg.sender, DS_amount_18);\\r\\n        DSScontract.pool_mint(address(this), dss_amount);\\r\\n    }\\r\\n\\r\\n    function collectRedemption(uint256 col_idx)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256 dss_amount, uint256 collateral_amount)\\r\\n    {\\r\\n        // require(redeemPaused[col_idx] == false, \\\"Redeeming is paused\\\");\\r\\n        // require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \\\"Too soon\\\");\\r\\n        bool sendDSS = false;\\r\\n        bool sendCollateral = false;\\r\\n\\r\\n        if (redeemDSSBalances[msg.sender] > 0) {\\r\\n            dss_amount = redeemDSSBalances[msg.sender];\\r\\n            redeemDSSBalances[msg.sender] = 0;\\r\\n            unclaimedPoolDSS = unclaimedPoolDSS - dss_amount; // unclaimedPoolDSS.sub(dss_amount);\\r\\n            sendDSS = true;\\r\\n        }\\r\\n\\r\\n        if (redeemCollateralBalances[msg.sender] > 0) {\\r\\n            collateral_amount = redeemCollateralBalances[msg.sender];\\r\\n            redeemCollateralBalances[msg.sender] = 0;\\r\\n            unclaimedPoolCollateral = unclaimedPoolCollateral - collateral_amount; // unclaimedPoolCollateral.sub(collateral_amount);\\r\\n            sendCollateral = true;\\r\\n        }\\r\\n\\r\\n        if (sendDSS) {\\r\\n            //TransferHelper.safeTransfer(address(DSScontract), msg.sender, dss_amount);\\r\\n            IERC20(address(DSScontract)).safeTransfer(msg.sender, dss_amount);\\r\\n        }\\r\\n\\r\\n        if (sendCollateral) {\\r\\n            //TransferHelper.safeTransfer(collateral_address, msg.sender, collateral_amount);\\r\\n            IERC20(address(collateral_address)).safeTransfer(msg.sender, collateral_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPoolParameters(\\r\\n        uint256 new_ceiling,\\r\\n        uint256 new_bonus_rate,\\r\\n        uint256 new_redemption_delay,\\r\\n        uint256 new_mint_fee,\\r\\n        uint256 new_redeem_fee,\\r\\n        uint256 new_buyback_fee,\\r\\n        uint256 new_recollat_fee\\r\\n    ) external override onlyByOwnGov {\\r\\n        pool_ceiling = new_ceiling;\\r\\n        bonus_rate = new_bonus_rate;\\r\\n        redemption_delay = new_redemption_delay;\\r\\n        minting_fee = new_mint_fee;\\r\\n        redemption_fee = new_redeem_fee;\\r\\n        buyback_fee = new_buyback_fee;\\r\\n        recollat_fee = new_recollat_fee;\\r\\n\\r\\n        //emit PoolParametersSet(new_ceiling, new_bonus_rate, new_redemption_delay, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\\r\\n    }\\r\\n\\r\\n    //Controller Functions\\r\\n\\r\\n    function setController(address _controller) external override onlyByOwnGov {\\r\\n        controller = IController(_controller);\\r\\n    }\\r\\n\\r\\n    function controllerMintDS(uint256 amount) external override onlyController {\\r\\n        DScontract.pool_mint(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function controllerBurnDS(uint256 amount) external override onlyController {\\r\\n        DScontract.pool_burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    //TODO external for now, but needs to be internal+called when borrower proposes\\r\\n    function addValidator(address validator) external override {\\r\\n        controller.addValidator(validator);\\r\\n    }\\r\\n\\r\\n    // loan functions\\r\\n    function addDiscretionaryLoanProposal(\\r\\n        bytes32 _id,\\r\\n        uint256 _principal,\\r\\n        uint256 _duration,\\r\\n        uint256 _totalInterest,\\r\\n        string calldata _description,\\r\\n        IController.MarketInfo memory market_info\\r\\n    ) external override onlyVerified {\\r\\n        require(_principal > 0, \\\"principal must be greater than 0\\\");\\r\\n        require(_duration > 0, \\\"duration must be greater than 0\\\");\\r\\n        require(_totalInterest > 0, \\\"total interst must be greater than 0\\\");\\r\\n        require(num_proposals[msg.sender] < MAX_PROPOSALS, \\\"proposal limit reached\\\");\\r\\n        require(_principal >= 10**DScontract.decimals(), \\\"Needs to be in decimal format\\\"); // should be collateral address, not DS. Can't be less than 1.0 X?\\r\\n        require(!id_taken[_id], \\\"loan id must be unique\\\");\\r\\n\\r\\n        num_proposals[msg.sender]++;\\r\\n        id_taken[_id] = true;\\r\\n\\r\\n        current_loan_data[msg.sender].push(\\r\\n            LoanMetadata({\\r\\n                id: _id,\\r\\n                principal: _principal,\\r\\n                totalInterest: _totalInterest,\\r\\n                duration: _duration,\\r\\n                interestPaid: 0,\\r\\n                amountBorrowed: 0,\\r\\n                description: _description,\\r\\n                approved: false,\\r\\n                allowance: 0,\\r\\n                repaymentDate: 0,\\r\\n                recipient: address(0)\\r\\n            })\\r\\n        );\\r\\n\\r\\n        controller._initiateMarket(market_info, msg.sender, _id);\\r\\n\\r\\n        emit LoanProposal(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n    function addContractLoanProposal(\\r\\n        bytes32 _id,\\r\\n        address _recipient,\\r\\n        uint256 _principal,\\r\\n        uint256 _duration,\\r\\n        uint256 _totalInterest,\\r\\n        string calldata _description,\\r\\n        IController.MarketInfo memory market_info\\r\\n    ) external override onlyVerified {\\r\\n        require(_principal > 0, \\\"principal must be greater than 0\\\");\\r\\n        require(_duration > 0, \\\"duration must be greater than 0\\\");\\r\\n        require(_totalInterest > 0, \\\"total interst must be greater than 0\\\");\\r\\n        require(num_proposals[msg.sender] < MAX_PROPOSALS, \\\"proposal limit reached\\\");\\r\\n        require(_principal >= 10**DScontract.decimals(), \\\"Needs to be in decimal format\\\");\\r\\n        require(address(_recipient).isContract(), \\\"Recipient must be contract\\\");\\r\\n        require(!id_taken[_id], \\\"loan id must be unique\\\");\\r\\n\\r\\n        num_proposals[msg.sender]++;\\r\\n        id_taken[_id] = true;\\r\\n\\r\\n        current_loan_data[msg.sender].push(\\r\\n            LoanMetadata({\\r\\n                id: _id,\\r\\n                principal: _principal,\\r\\n                totalInterest: _totalInterest,\\r\\n                duration: _duration,\\r\\n                interestPaid: 0,\\r\\n                amountBorrowed: 0,\\r\\n                description: _description,\\r\\n                approved: false,\\r\\n                allowance: 0,\\r\\n                repaymentDate: 0,\\r\\n                recipient: _recipient\\r\\n            })\\r\\n        );\\r\\n\\r\\n        controller._initiateMarket(market_info, msg.sender, _id);\\r\\n\\r\\n        emit LoanProposal(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n    function removeProposal(bytes32 id) external override onlyVerified returns (bool) {\\r\\n        return _removeProposal(msg.sender, id);\\r\\n    }\\r\\n\\r\\n    function removeProposalGov(address recipient, bytes32 id) external override onlyByOwnGov returns (bool) {\\r\\n        return _removeProposal(recipient, id);\\r\\n    }\\r\\n\\r\\n    function _removeProposal(address recipient, bytes32 id) internal returns (bool) {\\r\\n\\r\\n        for (uint256 i = 0; i < num_proposals[recipient]; i++) {\\r\\n            if (id == current_loan_data[recipient][i].id) {\\r\\n                emit LoanProposalRemoval(recipient, current_loan_data[recipient][i]);\\r\\n\\r\\n                _removeLoan(recipient, i);\\r\\n\\r\\n                num_proposals[recipient]--;\\r\\n                id_taken[id] = false;\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // called by controller\\r\\n    function approveLoan(\\r\\n        address recipient, // owner of loan\\r\\n        bytes32 id,\\r\\n        address marketFactoryAddress\\r\\n    ) public override onlyValidator {\\r\\n        require(num_loans[recipient] < MAX_LOANS, \\\"max number of loans reached\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < current_loan_data[recipient].length; i++) {\\r\\n            if (id == current_loan_data[recipient][i].id) {\\r\\n                require(!current_loan_data[recipient][i].approved, \\\"loan already approved\\\");\\r\\n\\r\\n                require(controller.canBeApproved(recipient, id, marketFactoryAddress), \\\"not market approved\\\");\\r\\n\\r\\n                LoanMetadata storage loan = current_loan_data[recipient][i];\\r\\n\\r\\n                loan.approved = true;\\r\\n\\r\\n                loan.repaymentDate = block.timestamp + loan.duration;\\r\\n\\r\\n                emit LoanApproval(recipient, current_loan_data[recipient][i]);\\r\\n\\r\\n                if (!is_borrower[recipient]) {\\r\\n                    is_borrower[recipient] = true;\\r\\n                    borrowers_array.push(recipient);\\r\\n                }\\r\\n\\r\\n                num_loans[recipient]++;\\r\\n                num_proposals[recipient]--;\\r\\n                borrower_allowance[recipient] += loan.principal;\\r\\n                loan.allowance = loan.principal;\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function removeBorrower(address borrower) private {\\r\\n        uint256 length = borrowers_array.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            if (borrower == borrowers_array[i]) {\\r\\n                borrowers_array[i] = borrowers_array[length - 1];\\r\\n                borrowers_array.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function borrow(bytes32 id, uint256 amount) external override onlyBorrower onlyVerified {\\r\\n\\r\\n        for (uint256 i = 0; i < current_loan_data[msg.sender].length; i++) {\\r\\n            if (current_loan_data[msg.sender][i].id == id) {\\r\\n                LoanMetadata storage loan = current_loan_data[msg.sender][i];\\r\\n\\r\\n                require(loan.approved, \\\"loan not approved\\\");\\r\\n\\r\\n                require(loan.repaymentDate > block.timestamp, \\\"Loan has already reached maturity\\\");\\r\\n\\r\\n                require(loan.allowance >= amount, \\\"amount exceed's loan allowance\\\");\\r\\n\\r\\n                loan.allowance -= amount;\\r\\n\\r\\n                borrower_allowance[msg.sender] -= amount;\\r\\n\\r\\n                IERC20(collateral_address).safeTransfer(msg.sender, amount);\\r\\n\\r\\n                amount_borrowed[msg.sender] += amount;\\r\\n\\r\\n                loan.amountBorrowed += amount;\\r\\n\\r\\n                total_borrowed_amount += amount;\\r\\n\\r\\n                emit FundsBorrowed(msg.sender, amount);\\r\\n\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function contractBorrow(\\r\\n        address owner,\\r\\n        bytes32 id,\\r\\n        uint256 amount\\r\\n    ) external override onlyContract {\\r\\n\\r\\n        for (uint256 i = 0; i < current_loan_data[owner].length; i++) {\\r\\n            if (id == current_loan_data[owner][i].id) {\\r\\n                LoanMetadata storage loan = current_loan_data[owner][i];\\r\\n\\r\\n                require(loan.recipient == msg.sender, \\\"loan recipient doesn't match caller\\\");\\r\\n                require(loan.approved, \\\"loan not approved\\\");\\r\\n                require(loan.repaymentDate > block.timestamp, \\\"Loan has already reached maturity\\\");\\r\\n                require(loan.allowance >= amount, \\\"amount exceed's loan allowance\\\");\\r\\n\\r\\n                loan.allowance -= amount;\\r\\n\\r\\n                borrower_allowance[owner] -= amount;\\r\\n\\r\\n                IERC20(collateral_address).safeTransfer(msg.sender, amount);\\r\\n\\r\\n                amount_borrowed[owner] += amount;\\r\\n\\r\\n                loan.amountBorrowed += amount;\\r\\n\\r\\n                total_borrowed_amount += amount;\\r\\n\\r\\n                emit FundsBorrowed(msg.sender, amount);\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function repay(\\r\\n        bytes32 id,\\r\\n        uint256 repay_principal,\\r\\n        uint256 repay_interest\\r\\n    ) external override onlyBorrower {\\r\\n        uint256 total_repayment = repay_principal + repay_interest;\\r\\n\\r\\n        for (uint256 i = 0; i < current_loan_data[msg.sender].length; i++) {\\r\\n            if (id == current_loan_data[msg.sender][i].id) {\\r\\n                LoanMetadata storage loan = current_loan_data[msg.sender][i];\\r\\n\\r\\n                require(loan.approved, \\\"loan not approved\\\");\\r\\n                require(loan.repaymentDate > block.timestamp, \\\"Loan has already reached maturity\\\");\\r\\n                require(loan.interestPaid + repay_interest <= loan.totalInterest, \\\"overpaid for loan interest\\\");\\r\\n                require(loan.amountBorrowed >= repay_principal, \\\"overpaid for loan principal\\\");\\r\\n\\r\\n                amount_borrowed[msg.sender] -= repay_principal;\\r\\n\\r\\n                loan.amountBorrowed -= repay_principal;\\r\\n\\r\\n                loan.interestPaid += repay_interest;\\r\\n\\r\\n                accrued_interest += repay_interest;\\r\\n\\r\\n                console.log(\\\"total_borrowed_amount\\\", total_borrowed_amount);\\r\\n\\r\\n                total_borrowed_amount = total_borrowed_amount - repay_principal;\\r\\n\\r\\n                //TransferHelper.safeTransferFrom(collateral_address, msg.sender, address(this), total_repayment);\\r\\n                IERC20(collateral_address).safeTransferFrom(msg.sender, address(this), total_repayment);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function contractRepay(\\r\\n        address owner,\\r\\n        bytes32 id,\\r\\n        uint256 repay_principal,\\r\\n        uint256 repay_interest\\r\\n    ) external override onlyContract {\\r\\n        uint256 total_repayment = repay_principal + repay_interest;\\r\\n\\r\\n        for (uint256 i = 0; i < current_loan_data[owner].length; i++) {\\r\\n            if (id == current_loan_data[owner][i].id) {\\r\\n                LoanMetadata storage loan = current_loan_data[owner][i];\\r\\n\\r\\n                require(loan.recipient == msg.sender, \\\"loan recipient doesn't match caller\\\");\\r\\n                require(loan.approved, \\\"loan not approved\\\");\\r\\n                require(loan.repaymentDate > block.timestamp, \\\"Loan has already reached maturity\\\");\\r\\n                require(loan.interestPaid + repay_interest <= loan.totalInterest, \\\"overpaid for loan interest\\\");\\r\\n                require(loan.amountBorrowed >= repay_principal, \\\"overpaid for loan principal\\\");\\r\\n\\r\\n                amount_borrowed[owner] -= repay_principal;\\r\\n\\r\\n                loan.amountBorrowed -= repay_principal;\\r\\n\\r\\n                loan.interestPaid += repay_interest;\\r\\n\\r\\n                accrued_interest += repay_interest;\\r\\n\\r\\n                console.log(\\\"total_borrowed_amount\\\", total_borrowed_amount);\\r\\n\\r\\n                total_borrowed_amount = total_borrowed_amount - repay_principal;\\r\\n\\r\\n                //TransferHelper.safeTransferFrom(collateral_address, msg.sender, address(this), total_repayment);\\r\\n                IERC20(collateral_address).safeTransferFrom(msg.sender, address(this), total_repayment);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    // called by debtor if they want to resolve loan early.\\r\\n    function resolveLoan(bytes32 id) public override onlyBorrower onlyVerified {\\r\\n        for (uint256 i = 0; i < current_loan_data[msg.sender].length; i++) {\\r\\n            if (id == current_loan_data[msg.sender][i].id) {\\r\\n                LoanMetadata storage loan = current_loan_data[msg.sender][i];\\r\\n\\r\\n                require(loan.approved, \\\"must be an active loan\\\");\\r\\n                require(loan.amountBorrowed == 0, \\\"not fully paid back principal\\\");\\r\\n                require(loan.interestPaid == loan.totalInterest, \\\"not fully paid back interest\\\");\\r\\n                require(loan.repaymentDate > block.timestamp, \\\"loan already matured\\\");\\r\\n                _checkLoanStatus(msg.sender, i);\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function contractResolveLoan(address owner, bytes32 id) public override onlyContract {\\r\\n        for (uint256 i = 0; i < current_loan_data[owner].length; i++) {\\r\\n            if (id == current_loan_data[msg.sender][i].id) {\\r\\n                LoanMetadata storage loan = current_loan_data[owner][i];\\r\\n\\r\\n                require(loan.recipient == msg.sender, \\\"loan recipient doesn't match caller\\\");\\r\\n                require(loan.approved, \\\"must be an active loan\\\");\\r\\n                require(loan.amountBorrowed == 0, \\\"not fully paid back principal\\\");\\r\\n                require(loan.interestPaid == loan.totalInterest, \\\"not fully paid back interest\\\");\\r\\n                require(loan.repaymentDate > block.timestamp, \\\"loan already matured\\\");\\r\\n                _checkLoanStatus(owner, i);\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    // restrictions on acccess?\\r\\n    function fullLoanCheck() public override {\\r\\n        for (uint256 i = 0; i < borrowers_array.length; i++) {\\r\\n            address borrower = borrowers_array[i];\\r\\n            checkAddressLoans(borrower);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // helper function: check individual loan\\r\\n    function _checkLoanStatus(address borrower, uint256 i) private {\\r\\n        LoanMetadata storage loan = current_loan_data[borrower][i];\\r\\n        if (loan.amountBorrowed > 0 || loan.interestPaid < loan.totalInterest) {\\r\\n            if (block.timestamp > loan.repaymentDate) {\\r\\n                controller.resolveMarket(borrower, loan.id, true);\\r\\n\\r\\n                emit Default(borrower, loan);\\r\\n\\r\\n                num_loans[borrower]--;\\r\\n                id_taken[loan.id] = false;\\r\\n\\r\\n                _removeLoan(borrower, i);\\r\\n            }\\r\\n        } else {\\r\\n            controller.resolveMarket(borrower, loan.id, false);\\r\\n            emit FullRepayment(borrower, loan);\\r\\n            // resolve market\\r\\n            num_loans[borrower]--;\\r\\n            id_taken[loan.id] = false;\\r\\n            _removeLoan(borrower, i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // checks all user's loan's\\r\\n    function checkAddressLoans(address borrower) public override {\\r\\n        for (uint256 i = 0; i < current_loan_data[borrower].length; i++) {\\r\\n            if (current_loan_data[borrower][i].approved) {\\r\\n                _checkLoanStatus(borrower, i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkLoanStatus (address owner, bytes32 id) public override {\\r\\n\\r\\n        for (uint256 i = 0; i < current_loan_data[owner].length; i++) {\\r\\n            if (id == current_loan_data[owner][i].id) {\\r\\n                require(current_loan_data[owner][i].approved, \\\"loan not approved\\\");\\r\\n\\r\\n                _checkLoanStatus(owner, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function _removeLoan(address addr, uint256 i) private {\\r\\n        require(i < current_loan_data[addr].length, \\\"invalid array index\\\");\\r\\n        uint256 terminal_index = current_loan_data[addr].length - 1;\\r\\n        current_loan_data[addr][i] = current_loan_data[addr][terminal_index];\\r\\n        current_loan_data[addr].pop();\\r\\n    }\\r\\n\\r\\n    // GETTERS\\r\\n    \\r\\n    function getLoan(address borrower, bytes32 id) public view override returns (LoanMetadata memory) {\\r\\n        for (uint256 i = 0; i < current_loan_data[borrower].length; i++) {\\r\\n            if (id == current_loan_data[borrower][i].id) {\\r\\n                return current_loan_data[borrower][i];\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"loan not found\\\");\\r\\n    }\\r\\n\\r\\n    function getLoans(address borrower) public view override returns (LoanMetadata[] memory) {\\r\\n        return current_loan_data[borrower];\\r\\n    }\\r\\n\\r\\n\\r\\n    function getBorrowerLoanData(address recipient) public view override returns (LoanMetadata memory) {\\r\\n        uint256 id = 0; //get first loandata\\r\\n        return current_loan_data[recipient][id];\\r\\n    }\\r\\n\\r\\n    function getProtocolLoanData() public view override returns (LoanData memory) {\\r\\n        LoanData memory loandata = LoanData({\\r\\n            _total_borrowed_amount: total_borrowed_amount,\\r\\n            _accrued_interest: accrued_interest\\r\\n        });\\r\\n        return loandata;\\r\\n    }\\r\\n\\r\\n    function isApproved(address borrower, uint256 idx) public view returns (bool) {\\r\\n        LoanMetadata memory loan = current_loan_data[borrower][idx];\\r\\n        return loan.approved;\\r\\n    }\\r\\n\\r\\n    event LoanProposal(address indexed recipient, bytes32 loan_id);\\r\\n    event LoanApproval(address indexed recipient, LoanMetadata loan);\\r\\n    event FullRepayment(address indexed recipient, LoanMetadata loan);\\r\\n    event Default(address indexed defaultor, LoanMetadata loan);\\r\\n    event LoanProposalRemoval(address indexed recipient, LoanMetadata loan);\\r\\n    event FundsBorrowed(address indexed recipient, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x71bbff1c21cfb8b6642424a284cd8ac7b2caed7df9d6829af9749e37c87cf864\"},\"contracts/stablecoin/owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/Owned\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor (address _owner) public {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\",\"keccak256\":\"0x1214743d77165d1ce7f88cf4f0383173ea9d465859c9b557e8da00523059bd9d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/utils/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x75d1265e4bdad84523c13dc5ac5206bce64afb89c417e7feb0a5b1ab55563bab\",\"license\":\"MIT\"},\"contracts/utils/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\",\"keccak256\":\"0x290c70dde0ab296015de3cebd882d7ac0e47aef30776a7f6fd92e654a440cd64\",\"license\":\"MIT\"},\"contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x13372fee1e5dfe684344c3c80d064da29b53e50e8f7f149b4702ffa5758f6848\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526014608081905260a0523480156200001b57600080fd5b50604051620054a4380380620054a48339810160408190526200003e9162000226565b816001600160a01b0381166200009b5760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f7420626520300000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1506001600160a01b038516158015906200011457506001600160a01b03841615155b80156200012957506001600160a01b03831615155b80156200013e57506001600160a01b03821615155b80156200015357506001600160a01b03811615155b620001a15760405162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573732064657465637465640000000000000000000000604482015260640162000092565b600680546001600160a01b03199081166001600160a01b039788161790915560078054821695871695909517909455600280548516938616939093179092556003805484169185169190911790556004805490921692169190911790556000600f5562000295565b80516001600160a01b03811681146200022157600080fd5b919050565b600080600080600060a086880312156200023e578081fd5b620002498662000209565b9450620002596020870162000209565b9350620002696040870162000209565b9250620002796060870162000209565b9150620002896080870162000209565b90509295509295909350565b60805160a0516151d4620002d0600039600081816104a2015281816125d60152612cd30152600081816105e20152610e8901526151d46000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c806392eefe9b11610167578063d5375bb0116100ce578063ecce544611610087578063ecce544614610670578063ef15e8cb14610683578063f02e4cb8146106c1578063f43038c5146106d4578063f57e3fa5146106f4578063fd5232ae1461070757600080fd5b8063d5375bb0146105dd578063d5c14a7314610604578063d988ef2014610617578063d999d39414610637578063e0cd9c8f1461064a578063e48584941461065d57600080fd5b8063a67eaf1b11610120578063a67eaf1b14610558578063abae2c4c14610578578063bcecd40f14610598578063c1c76de8146105a1578063cc79a85a146105c1578063cf0a4fd9146105d457600080fd5b806392eefe9b146104c45780639a37addc146104d75780639d202bf8146104ea5780639f59ae4d14610512578063a20fc3e614610525578063a4cc257c1461053857600080fd5b8063692eba091161020b5780637c93ec30116101c45780637c93ec301461044857806381c44b5c1461045b5780638da5cb5b1461046e5780638ee53dc1146104815780638fc0ddf61461049457806391751c131461049d57600080fd5b8063692eba09146103aa5780636cdd9cf6146103ca5780636d95d238146103f457806379ba5097146104145780637b0461e91461041c5780637c2a5f031461042557600080fd5b80632a16cca41161025d5780632a16cca4146103105780632cb5ccdc146103335780634d238c8e146103465780634ebbe7621461035957806352542eee1461036c57806353a47bb71461037f57600080fd5b8063020824611461029a57806308a7493d146102a45780630eeb6fb7146102d75780631627540c146102ea57806318339d8e146102fd575b600080fd5b6102a261071a565b005b6102c46102b23660046145bf565b60136020526000908152604090205481565b6040519081526020015b60405180910390f35b6102a26102e53660046145d9565b610780565b6102a26102f83660046145bf565b6108c3565b6102a261030b36600461463d565b610989565b61032361031e3660046146a7565b610c3a565b60405190151581526020016102ce565b6102a2610341366004614602565b610da5565b6102a26103543660046145bf565b6112e7565b6102a261036736600461487f565b61134a565b6102a261037a36600461466f565b6113a9565b600154610392906001600160a01b031681565b6040516001600160a01b0390911681526020016102ce565b6102c46103b83660046145bf565b601c6020526000908152604090205481565b6103dd6103d83660046146a7565b6116c4565b6040516102ce9b9a99989796959493929190614bf8565b6104076104023660046145bf565b6117d1565b6040516102ce9190614e17565b6102a2611937565b6102c460145481565b6103236104333660046145bf565b60176020526000908152604090205460ff1681565b6102a261045636600461478e565b611a21565b6104076104693660046145d9565b611c8e565b600054610392906001600160a01b031681565b61032361048f3660046146d9565b611e7e565b6102c460115481565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b6102a26104d23660046145bf565b611e92565b6102a26104e53660046146d9565b611ef3565b6104fd6104f83660046146d9565b612124565b604080519283526020830191909152016102ce565b6102a26105203660046147af565b6121ee565b6102a26105333660046147da565b612504565b6102c46105463660046145bf565b601b6020526000908152604090205481565b6102c46105663660046145bf565b60196020526000908152604090205481565b6102c46105863660046145bf565b60166020526000908152604090205481565b6102c460155481565b6102c46105af3660046145bf565b60186020526000908152604090205481565b6102a26105cf3660046145d9565b61299d565b6102c460105481565b6102c47f000000000000000000000000000000000000000000000000000000000000000081565b6102a26106123660046146f1565b612c01565b61062a6106253660046145bf565b6130fa565b6040516102ce9190614b97565b6102a26106453660046145bf565b613280565b6102a26106583660046146d9565b613313565b6102a261066b3660046147af565b613398565b61039261067e3660046146d9565b613668565b6040805180820182526000808252602091820152815180830183526010548082526011549183019182528351908152905191810191909152016102ce565b6102a26106cf3660046146d9565b613692565b6102c46106e23660046145bf565b60126020526000908152604090205481565b6102a261070236600461478e565b613717565b6103236107153660046145d9565b6137ee565b60005b601d5481101561077d576000601d828154811061074a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905061076a81613280565b508061077581615157565b91505061071d565b50565b60005b6001600160a01b0383166000908152601a6020526040902054811015610889576001600160a01b0383166000908152601a602052604090208054829081106107db57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160000154821415610877576001600160a01b0383166000908152601a6020526040902080548290811061082c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a90920201015460ff166108685760405162461bcd60e51b815260040161085f90614d51565b60405180910390fd5b6108728382613841565b505050565b8061088181615157565b915050610783565b5060405162461bcd60e51b815260206004820152600e60248201526d1b1bd85b881b9bdd08199bdd5b9960921b604482015260640161085f565b6000546001600160a01b031633146109355760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201526e37b936903a3434b99030b1ba34b7b760891b606482015260840161085f565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b333b6109a75760405162461bcd60e51b815260040161085f90614da5565b60005b6001600160a01b0384166000908152601a6020526040902054811015610889576001600160a01b0384166000908152601a60205260409020805482908110610a0257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160000154831415610c28576001600160a01b0384166000908152601a60205260408120805483908110610a5357634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a909202019081015490915061010090046001600160a01b03163314610a985760405162461bcd60e51b815260040161085f90614dd4565b600981015460ff16610abc5760405162461bcd60e51b815260040161085f90614d51565b42816004015411610adf5760405162461bcd60e51b815260040161085f90614ccc565b8281600601541015610b335760405162461bcd60e51b815260206004820152601e60248201527f616d6f756e74206578636565642773206c6f616e20616c6c6f77616e63650000604482015260640161085f565b82816006016000828254610b4791906150c2565b90915550506001600160a01b03851660009081526018602052604081208054859290610b749084906150c2565b9091555050600254610b90906001600160a01b03163385613a57565b6001600160a01b03851660009081526019602052604081208054859290610bb8908490614f70565b9250508190555082816007016000828254610bd39190614f70565b925050819055508260106000828254610bec9190614f70565b909155505060405183815233907f7fd4365684b3ba337d3ae48b3f8e735f5159301d6df281756306b6363adb66e79060200160405180910390a2505b80610c3281615157565b9150506109aa565b6001600160a01b0382166000908152601a60205260408120805482919084908110610c7557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201604051806101600160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882018054610cef9061511c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1b9061511c565b8015610d685780601f10610d3d57610100808354040283529160200191610d68565b820191906000526020600020905b815481529060010190602001808311610d4b57829003601f168201915b50505091835250506009919091015460ff81161515602083015261010090046001600160a01b031660409091015261012001519150505b92915050565b600554604051631f4a58fb60e31b81523360048201526001600160a01b039091169063fa52c7d890602401602060405180830381600087803b158015610dea57600080fd5b505af1158015610dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2291906146b9565b610e6e5760405162461bcd60e51b815260206004820152601960248201527f61646472657373206d7573742062652076616c696461746f7200000000000000604482015260640161085f565b6001600160a01b0383166000908152601b60205260409020547f000000000000000000000000000000000000000000000000000000000000000011610ef55760405162461bcd60e51b815260206004820152601b60248201527f6d6178206e756d626572206f66206c6f616e7320726561636865640000000000604482015260640161085f565b60005b6001600160a01b0384166000908152601a6020526040902054811015610889576001600160a01b0384166000908152601a60205260409020805482908110610f5057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201600001548314156112d5576001600160a01b0384166000908152601a60205260409020805482908110610fa157634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a90920201015460ff1615610ffd5760405162461bcd60e51b81526020600482015260156024820152741b1bd85b88185b1c9958591e48185c1c1c9bdd9959605a1b604482015260640161085f565b6005546040516339ba9d4b60e11b81526001600160a01b038681166004830152602482018690528481166044830152909116906373753a9690606401602060405180830381600087803b15801561105357600080fd5b505af1158015611067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108b91906146b9565b6110cd5760405162461bcd60e51b81526020600482015260136024820152721b9bdd081b585c9ad95d08185c1c1c9bdd9959606a1b604482015260640161085f565b6001600160a01b0384166000908152601a6020526040812080548390811061110557634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a90920201908101805460ff1916600117905560038101549091506111379042614f70565b60048201556001600160a01b0385166000818152601a6020526040902080547f8a36fa35863f3eb8c934711f0e2def1d0e681a313e07f89000b183de1bf1924991908590811061119757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016040516111b29190614e2a565b60405180910390a26001600160a01b03851660009081526017602052604090205460ff16611240576001600160a01b0385166000818152601760205260408120805460ff19166001908117909155601d805491820181559091527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0180546001600160a01b03191690911790555b6001600160a01b0385166000908152601b6020526040812080549161126483615157565b90915550506001600160a01b0385166000908152601c6020526040812080549161128d83615105565b909155505060018101546001600160a01b038616600090815260186020526040812080549091906112bf908490614f70565b9091555050600181015460069091015550505050565b806112df81615157565b915050610ef8565b600554604051632691c64760e11b81526001600160a01b03838116600483015290911690634d238c8e906024015b600060405180830381600087803b15801561132f57600080fd5b505af1158015611343573d6000803e3d6000fd5b5050505050565b6004546001600160a01b031633148061136d57506000546001600160a01b031633145b6113895760405162461bcd60e51b815260040161085f90614c9d565b600896909655600994909455600a92909255600b55600c55600d55600e55565b333b6113c75760405162461bcd60e51b815260040161085f90614da5565b60006113d38284614f70565b905060005b6001600160a01b0386166000908152601a6020526040902054811015610889576001600160a01b0386166000908152601a6020526040902080548290811061143057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201600001548514156116ac576001600160a01b0386166000908152601a6020526040812080548390811061148157634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a909202019081015490915061010090046001600160a01b031633146114c65760405162461bcd60e51b815260040161085f90614dd4565b600981015460ff166114ea5760405162461bcd60e51b815260040161085f90614d51565b4281600401541161150d5760405162461bcd60e51b815260040161085f90614ccc565b80600201548482600501546115229190614f70565b11156115705760405162461bcd60e51b815260206004820152601a60248201527f6f7665727061696420666f72206c6f616e20696e746572657374000000000000604482015260640161085f565b84816007015410156115c45760405162461bcd60e51b815260206004820152601b60248201527f6f7665727061696420666f72206c6f616e207072696e636970616c0000000000604482015260640161085f565b6001600160a01b038716600090815260196020526040812080548792906115ec9084906150c2565b925050819055508481600701600082825461160791906150c2565b92505081905550838160050160008282546116229190614f70565b92505081905550836011600082825461163b9190614f70565b9250508190555061167b604051806040016040528060158152602001741d1bdd185b17d89bdc9c9bddd95917d85b5bdd5b9d605a1b815250601054613aba565b8460105461168991906150c2565b6010556002546116a4906001600160a01b0316333086613aff565b5050506116be565b806116b681615157565b9150506113d8565b50505050565b601a60205281600052604060002081815481106116e057600080fd5b90600052602060002090600a0201600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154908060080180546117349061511c565b80601f01602080910402602001604051908101604052809291908181526020018280546117609061511c565b80156117ad5780601f10611782576101008083540402835291602001916117ad565b820191906000526020600020905b81548152906001019060200180831161179057829003601f168201915b5050506009909301549192505060ff8116906001600160a01b03610100909104168b565b6117d961418c565b6001600160a01b0382166000908152601a602052604081208054829061180f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820180546118899061511c565b80601f01602080910402602001604051908101604052809291908181526020018280546118b59061511c565b80156119025780601f106118d757610100808354040283529160200191611902565b820191906000526020600020905b8154815290600101906020018083116118e557829003601f168201915b50505091835250506009919091015460ff81161515602083015261010090046001600160a01b03166040909101529392505050565b6001546001600160a01b031633146119af5760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527402063616e20616363657074206f776e65727368697605c1b606482015260840161085f565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b3360009081526017602052604090205460ff16611a505760405162461bcd60e51b815260040161085f90614d7c565b60005b336000908152601a602052604090205481101561088957336000908152601a60205260409020805484919083908110611a9c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201600001541415611c7857336000908152601a60205260408120805483908110611ae357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600a90910201600981015490915060ff16611b1a5760405162461bcd60e51b815260040161085f90614d51565b42816004015411611b3d5760405162461bcd60e51b815260040161085f90614ccc565b8281600601541015611b915760405162461bcd60e51b815260206004820152601e60248201527f616d6f756e74206578636565642773206c6f616e20616c6c6f77616e63650000604482015260640161085f565b82816006016000828254611ba591906150c2565b90915550503360009081526018602052604081208054859290611bc99084906150c2565b9091555050600254611be5906001600160a01b03163385613a57565b3360009081526019602052604081208054859290611c04908490614f70565b9250508190555082816007016000828254611c1f9190614f70565b925050819055508260106000828254611c389190614f70565b909155505060405183815233907f7fd4365684b3ba337d3ae48b3f8e735f5159301d6df281756306b6363adb66e79060200160405180910390a250505050565b80611c8281615157565b915050611a53565b5050565b611c9661418c565b60005b6001600160a01b0384166000908152601a6020526040902054811015610889576001600160a01b0384166000908152601a60205260409020805482908110611cf157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160000154831415611e6c576001600160a01b0384166000908152601a60205260409020805482908110611d4257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201604051806101600160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882018054611dbc9061511c565b80601f0160208091040260200160405190810160405280929190818152602001828054611de89061511c565b8015611e355780601f10611e0a57610100808354040283529160200191611e35565b820191906000526020600020905b815481529060010190602001808311611e1857829003601f168201915b50505091835250506009919091015460ff81161515602083015261010090046001600160a01b03166040909101529150610d9f9050565b80611e7681615157565b915050611c99565b6000611e8a3383613b37565b90505b919050565b6004546001600160a01b0316331480611eb557506000546001600160a01b031633145b611ed15760405162461bcd60e51b815260040161085f90614c9d565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526017602052604090205460ff16611f225760405162461bcd60e51b815260040161085f90614d7c565b60005b336000908152601a602052604090205481101561088957336000908152601a60205260409020805482908110611f6b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016000015482141561211257336000908152601a60205260408120805483908110611fb357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600a90910201600981015490915060ff166120135760405162461bcd60e51b815260206004820152601660248201527536bab9ba1031329030b71030b1ba34bb32903637b0b760511b604482015260640161085f565b6007810154156120655760405162461bcd60e51b815260206004820152601d60248201527f6e6f742066756c6c792070616964206261636b207072696e636970616c000000604482015260640161085f565b80600201548160050154146120bc5760405162461bcd60e51b815260206004820152601c60248201527f6e6f742066756c6c792070616964206261636b20696e74657265737400000000604482015260640161085f565b428160040154116121065760405162461bcd60e51b81526020600482015260146024820152731b1bd85b88185b1c9958591e481b585d1d5c995960621b604482015260640161085f565b6121103383613841565b505b8061211c81615157565b915050611f25565b336000908152601260205260408120548190819081901561216c5733600090815260126020526040812080549190556015549094506121649085906150c2565b601555600191505b33600090815260136020526040902054156121ad5733600090815260136020526040812080549190556014549093506121a69084906150c2565b6014555060015b81156121ca576007546121ca906001600160a01b03163386613a57565b80156121e7576002546121e7906001600160a01b03163385613a57565b5050915091565b60065460408051634ed9ac1f60e01b815290516000926001600160a01b031691634ed9ac1f916004808301926020929190829003018186803b15801561223357600080fd5b505afa158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b9190614867565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663545108636040518163ffffffff1660e01b815260040160206040518083038186803b1580156122bd57600080fd5b505afa1580156122d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f59190614867565b90506000600f54600a6123089190614feb565b61231290876150a3565b90506000620f4240600c54620f424061232b91906150c2565b61233590896150a3565b61233f9190614f88565b90506000620f424061235185846150a3565b61235b9190614f88565b61236590836150c2565b9050600085612377620f4240846150a3565b6123819190614f88565b9050826000620f424061239488846150a3565b61239e9190614f88565b3360009081526013602052604090205490915081906123be908290614f70565b336000908152601360205260409020556014546123dc908290614f70565b601455336000908152601260205260409020546123fa908590614f70565b33600090815260126020526040902055601554612418908590614f70565b60155533600081815260166020526040908190204390556006549051631211faed60e31b81526004810192909252602482018990526001600160a01b03169063908fd76890604401600060405180830381600087803b15801561247a57600080fd5b505af115801561248e573d6000803e3d6000fd5b5050600754604051635a7ab59360e11b8152306004820152602481018890526001600160a01b03909116925063b4f56b269150604401600060405180830381600087803b1580156124de57600080fd5b505af11580156124f2573d6000803e3d6000fd5b50505050505050505050505050505050565b600086116125545760405162461bcd60e51b815260206004820181905260248201527f7072696e636970616c206d7573742062652067726561746572207468616e2030604482015260640161085f565b600085116125a45760405162461bcd60e51b815260206004820152601f60248201527f6475726174696f6e206d7573742062652067726561746572207468616e203000604482015260640161085f565b600084116125c45760405162461bcd60e51b815260040161085f90614d0d565b336000908152601c60205260409020547f00000000000000000000000000000000000000000000000000000000000000001161263b5760405162461bcd60e51b81526020600482015260166024820152751c1c9bdc1bdcd85b081b1a5b5a5d081c995858da195960521b604482015260640161085f565b600660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561268957600080fd5b505afa15801561269d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c191906148ca565b6126cc90600a614ff7565b86101561271b5760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520696e20646563696d616c20666f726d6174000000604482015260640161085f565b6000878152601e602052604090205460ff16156127735760405162461bcd60e51b81526020600482015260166024820152756c6f616e206964206d75737420626520756e6971756560501b604482015260640161085f565b336000908152601c6020526040812080549161278e83615157565b90915550506000878152601e60209081526040808320805460ff19166001179055338352601a82528083208151610160810183528b81528084018b9052808301899052606081018a90526080810185905260a0810185905260c0810185905260e08101949094528151601f87018490048402810184019092528582529291610100830191908790879081908401838280828437600092018290525093855250505060208083018290526040928301829052845460018181018755958352918190208451600a909302019182558381015194820194909455908201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201518051929391926128bc92600885019201906141f4565b506101208201516009919091018054610140909301516001600160a81b0319909316911515610100600160a81b031916919091176101006001600160a01b0393841602179055600554604051631c8ff3eb60e01b8152911690631c8ff3eb9061292d90849033908c90600401614e3d565b600060405180830381600087803b15801561294757600080fd5b505af115801561295b573d6000803e3d6000fd5b50506040518981523392507feaff56e01f00cd418aa172118afecc17e32c850b8590b9905586ab9cfac23cb1915060200160405180910390a250505050505050565b333b6129bb5760405162461bcd60e51b815260040161085f90614da5565b60005b6001600160a01b0383166000908152601a602052604090205481101561088957336000908152601a60205260409020805482908110612a0d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160000154821415612bef576001600160a01b0383166000908152601a60205260408120805483908110612a5e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a909202019081015490915061010090046001600160a01b03163314612aa35760405162461bcd60e51b815260040161085f90614dd4565b600981015460ff16612af05760405162461bcd60e51b815260206004820152601660248201527536bab9ba1031329030b71030b1ba34bb32903637b0b760511b604482015260640161085f565b600781015415612b425760405162461bcd60e51b815260206004820152601d60248201527f6e6f742066756c6c792070616964206261636b207072696e636970616c000000604482015260640161085f565b8060020154816005015414612b995760405162461bcd60e51b815260206004820152601c60248201527f6e6f742066756c6c792070616964206261636b20696e74657265737400000000604482015260640161085f565b42816004015411612be35760405162461bcd60e51b81526020600482015260146024820152731b1bd85b88185b1c9958591e481b585d1d5c995960621b604482015260640161085f565b612bed8483613841565b505b80612bf981615157565b9150506129be565b60008611612c515760405162461bcd60e51b815260206004820181905260248201527f7072696e636970616c206d7573742062652067726561746572207468616e2030604482015260640161085f565b60008511612ca15760405162461bcd60e51b815260206004820152601f60248201527f6475726174696f6e206d7573742062652067726561746572207468616e203000604482015260640161085f565b60008411612cc15760405162461bcd60e51b815260040161085f90614d0d565b336000908152601c60205260409020547f000000000000000000000000000000000000000000000000000000000000000011612d385760405162461bcd60e51b81526020600482015260166024820152751c1c9bdc1bdcd85b081b1a5b5a5d081c995858da195960521b604482015260640161085f565b600660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d8657600080fd5b505afa158015612d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbe91906148ca565b612dc990600a614ff7565b861015612e185760405162461bcd60e51b815260206004820152601d60248201527f4e6565647320746f20626520696e20646563696d616c20666f726d6174000000604482015260640161085f565b6001600160a01b0387163b612e6f5760405162461bcd60e51b815260206004820152601a60248201527f526563697069656e74206d75737420626520636f6e7472616374000000000000604482015260640161085f565b6000888152601e602052604090205460ff1615612ec75760405162461bcd60e51b81526020600482015260166024820152756c6f616e206964206d75737420626520756e6971756560501b604482015260640161085f565b336000908152601c60205260408120805491612ee283615157565b90915550506000888152601e60209081526040808320805460ff19166001179055338352601a82528083208151610160810183528c81528084018b9052808301899052606081018a90526080810185905260a0810185905260c0810185905260e08101949094528151601f87018490048402810184019092528582529291610100830191908790879081908401838280828437600092018290525093855250505060208083018290526001600160a01b038c16604093840152845460018181018755958352918190208451600a909302019182558381015194820194909455908201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015180519293919261301892600885019201906141f4565b506101208201516009919091018054610140909301516001600160a81b0319909316911515610100600160a81b031916919091176101006001600160a01b0393841602179055600554604051631c8ff3eb60e01b8152911690631c8ff3eb9061308990849033908d90600401614e3d565b600060405180830381600087803b1580156130a357600080fd5b505af11580156130b7573d6000803e3d6000fd5b50506040518a81523392507feaff56e01f00cd418aa172118afecc17e32c850b8590b9905586ab9cfac23cb1915060200160405180910390a25050505050505050565b6001600160a01b0381166000908152601a60209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561327557838290600052602060002090600a02016040518061016001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820180546131b69061511c565b80601f01602080910402602001604051908101604052809291908181526020018280546131e29061511c565b801561322f5780601f106132045761010080835404028352916020019161322f565b820191906000526020600020905b81548152906001019060200180831161321257829003601f168201915b50505091835250506009919091015460ff811615156020808401919091526101009091046001600160a01b03166040909201919091529082526001929092019101613132565b505050509050919050565b60005b6001600160a01b0382166000908152601a6020526040902054811015611c8a576001600160a01b0382166000908152601a602052604090208054829081106132db57634e487b7160e01b600052603260045260246000fd5b600091825260209091206009600a90920201015460ff1615613301576133018282613841565b8061330b81615157565b915050613283565b6005546001600160a01b031633146133615760405162461bcd60e51b815260206004820152601160248201527034b9903737ba1031b7b73a3937b63632b960791b604482015260640161085f565b600654604051635a7ab59360e11b8152336004820152602481018390526001600160a01b039091169063b4f56b2690604401611315565b3360009081526017602052604090205460ff166133c75760405162461bcd60e51b815260040161085f90614d7c565b60006133d38284614f70565b905060005b336000908152601a602052604090205481101561088957336000908152601a6020526040902080548290811061341e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016000015485141561365657336000908152601a6020526040812080548390811061346657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600a90910201600981015490915060ff1661349d5760405162461bcd60e51b815260040161085f90614d51565b428160040154116134c05760405162461bcd60e51b815260040161085f90614ccc565b80600201548482600501546134d59190614f70565b11156135235760405162461bcd60e51b815260206004820152601a60248201527f6f7665727061696420666f72206c6f616e20696e746572657374000000000000604482015260640161085f565b84816007015410156135775760405162461bcd60e51b815260206004820152601b60248201527f6f7665727061696420666f72206c6f616e207072696e636970616c0000000000604482015260640161085f565b33600090815260196020526040812080548792906135969084906150c2565b92505081905550848160070160008282546135b191906150c2565b92505081905550838160050160008282546135cc9190614f70565b9250508190555083601160008282546135e59190614f70565b92505081905550613625604051806040016040528060158152602001741d1bdd185b17d89bdc9c9bddd95917d85b5bdd5b9d605a1b815250601054613aba565b8460105461363391906150c2565b60105560025461364e906001600160a01b0316333086613aff565b505050505050565b8061366081615157565b9150506133d8565b601d818154811061367857600080fd5b6000918252602090912001546001600160a01b0316905081565b6005546001600160a01b031633146136e05760405162461bcd60e51b815260206004820152601160248201527034b9903737ba1031b7b73a3937b63632b960791b604482015260640161085f565b600654604051631211faed60e31b8152336004820152602481018390526001600160a01b039091169063908fd76890604401611315565b6000600f54600a6137289190614feb565b61373290846150a3565b600b549091508190620f42409061374990826150c2565b61375390836150a3565b61375d9190614f88565b90508083111561376c57600080fd5b600254613784906001600160a01b0316333087613aff565b600654604051635a7ab59360e11b8152336004820152602481018390526001600160a01b039091169063b4f56b2690604401600060405180830381600087803b1580156137d057600080fd5b505af11580156137e4573d6000803e3d6000fd5b5050505050505050565b6004546000906001600160a01b031633148061381457506000546001600160a01b031633145b6138305760405162461bcd60e51b815260040161085f90614c9d565b61383a8383613b37565b9392505050565b6001600160a01b0382166000908152601a6020526040812080548390811061387957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020190506000816007015411806138a3575080600201548160050154105b156139af5780600401544211156108725760055481546040516342f045c560e01b81526001600160a01b0386811660048301526024820192909252600160448201529116906342f045c590606401600060405180830381600087803b15801561390b57600080fd5b505af115801561391f573d6000803e3d6000fd5b50505050826001600160a01b03167f5c331f2772ff62b4bfd942df5d45d6b19c2973da3b8af63d96ddd7a3feb18d3f8260405161395c9190614e2a565b60405180910390a26001600160a01b0383166000908152601b6020526040812080549161398883615105565b909155505080546000908152601e60205260409020805460ff191690556108728383613c98565b60055481546040516342f045c560e01b81526001600160a01b0386811660048301526024820192909252600060448201529116906342f045c590606401600060405180830381600087803b158015613a0657600080fd5b505af1158015613a1a573d6000803e3d6000fd5b50505050826001600160a01b03167f4f8df16e8ac07b1ca3196769ed4c467e66ffbe56982aea6765c6c0d901424f478260405161395c9190614e2a565b6040516001600160a01b03831660248201526044810182905261087290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613f18565b611c8a8282604051602401613ad0929190614c7b565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052613fea565b6040516001600160a01b03808516602483015283166044820152606481018290526116be9085906323b872dd60e01b90608401613a83565b6000805b6001600160a01b0384166000908152601c6020526040902054811015613c8e576001600160a01b0384166000908152601a60205260409020805482908110613b9357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160000154831415613c7c576001600160a01b0384166000818152601a6020526040902080547fc3d8814966fdedf25f5d16167ba4bc54d1c2e6bf88425ddc4600b1b5ad23d79e919084908110613c0757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201604051613c229190614e2a565b60405180910390a2613c348482613c98565b6001600160a01b0384166000908152601c60205260408120805491613c5883615105565b9091555050506000828152601e60205260409020805460ff19169055506001610d9f565b80613c8681615157565b915050613b3b565b5060009392505050565b6001600160a01b0382166000908152601a60205260409020548110613cf55760405162461bcd60e51b81526020600482015260136024820152720d2dcecc2d8d2c840c2e4e4c2f240d2dcc8caf606b1b604482015260640161085f565b6001600160a01b0382166000908152601a6020526040812054613d1a906001906150c2565b6001600160a01b0384166000908152601a6020526040902080549192509082908110613d5657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a0201601a6000856001600160a01b03166001600160a01b031681526020019081526020016000208381548110613da857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a020160008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401556005820154816005015560068201548160060155600782015481600701556008820181600801908054613e1a9061511c565b613e25929190614278565b506009918201805491909201805460ff19811660ff9093161515928317825592546001600160a81b0319909316610100600160a81b031990921691909117610100928390046001600160a01b0390811690930217905583166000908152601a60205260409020805480613ea857634e487b7160e01b600052603160045260246000fd5b600082815260208120600a600019909301928302018181556001810182905560028101829055600381018290556004810182905560058101829055600681018290556007810182905590613eff60088301826142f3565b5060090180546001600160a81b03191690559055505050565b6000613f6d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661400b9092919063ffffffff16565b8051909150156108725780806020019051810190613f8b91906146b9565b6108725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161085f565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b606061401a8484600085614022565b949350505050565b6060824710156140835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161085f565b6001600160a01b0385163b6140da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161085f565b600080866001600160a01b031685876040516140f69190614b7b565b60006040518083038185875af1925050503d8060008114614133576040519150601f19603f3d011682016040523d82523d6000602084013e614138565b606091505b5091509150614148828286614153565b979650505050505050565b6060831561416257508161383a565b8251156141725782518084602001fd5b8160405162461bcd60e51b815260040161085f9190614c68565b60405180610160016040528060008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160001515815260200160006001600160a01b031681525090565b8280546142009061511c565b90600052602060002090601f0160209004810192826142225760008555614268565b82601f1061423b57805160ff1916838001178555614268565b82800160010185558215614268579182015b8281111561426857825182559160200191906001019061424d565b50614274929150614329565b5090565b8280546142849061511c565b90600052602060002090601f0160209004810192826142a65760008555614268565b82601f106142b75780548555614268565b8280016001018555821561426857600052602060002091601f016020900482015b828111156142685782548255916001019190600101906142d8565b5080546142ff9061511c565b6000825580601f1061430f575050565b601f01602090049060005260206000209081019061077d91905b5b80821115614274576000815560010161432a565b80356001600160a01b0381168114611e8d57600080fd5b600082601f830112614365578081fd5b8135602061437a61437583614f4c565b614f1b565b80838252828201915082860187848660051b8901011115614399578586fd5b855b858110156143da57813567ffffffffffffffff8111156143b9578788fd5b6143c78a87838c010161448b565b855250928401929084019060010161439b565b5090979650505050505050565b600082601f8301126143f7578081fd5b8135602061440761437583614f4c565b80838252828201915082860187848660051b8901011115614426578586fd5b855b858110156143da57813584529284019290840190600101614428565b60008083601f840112614455578182fd5b50813567ffffffffffffffff81111561446c578182fd5b60208301915083602082850101111561448457600080fd5b9250929050565b600082601f83011261449b578081fd5b813567ffffffffffffffff8111156144b5576144b5615188565b6144c8601f8201601f1916602001614f1b565b8181528460208386010111156144dc578283fd5b816020850160208301379081016020019190915292915050565b600060e08284031215614507578081fd5b61450f614ef2565b905061451a8261433e565b81526145286020830161433e565b60208201526040820135604082015260608201356060820152608082013567ffffffffffffffff8082111561455c57600080fd5b6145688583860161448b565b608084015260a084013591508082111561458157600080fd5b61458d85838601614355565b60a084015260c08401359150808211156145a657600080fd5b506145b3848285016143e7565b60c08301525092915050565b6000602082840312156145d0578081fd5b61383a8261433e565b600080604083850312156145eb578081fd5b6145f48361433e565b946020939093013593505050565b600080600060608486031215614616578081fd5b61461f8461433e565b9250602084013591506146346040850161433e565b90509250925092565b600080600060608486031215614651578283fd5b61465a8461433e565b95602085013595506040909401359392505050565b60008060008060808587031215614684578081fd5b61468d8561433e565b966020860135965060408601359560600135945092505050565b600080604083850312156145eb578182fd5b6000602082840312156146ca578081fd5b8151801515811461383a578182fd5b6000602082840312156146ea578081fd5b5035919050565b60008060008060008060008060e0898b03121561470c578586fd5b8835975061471c60208a0161433e565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff8082111561474d578485fd5b6147598c838d01614444565b909550935060c08b0135915080821115614771578283fd5b5061477e8b828c016144f6565b9150509295985092959890939650565b600080604083850312156147a0578182fd5b50508035926020909101359150565b6000806000606084860312156147c3578081fd5b505081359360208301359350604090920135919050565b600080600080600080600060c0888a0312156147f4578081fd5b87359650602088013595506040880135945060608801359350608088013567ffffffffffffffff80821115614827578283fd5b6148338b838c01614444565b909550935060a08a013591508082111561484b578283fd5b506148588a828b016144f6565b91505092959891949750929550565b600060208284031215614878578081fd5b5051919050565b600080600080600080600060e0888a031215614899578081fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b6000602082840312156148db578081fd5b815160ff8116811461383a578182fd5b600081518084526020808501808196508360051b81019150828601855b85811015614932578284038952614920848351614979565b98850198935090840190600101614908565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561496e57815187529582019590820190600101614952565b509495945050505050565b600081518084526149918160208601602086016150d9565b601f01601f19169290920160200192915050565b8054600090600181811c90808316806149bf57607f831692505b60208084108214156149df57634e487b7160e01b86526022600452602486fd5b838852602088018280156149fa5760018114614a0b57614a36565b60ff19871682528282019750614a36565b60008981526020902060005b87811015614a3057815484820152908601908401614a17565b83019850505b5050505050505092915050565b6000610160825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518282870152614aaa83870182614979565b9250505061012080840151614ac28287018215159052565b5050610140928301516001600160a01b03169390920192909252919050565b60006101608254845260018301546020850152600283015460408501526003830154606085015260048301546080850152600583015460a0850152600683015460c0850152600783015460e085015280610100850152614b46818501600885016149a5565b90506009830154614b5f610120860160ff831615159052565b6001600160a01b03600882901c16610140860152509392505050565b60008251614b8d8184602087016150d9565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015614beb57603f19888603018452614bd9858351614a43565b94509285019290850190600101614bbd565b5092979650505050505050565b60006101608d83528c60208401528b60408401528a60608401528960808401528860a08401528760c08401528660e084015280610100840152614c3d81840187614979565b94151561012084015250506001600160a01b0391909116610140909101529998505050505050505050565b60208152600061383a6020830184614979565b604081526000614c8e6040830185614979565b90508260208301529392505050565b6020808252601590820152744e6f74206f776e6572206f722074696d656c6f636b60581b604082015260600190565b60208082526021908201527f4c6f616e2068617320616c72656164792072656163686564206d6174757269746040820152607960f81b606082015260800190565b60208082526024908201527f746f74616c20696e7465727374206d75737420626520677265617465722074686040820152630616e20360e41b606082015260800190565b6020808252601190820152701b1bd85b881b9bdd08185c1c1c9bdd9959607a1b604082015260600190565b6020808252600f908201526e34b9903737ba103137b93937bbb2b960891b604082015260600190565b6020808252601590820152741a5cc81b9bdd081cdb585c9d0818dbdb9d1c9858dd605a1b604082015260600190565b60208082526023908201527f6c6f616e20726563697069656e7420646f65736e2774206d617463682063616c6040820152623632b960e91b606082015260800190565b60208152600061383a6020830184614a43565b60208152600061383a6020830184614ae1565b60608152600060018060a01b0380865116606084015280602087015116608084015250604085015160a0830152606085015160c0830152608085015160e080840152614e8d610140840182614979565b905060a0860151605f198085840301610100860152614eac83836148eb565b925060c08801519150808584030161012086015250614ecb828261493f565b92505050614ee460208301856001600160a01b03169052565b826040830152949350505050565b60405160e0810167ffffffffffffffff81118282101715614f1557614f15615188565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614f4457614f44615188565b604052919050565b600067ffffffffffffffff821115614f6657614f66615188565b5060051b60200190565b60008219821115614f8357614f83615172565b500190565b600082614fa357634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115614fe3578160001904821115614fc957614fc9615172565b80851615614fd657918102915b93841c9390800290614fad565b509250929050565b600061383a8383615002565b600061383a60ff8416835b60008261501157506001610d9f565b8161501e57506000610d9f565b8160018114615034576002811461503e5761505a565b6001915050610d9f565b60ff84111561504f5761504f615172565b50506001821b610d9f565b5060208310610133831016604e8410600b841016171561507d575081810a610d9f565b6150878383614fa8565b806000190482111561509b5761509b615172565b029392505050565b60008160001904831182151516156150bd576150bd615172565b500290565b6000828210156150d4576150d4615172565b500390565b60005b838110156150f45781810151838201526020016150dc565b838111156116be5750506000910152565b60008161511457615114615172565b506000190190565b600181811c9082168061513057607f821691505b6020821081141561515157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561516b5761516b615172565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e2c11f65933b0ac875a8770a3658a74b6699da8e275cfb8c4a192fcf37e25f4b64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21218,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21220,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18714,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "collateral_address",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 18716,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "creator_address",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18718,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "timelock_address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 18721,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "controller",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IController)16744"
      },
      {
        "astId": 18724,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "DScontract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(DS)16468"
      },
      {
        "astId": 18727,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "DSScontract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(DSS)16643"
      },
      {
        "astId": 18729,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "pool_ceiling",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 18731,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "bonus_rate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 18733,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redemption_delay",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 18735,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "minting_fee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 18737,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redemption_fee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 18739,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "buyback_fee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 18741,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "recollat_fee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 18743,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "missing_decimals",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 18748,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "total_borrowed_amount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 18750,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "accrued_interest",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 18760,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redeemDSSBalances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18764,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redeemCollateralBalances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18766,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "unclaimedPoolCollateral",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 18768,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "unclaimedPoolDSS",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 18772,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "lastRedeemed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18777,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "is_borrower",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18782,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "borrower_allowance",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18787,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "amount_borrowed",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18793,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "current_loan_data",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_array(t_struct(LoanMetadata)16770_storage)dyn_storage)"
      },
      {
        "astId": 18798,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "num_loans",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18803,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "num_proposals",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18806,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "borrowers_array",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18810,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "id_taken",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LoanMetadata)16770_storage)dyn_storage": {
        "base": "t_struct(LoanMetadata)16770_storage",
        "encoding": "dynamic_array",
        "label": "struct ILendingPool.LoanMetadata[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DS)16468": {
        "encoding": "inplace",
        "label": "contract DS",
        "numberOfBytes": "20"
      },
      "t_contract(DSS)16643": {
        "encoding": "inplace",
        "label": "contract DSS",
        "numberOfBytes": "20"
      },
      "t_contract(IController)16744": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LoanMetadata)16770_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILendingPool.LoanMetadata[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LoanMetadata)16770_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LoanMetadata)16770_storage": {
        "encoding": "inplace",
        "label": "struct ILendingPool.LoanMetadata",
        "members": [
          {
            "astId": 16749,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 16751,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16753,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "totalInterest",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16755,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16757,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "repaymentDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16759,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "interestPaid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16761,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "allowance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16763,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "amountBorrowed",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16765,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "description",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 16767,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "approved",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 16769,
            "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
            "label": "recipient",
            "offset": 1,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}