{
  "address": "0xEc2c857EE71ce1EEac8AFE014621bc99e82aD30A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "name": "fetchDynamic",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract AbstractMarketFactoryV3",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "marketId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "tokenRatios",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "balances",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "weights",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalSupply",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.PoolBundle",
                  "name": "pool",
                  "type": "tuple"
                },
                {
                  "internalType": "contract OwnedERC20",
                  "name": "winner",
                  "type": "address"
                }
              ],
              "internalType": "struct Fetcher.DynamicMarketBundle",
              "name": "_super",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificDynamicMarketBundle[]",
          "name": "_bundles",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowestMarketIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract MasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "name": "fetchInitial",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shareFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakerFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "settlementFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFee",
                  "type": "uint256"
                },
                {
                  "internalType": "contract FeePot",
                  "name": "feePot",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.CollateralBundle",
                  "name": "collateral",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "marketCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Fetcher.MarketFactoryBundle",
              "name": "_super",
              "type": "tuple"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificMarketFactoryBundle",
          "name": "_marketFactoryBundle",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract AbstractMarketFactoryV3",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "marketId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "tokenRatios",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "balances",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "weights",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalSupply",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.PoolBundle",
                  "name": "pool",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "beginTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earlyDepositEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalRewardsAccrued",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "created",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct MasterChef.PoolStatusInfo",
                  "name": "rewards",
                  "type": "tuple"
                },
                {
                  "internalType": "contract OwnedERC20[]",
                  "name": "shareTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "contract OwnedERC20",
                  "name": "winner",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "initialOdds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Fetcher.StaticMarketBundle",
              "name": "_super",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificStaticMarketBundle[]",
          "name": "_marketBundles",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowestMarketIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract MasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract AbstractMarketFactoryV3",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "marketId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "tokenRatios",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "balances",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "weights",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalSupply",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.PoolBundle",
                  "name": "pool",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "beginTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earlyDepositEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalRewardsAccrued",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "created",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct MasterChef.PoolStatusInfo",
                  "name": "rewards",
                  "type": "tuple"
                },
                {
                  "internalType": "contract OwnedERC20[]",
                  "name": "shareTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "contract OwnedERC20",
                  "name": "winner",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "initialOdds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Fetcher.StaticMarketBundle",
              "name": "_super",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificStaticMarketBundle",
          "name": "_bundle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sayHi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e5d7f711df7b3445a7e99b05166b9d264ca8b02e784abbc97501ac3093be924",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0xEc2c857EE71ce1EEac8AFE014621bc99e82aD30A",
    "transactionIndex": 1,
    "gasUsed": "1832562",
    "logsBloom": "0x
    "blockHash": "0x20f38cdfd4ee53edbd4ba8cec9f76f5c2d58aeadabb1e2a9d289a0d61fac73ff",
    "transactionHash": "0x1e5d7f711df7b3445a7e99b05166b9d264ca8b02e784abbc97501ac3093be924",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27731088,
        "transactionHash": "0x1e5d7f711df7b3445a7e99b05166b9d264ca8b02e784abbc97501ac3093be924",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000411b0de4f804360000000000000000000000000000000000000000000000026e7d7bec2831ad2a00000000000000000000000000000000000000000000145c04629da926400acf0000000000000000000000000000000000000000000000026e3c60de4339a8f400000000000000000000000000000000000000000000145c04a3b8b70b380f05",
        "logIndex": 2,
        "blockHash": "0x20f38cdfd4ee53edbd4ba8cec9f76f5c2d58aeadabb1e2a9d289a0d61fac73ff"
      }
    ],
    "blockNumber": 27731088,
    "cumulativeGasUsed": "1869015",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "e99c8449f30646952907aa423784d19d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"fetchDynamic\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.PoolBundle\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct Fetcher.DynamicMarketBundle\",\"name\":\"_super\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedFetcher.SpecificDynamicMarketBundle[]\",\"name\":\"_bundles\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowestMarketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract MasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"fetchInitial\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"feePot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.CollateralBundle\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"marketCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.MarketFactoryBundle\",\"name\":\"_super\",\"type\":\"tuple\"}],\"internalType\":\"struct TrustedFetcher.SpecificMarketFactoryBundle\",\"name\":\"_marketFactoryBundle\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.PoolBundle\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsAccrued\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChef.PoolStatusInfo\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Fetcher.StaticMarketBundle\",\"name\":\"_super\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedFetcher.SpecificStaticMarketBundle[]\",\"name\":\"_marketBundles\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowestMarketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract MasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.PoolBundle\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsAccrued\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChef.PoolStatusInfo\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Fetcher.StaticMarketBundle\",\"name\":\"_super\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedFetcher.SpecificStaticMarketBundle\",\"name\":\"_bundle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sayHi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/random.sol\":\"TrustedFetcher\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6d3291d0338666da918131e0b475b360e02f9642401746e7abd2cf5a39f16398\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x329a7ddac03d6ab6f9842504b4c66009a8e829782538946be262aef9fc5ac9b3\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is disstributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\n\\nimport \\\"./BPool.sol\\\";\\n\\ncontract BFactory is BBronze {\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\n\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\n\\n    mapping(address => bool) private _isBPool;\\n\\n    function isBPool(address b) external view returns (bool) {\\n        return _isBPool[b];\\n    }\\n\\n    function newBPool() external returns (BPool) {\\n        BPool bpool = new BPool();\\n        _isBPool[address(bpool)] = true;\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\n        bpool.setController(msg.sender);\\n        return bpool;\\n    }\\n\\n    address private _blabs;\\n\\n    constructor() {\\n        _blabs = msg.sender;\\n    }\\n\\n    function getBLabs() external view returns (address) {\\n        return _blabs;\\n    }\\n\\n    function setBLabs(address b) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        emit LOG_BLABS(msg.sender, b);\\n        _blabs = b;\\n    }\\n\\n    function collect(BPool pool) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\n        bool xfer = pool.transfer(_blabs, collected);\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb8a30f5089a3e49d13fa63ca815761b1e67d5985c5549b11d5b5ea88cab45ec5\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x14c1eb51464ef7673b8497df8441093f92f949f374ba58be6c57264f90405ecd\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xce47c1071dc0cce2a78b9e34540ebcda49b4d26de2e011090e99476862a985fd\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c65c1a2966e2e6d775beea034f3023ce1fb0182fd84da5a83820191fe494664\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4bad2e0da3c0daa4cca2ff05e40cfae7287c5504119e419cb561ee67ab382f43\",\"license\":\"MIT\"},\"contracts/bonds/Ibondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4; \\n\\n\\ninterface IBondingCurve{\\n\\tfunction setMarketManager(address _market_manager) external;\\n\\tfunction getTotalZCB(uint256 marketId) external returns (uint256 result);\\n\\tfunction getTotalDS(uint256 marketId) external returns (uint256 result);\\n\\tfunction getMaxQuantity(uint256 marketId) external view returns (uint256 result);\\n\\tfunction curveInit(uint256 marketId) external;\\n\\tfunction getExpectedPrice(uint256 marketId, uint256 amountIn) external view returns (uint256 result);\\n\\tfunction getCollateral() external returns (address);\\n\\tfunction buy(\\n\\t\\taddress marketFactoryAddress, \\n\\t\\taddress trader,\\n\\t\\tuint256 amountIn, \\n\\t\\tuint256 marketId\\n\\t) external returns(uint256);\\n\\tfunction sell(\\n\\t\\taddress marketFactoryAddress, \\n\\t\\taddress trader,\\n\\t\\tuint256 amountIn, \\n\\t\\tuint256 marketId\\n\\t) external returns (uint256);\\n\\tfunction redeem(\\n\\t\\tuint256 marketId, \\n\\t\\taddress receiver, \\n\\t\\tuint256 zcb_redeem_amount, \\n\\t\\tuint256 collateral_redeem_amount\\n\\t) external;\\n\\tfunction redeemPostAssessment(\\n\\t\\tuint256 marketId, \\n\\t\\taddress redeemer,\\n\\t\\tuint256 collateral_amount\\n\\t) external;\\n\\tfunction burnFirstLoss(\\n\\t\\tuint256 marketId, \\n\\t\\tuint256 burn_collateral_amount\\n\\t) external;\\n\\tfunction mint(\\n\\t\\tuint256 marketId, \\n\\t\\tuint256 mintAmount,\\n\\t\\taddress to\\n\\t) external;\\n\\tfunction burn(\\n\\t\\tuint256 marketId, \\n\\t\\tuint256 burnAmount, \\n\\t\\taddress to\\n\\t) external;\\n}\",\"keccak256\":\"0xe845e38e8bd98c0f9be5a6e585cad5965419d50a72f7d7bd06d2496641a9376a\"},\"contracts/bonds/LinearBondingCurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @notice y = a * x + b\\n/// @dev NEED TO REDO FOR GAS EFFICIENT\\ncontract LinearBondingCurve is BondingCurve {\\n  // ASSUMES 18 TRAILING DECIMALS IN UINT256\\n  using FixedPointMathLib for uint256;\\n  uint256 a;\\n  uint256 b;\\n\\n  constructor (\\n      string memory name,\\n      string memory symbol,\\n      address owner,\\n      address collateral,\\n      uint256 _a,\\n      uint256 _b\\n  ) BondingCurve(name, symbol, owner, collateral) {\\n      a = _a;\\n      b = _b;\\n  }\\n  /**\\n   @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\n   @param amount: amount collateral in => has collateral decimal number.\\n   tokens returned in 60.18\\n   */\\n  function _calculatePurchaseReturn(uint256 amount) view internal override virtual returns(uint256) {\\n    uint256 s = totalSupply() ;\\n    uint256 _amount = amount * 10 ** (18 - collateral_dec);\\n    console.log('s', s, a); \\n    console.log('b', b); \\n\\n    uint256 x = ((a.mulWadDown(s) + b) ** 2)/math_precision; \\n    console.log('x', x); \\n\\n    uint256 y = 2*( a.mulWadDown(_amount)); \\n    console.log('y', y); \\n\\n    uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\n    console.log('x_y_sqrt', x_y_sqrt); \\n\\n    uint256 z = (a.mulWadDown(s) + b); \\n    console.log('z', z); \\n\\n    uint256 result = (x_y_sqrt-z).divWadDown(a);\\n    console.log('result', result); \\n\\n    return result; \\n\\n\\n      // uint256 two = uint256(2).fromUint();\\n      // result = (((a.mul(s) + b).pow(two) + two.mul(a).mul(amount)).sqrt() - (a.mul(s) + b)).div(a);\\n      //result = ( ( ( ((a.mulWadDown(s) + b) ** 2)/math_precision + 2 * a.mulWadDown(_amount) ) * math_precision ).sqrt() - (a.mulWadDown(s) + b) ).divWadDown(a);\\n  }\\n\\n  /// @notice calculates area under the curve from current supply to s+amount\\n  /// result = a * amount / 2  * (2* supply + amount) + b * amount\\n  /// @dev amount is in 60.18.\\n  /// returned in collateral decimals\\n  function _calcAreaUnderCurve(uint256 amount) internal view override virtual returns(uint256){\\n    uint256 s = totalSupply(); \\n\\n    uint256 result = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\n    console.log('result', result); \\n    result /= (10 ** (18 - collateral_dec));\\n\\n    return result; \\n  }\\n\\n  /**\\n   @notice calculates area under curve from s-amount to s, is c(as-ac/2+b) where c is amount \\n   @dev collateral tokens returned\\n   @param amount: tokens burning => 60.18 amount needs to be in 18 decimal \\n   @dev returns amount of collateral tokens with collateral decimals\\n   */\\n  function _calculateSaleReturn(uint256 amount) view internal override virtual returns (uint256) {\\n    uint s = totalSupply();\\n\\n    console.log('amount', amount, s); \\n\\n    uint256 x = a.mulWadDown(s); \\n    console.log('x', x); \\n    uint256 y = a.mulWadDown(amount)/2; \\n    console.log('y', y); \\n    uint256 z = b + x - y; \\n    console.log('z', z); \\n    uint256 result = amount.mulWadDown(z); \\n    console.log('result', result); \\n\\n    result = result / (10 ** (18 - collateral_dec));\\n\\n    return result; \\n    \\n    // uint256 _reserves = reserves * 10 ** (18 - collateral_dec);\\n\\n    // console.log(\\\"_reserves\\\", _reserves);\\n    // result = _reserves - ( (a / 2).mulWadDown((((s - amount)**2) / math_precision)) + b.mulWadDown(s - amount) );\\n    // console.log(\\\"s - amount\\\", s - amount);\\n    // result /= (10 ** (18 - collateral_dec));\\n  }\\n\\n  /**\\n   @param amount: amount added in 60.18\\n   @dev returns price in 60.18\\n   */\\n  function _calculateExpectedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\n    uint256 s = totalSupply();\\n\\n    result = (s + amount).mulWadDown(a) + b;\\n  }\\n\\n  function _calculateDecreasedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\n    result = (totalSupply() - amount).mulWadDown(a) + b;\\n  }\\n\\n  /**\\n   @notice probability = a * x + b, 60.18\\n   returns probability in 60.18\\n   */\\n  function _calculateProbability(uint256 amount) view internal override virtual returns (uint256 score) {\\n      //score = amount.mul(a) + b;\\n    score = amount.mulWadDown(a) + b;\\n  }\\n\\n\\n\\n function _calculateScore(uint256 priceOut, bool atLoss)view internal override virtual returns (uint256 score) {\\n      // uint256 two = uint256(2).fromUint();\\n      // if (atLoss) {score =  ((priceOut-math_precision).div(math_precision)).pow(two);}\\n      // else {score = ((priceOut).div(math_precision)).pow(two);}\\n    if (atLoss) {\\n        score = ((priceOut - math_precision) ** 2) / math_precision;\\n    } else {\\n        score = (priceOut ** 2) / math_precision;\\n    }\\n\\n  }\\n\\n  function getParams() public view returns(uint,uint){\\n    return (a,b); \\n  }\\n}\",\"keccak256\":\"0xb6a8f40e27c5bc1ca88941f5c76bcd2ca66eb424a2bb9f8ca428d5a54e7257ef\"},\"contracts/bonds/bondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//TODO need to actually review for security and shit.\\nabstract contract BondingCurve is OwnedERC20 {\\n\\t// ASSUMES 18 TRAILING DECIMALS IN UINT256\\n\\tusing SafeERC20 for ERC20;\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\tuint256 internal price_upper_bound;\\n\\tuint256 internal price_lower_bound;\\n\\tuint256 internal reserves;\\n\\tuint256 internal max_quantity;\\n\\tuint256 internal math_precision; \\n\\tuint256 internal collateral_dec;\\n\\tERC20 collateral; // NEED TO CHANGE ONCE VAULT IS DONE\\n\\taddress[] private buyers; // keeps track for final reputation.\\n\\n\\n\\tconstructor (\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\t\\taddress owner, // market manager.\\n\\t\\t\\taddress _collateral\\n\\t\\t\\t) OwnedERC20(name, symbol, owner) {\\n\\t\\tcollateral = ERC20(_collateral);\\n\\t\\tmath_precision = 1e18;\\n\\t\\tcollateral_dec = collateral.decimals();\\n\\t}\\n\\n\\n\\tfunction setUpperBound(uint256 upper_bound) public onlyOwner {\\n\\t\\tprice_upper_bound = upper_bound;\\n\\t}\\n\\n\\tfunction setLowerBound(uint256 lower_bound) public onlyOwner {\\n\\t\\tprice_lower_bound = lower_bound;\\n\\t}\\n\\n\\tfunction setMaxQuantity(uint256 _max_quantity) public onlyOwner {\\n\\t\\tmax_quantity = _max_quantity;\\n\\t}\\n\\n\\t/**\\n\\t @notice called by market manager, like trustedMint but returns amount out\\n\\t @param collateral_amount: amount of collateral in. => w/ collateral decimals\\n\\t */\\n\\t function trustedBuy(address trader, uint256 collateral_amount) public onlyOwner returns (uint256) {\\n\\t\\tuint256 tokens = _calculatePurchaseReturn(collateral_amount);\\n\\t\\tconsole.log('TOKENS', tokens, collateral_amount); \\n\\t\\treserves += collateral_amount;\\n\\n\\t\\trequire(collateral.balanceOf(trader)>= collateral_amount,\\\"not enough balance\\\"); \\n\\t\\tcollateral.safeTransferFrom(trader, address(this), collateral_amount);\\n\\t\\t_mint(trader, tokens);\\n\\t\\treturn tokens;\\n\\t }\\n\\n\\t/**\\n\\t @param zcb_amount: amount of zcb tokens burned, needs to be in 18 decimals \\n\\t */\\n\\t function trustedSell(address trader, uint256 zcb_amount) public onlyOwner returns (uint256) {\\n\\t\\tuint256 collateral_out = _calculateSaleReturn(zcb_amount);\\n\\t\\tconsole.log(\\\"colalteralout\\\", collateral_out); \\n\\t\\t_burn(trader, zcb_amount);\\n\\t\\tconsole.log('here', zcb_amount);\\n\\n\\t\\tcollateral.safeTransfer(trader, collateral_out);\\n\\t\\tconsole.log('here2', collateral_out);\\n\\n\\t\\treserves -= collateral_out;\\n\\t\\tconsole.log('here3');\\n\\n\\t\\treturn collateral_out;\\n\\t }\\n\\n\\t function trustedApproveCollateralTransfer(address trader, uint256 amount) public onlyOwner {\\n\\t\\tcollateral.approve(trader, amount);\\n\\t }\\n\\n\\t/**\\n\\t @notice calculates tokens returns from input collateral\\n\\t @dev shouldn't be calling this function, should be calculating amount from frontend.\\n\\t @param amount: input collateral (ds)\\n\\t */\\n\\t function calculatePurchaseReturn(uint256 amount) public view  returns (uint256 result) {\\n\\t\\tresult = _calculatePurchaseReturn(amount);\\n\\t }\\n\\n\\n\\t/// @notice gets required amount of collateral to purchase X amount of tokens\\n\\t/// need to get area under the curve from current supply X_  to X_+X \\n\\tfunction calcAreaUnderCurve(uint256 amount) public view  returns(uint){\\n\\t\\treturn _calcAreaUnderCurve(amount); \\n\\t}\\n\\n\\t/**\\n\\t @notice calculates collateral returns from selling tokens\\n\\t @param amount: amount of tokens selling\\n\\t */\\n\\t function calculateSaleReturn(uint256 amount) public view  returns (uint256 result) {\\n\\t\\tresult = _calculateSaleReturn(amount);\\n\\t }\\n\\n\\t/// @notice calculates score necessary to update reputation score\\n\\tfunction calculateScore(uint256 priceOut, bool atLoss) public view returns(uint){\\n\\t\\treturn _calculateScore(priceOut, atLoss);\\n\\t}\\n\\n\\n\\n\\t/// @notice calculates implied probability of the trader \\n\\t/// @param quantity is the ratio amount(in colalteral) / total collateral budget for trader, in 18 decimals \\n\\tfunction calcImpliedProbability(uint256 collateral_amount, uint256 quantity) public view returns(uint256 prob){\\n\\t\\tuint256 zcb_amount = calculatePurchaseReturn(collateral_amount); \\n\\t\\tconsole.log('zcb_amount', zcb_amount); \\n\\t\\t//uint256 avg_price = collateral_amount/zcb_amount; \\n\\t\\tuint256 avg_price = calcAveragePrice(zcb_amount); //18 decimals \\n\\t\\tconsole.log('avg_price', avg_price); \\n\\t\\tuint256 b = avg_price.mulWadDown(math_precision - avg_price);\\n\\t\\tconsole.log('b', b);\\n\\t\\tuint256 prob = quantity.mulWadDown(b)+ avg_price; \\n\\t\\treturn prob; \\n\\t}\\n\\n\\t/// @notice caluclates average price for the user to buy amount tokens \\n\\t/// @dev which is average under the curve divided by amount \\n\\t/// amount is the amount of bonds, 18 decimals \\n\\tfunction calcAveragePrice(uint256 amount) public view returns(uint256){\\n\\n\\t\\tuint256 area = calcAreaUnderCurve(amount); //this takes in 18 \\n\\t\\tconsole.log(\\\"area\\\", area); \\n\\n\\t\\t//area is in decimal 6, amount is in 18\\n\\t\\tuint256 area_in_precision = area*(10**12); \\n\\t\\tuint256 result = area_in_precision.divWadDown(amount); \\n\\t\\t//returns a 18 decimal avg price \\n\\t\\treturn result; \\n\\t}\\n\\n\\t/**\\n\\t @notice calculates expected price given user buys X tokens\\n\\t @param amount: hypothetical amount of tokens bought\\n\\t */\\t\\n\\t function calculateExpectedPrice(uint256 amount) public view  returns (uint256 result) {\\n\\t\\tresult = _calculateExpectedPrice(amount);\\n\\t }\\n\\n\\t function getTotalCollateral() public view returns (uint256 result) {\\n\\t\\tresult = collateral.balanceOf(address(this));\\n\\t }\\n\\n\\t function getCollateral() public view returns (address) {\\n\\t\\treturn address(collateral);\\n\\t } \\n\\n\\t function getTotalZCB() public view returns (uint256 result) {\\n\\t\\tresult = totalSupply();\\n\\t }\\n\\n\\t function getMaxQuantity() public view returns (uint256 result) {\\n\\t\\tresult = max_quantity;\\n\\t }\\n\\n\\t function getUpperBound() public view returns (uint256 result) {\\n\\t\\tresult = price_upper_bound;\\n\\t }\\n\\n\\t function getLowerBound() public view returns (uint256 result) {\\n\\t\\tresult = price_lower_bound;\\n\\t }\\n\\t function getReserves() public view returns(uint256){\\n\\t\\treturn reserves; \\n\\t }\\n\\n\\t/**\\n\\t @notice buy bond tokens with necessary checks and transfers of collateral.\\n\\t @param amount: amount of collateral/ds paid in exchange for tokens\\n\\t @dev amount has number of collateral decimals\\n\\t */\\n\\t function buy(uint256 amount) public {\\n\\t\\tuint256 tokens = _calculatePurchaseReturn(amount);\\n\\t\\tconsole.log(\\\"buy:tokens\\\", tokens);\\n\\t\\treserves += amount; // CAN REPLACE WITH collateral.balanceOf(this)\\n\\t\\t_mint(msg.sender, tokens);\\n\\t\\tcollateral.safeTransferFrom(msg.sender, address(this), amount);\\n\\t}\\n\\n\\t/**\\n\\t @notice sell bond tokens with necessary checks and transfers of collateral\\n\\t @param amount: amount of tokens selling. 60.18.\\n\\t */\\n\\tfunction sell(uint256 amount) public {\\n\\t\\tuint256 sale = _calculateSaleReturn(amount);\\n\\t\\t_burn(msg.sender, amount);\\n\\t\\tcollateral.safeTransfer(msg.sender, sale);\\n\\t\\treserves -= sale;\\n\\t }\\n\\n\\t/**\\n\\t @dev doesn't perform any checks, checks performed by caller\\n\\t */\\n\\tfunction incrementReserves(uint256 amount) public onlyOwner{\\n\\t\\treserves += amount;\\n\\t }\\n\\n\\t/**\\n\\t @dev doesn't perform any checks, checks performed by caller\\n\\t */\\n\\tfunction decrementReserves(uint256 amount) public onlyOwner {\\n\\t\\treserves -= amount;\\n\\t }\\n\\n\\t/**\\n\\t @notice used for calculating reputation score on resolved market.\\n\\t */\\n\\tfunction calculateProbability(uint256 amount) view public returns (uint256 score) {\\n\\t\\treturn _calculateProbability(amount);\\n\\t }\\n\\n\\t// function trustedBurn(address trader, uint256 amount) public onlyOwner{\\n\\t// \\t_burn(trader, amount);\\n\\t//  }\\n\\n\\n\\n\\n\\n\\tfunction redeem(\\n\\t\\taddress receiver, \\n\\t\\tuint256 zcb_redeem_amount, \\n\\t\\tuint256 collateral_redeem_amount\\n\\t\\t) external  onlyOwner {\\n\\t\\t_burn(receiver, zcb_redeem_amount);\\n\\t\\tcollateral.safeTransfer(receiver, collateral_redeem_amount); \\n\\t\\treserves -= collateral_redeem_amount;\\n\\t }\\n\\n\\n\\n\\tfunction redeemPostAssessment(\\n\\t\\taddress redeemer,\\n\\t\\tuint256 collateral_amount\\n\\t\\t) external  onlyOwner{\\n\\t\\tuint256 redeem_amount = balanceOf(redeemer);\\n\\t\\t_burn(redeemer, redeem_amount); \\n\\t\\tcollateral.safeTransfer(redeemer, collateral_amount); \\n\\t\\treserves -= collateral_amount;\\n\\t }\\n\\n\\tfunction burnFirstLoss(\\n\\t\\tuint256 burn_collateral_amount\\n\\t\\t) external onlyOwner{\\n\\t\\tcollateral.safeTransfer(owner, burn_collateral_amount); \\n\\t\\treserves -= burn_collateral_amount;\\n\\t }\\n\\n\\n\\t function _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t\\t) internal override virtual {\\n\\t\\t\\t// on _mint\\n\\t\\t\\tif (from == address(0) && price_upper_bound > 0) {\\n\\t\\t\\t\\tconsole.log(\\\"beforeTT: price_upper_bound\\\", price_upper_bound);\\n\\t\\t\\t\\trequire(_calculateExpectedPrice(amount) <= price_upper_bound, \\\"above price upper bound\\\");\\n\\t\\t\\t\\t// if (balanceOf(to) == 0 && amount > 0) {\\n\\t\\t\\t\\t//     buyers.push(to);\\n\\t\\t\\t\\t// }\\n\\t\\t\\t}\\n\\t\\t// on _burn\\n\\t\\telse if (to == address(0) && price_lower_bound > 0) {\\n\\t\\t\\trequire(_calculateDecreasedPrice(amount) >= price_lower_bound, \\\"below price lower bound\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t @dev amount is tokens burned.\\n\\t */\\n\\t function calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result) {\\n\\t\\tresult = _calculateDecreasedPrice(amount);\\n\\t }\\n\\n\\t function _calcAreaUnderCurve(uint256 amount) internal view  virtual returns(uint256 result); \\n\\n\\t function _calculateScore(uint256 priceOut, bool atLoss) view internal virtual returns(uint256 score);\\n\\n\\t function _calculatePurchaseReturn(uint256 amount) view internal virtual returns(uint256 result);\\n\\n\\t function _calculateSaleReturn(uint256 amount) view internal virtual returns (uint256 result);\\n\\n\\t function _calculateExpectedPrice(uint256 amount) view internal virtual returns (uint256 result);\\n\\n\\t function _calculateProbability(uint256 amount) view internal virtual returns (uint256 score);\\n\\n\\t function _calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result);\\n\\t}\",\"keccak256\":\"0xe76b4cfa47db764ce3abc89f0d95f1634c6ba99a2d19a9fc6b53f7bef2194285\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nabstract contract CalculateLinesToBPoolOdds {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\n\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\n        uint256 _total = sum(_proportions);\\n\\n        _odds = new uint256[](_proportions.length);\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\n        }\\n    }\\n\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\n            _sum += _numbers[i];\\n        }\\n    }\\n\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\n        _odds = new uint256[](_size);\\n\\n        if (_invalid) _odds[0] = 1e18; // 2%\\n\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\n            _odds[i] = _each;\\n        }\\n    }\\n\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\n\\n        uint256 _total = _odds1 + _odds2;\\n\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\n\\n        // Moneyline odds are too skewed: would have under 2% odds.\\n        require(_odds1 >= 1e18);\\n        require(_odds2 >= 1e18);\\n\\n        _odds = new uint256[](3);\\n        _odds[0] = 1e18; // Invalid, 2%\\n        _odds[1] = _odds1;\\n        _odds[2] = _odds2;\\n    }\\n\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\n        if (_line < 0) {\\n            // favored\\n            uint256 _posLine = uint256(-_line);\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\n        } else {\\n            // underdog\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca10bd78d1908da65a3fe474605312f63b592b0750ecdf3e5b54adbff0f4daf5\",\"license\":\"MIT\"},\"contracts/libraries/HasHeadToHeadMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./Sport.sol\\\";\\nimport \\\"./CalculateLinesToBPoolOdds.sol\\\";\\nimport \\\"./TokenNamesFromTeams.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\nabstract contract HasHeadToHeadMarket is\\n    AbstractMarketFactoryV3,\\n    Sport,\\n    CalculateLinesToBPoolOdds,\\n    TokenNamesFromTeams\\n{\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 private headToHeadMarketType;\\n    string private noContestName;\\n\\n    uint256 constant HeadToHeadAway = 1;\\n    uint256 constant HeadToHeadHome = 2;\\n\\n    constructor(uint256 _marketType, string memory _noContestName) {\\n        headToHeadMarketType = _marketType;\\n        noContestName = _noContestName;\\n    }\\n\\n    function makeHeadToHeadMarket(\\n        int256[2] memory _moneylines,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) internal returns (uint256) {\\n        // moneylines is [home,away] but the outcomes are listed [NC,away,home] so they must be reversed\\n        return\\n            makeSportsMarket(\\n                noContestName,\\n                _homeTeamName,\\n                _awayTeamName,\\n                oddsFromLines(_moneylines[1], _moneylines[0])\\n            );\\n    }\\n\\n    function resolveHeadToHeadMarket(\\n        uint256 _marketId,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        uint256 _shareTokenIndex = calcHeadToHeadWinner(_homeScore, _awayScore);\\n        endMarket(_marketId, _shareTokenIndex);\\n    }\\n\\n    function calcHeadToHeadWinner(uint256 _homeScore, uint256 _awayScore) private pure returns (uint256) {\\n        if (_homeScore > _awayScore) {\\n            return HeadToHeadHome;\\n        } else if (_homeScore < _awayScore) {\\n            return HeadToHeadAway;\\n        } else {\\n            return NoContest;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x346dc9bac853e2bc83423be3630794392c1fe60c8a97dd5ea01cdd1cd3416a8a\",\"license\":\"MIT\"},\"contracts/libraries/HasSpreadMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./Sport.sol\\\";\\nimport \\\"./CalculateLinesToBPoolOdds.sol\\\";\\nimport \\\"./TokenNamesFromTeams.sol\\\";\\n\\nabstract contract HasSpreadMarket is AbstractMarketFactoryV3, Sport, CalculateLinesToBPoolOdds, TokenNamesFromTeams {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 private spreadMarketType;\\n    string private noContestName;\\n\\n    uint256 constant SpreadAway = 1;\\n    uint256 constant SpreadHome = 2;\\n\\n    constructor(uint256 _marketType, string memory _noContestName) {\\n        spreadMarketType = _marketType;\\n        noContestName = _noContestName;\\n    }\\n\\n    function makeSpreadMarket(string memory _homeTeamName, string memory _awayTeamName) internal returns (uint256) {\\n        return makeSportsMarket(noContestName, _homeTeamName, _awayTeamName, evenOdds(true, 2));\\n    }\\n\\n    function resolveSpreadMarket(\\n        uint256 _marketId,\\n        int256 _line,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal {\\n        uint256 _shareTokenIndex = calcSpreadWinner(_homeScore, _awayScore, _line);\\n        endMarket(_marketId, _shareTokenIndex);\\n    }\\n\\n    function calcSpreadWinner(\\n        uint256 _homeScore,\\n        uint256 _awayScore,\\n        int256 _targetSpread\\n    ) internal pure returns (uint256) {\\n        int256 _adjustedHomeScore = int256(_homeScore) + int256(_targetSpread);\\n\\n        if (_adjustedHomeScore > int256(_awayScore)) {\\n            return SpreadHome; // home spread greater\\n        } else if (_adjustedHomeScore < int256(_awayScore)) {\\n            return SpreadAway; // away spread lesser\\n        } else {\\n            // draw / tie; some sports eliminate this with half-points\\n            return NoContest;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefc9fa6aaf8b8c4fe1340407d87b925da336a56a5f82266bc0f6a5048db228b4\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd4f708218be4eb92ec676cde580e2579a03dafd2ca8436b70a25e8331c3f0218\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace284dc2ca2afd8e6e1b16f2c3abb9af28ae70b627c3557722e4618c65ef8d9\",\"license\":\"MIT\"},\"contracts/libraries/LineHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract LineHelper {\\n    function build1Line() internal pure returns (int256[] memory _lines) {\\n        _lines = new int256[](1);\\n    }\\n\\n    function build3Lines(int256 _homeSpread, int256 _totalScore) internal pure returns (int256[] memory _lines) {\\n        _lines = new int256[](3);\\n        // 0 is the Head-to-Head market, which has no lines\\n        _lines[1] = addHalfPoint(_homeSpread);\\n        _lines[2] = addHalfPoint(_totalScore);\\n    }\\n\\n    function addHalfPoint(int256 _line) internal pure returns (int256) {\\n        // The line is a quantity of tenths. So 55 is 5.5 and -6 is -60.\\n        // If the line is a whole number then make it a half point more extreme, to eliminate ties.\\n        // So 50 becomes 55, -60 becomes -65, and 0 becomes 5.\\n        if (_line >= 0 && _line % 10 == 0) {\\n            return _line + 5;\\n        } else if (_line < 0 && (-_line) % 10 == 0) {\\n            return _line - 5;\\n        } else {\\n            return _line;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0583acadf161062c4288894dfee8467c59b0707294fa8d5c60afe514307af6e0\",\"license\":\"MIT\"},\"contracts/libraries/ManagedByLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract ManagedByLink is Ownable {\\n    event LinkNodeChanged(address newLinkNode);\\n\\n    address public linkNode;\\n\\n    constructor(address _linkNode) {\\n        linkNode = _linkNode;\\n    }\\n\\n    function setLinkNode(address _newLinkNode) external onlyOwner {\\n        linkNode = _newLinkNode;\\n        emit LinkNodeChanged(_newLinkNode);\\n    }\\n\\n    modifier onlyLinkNode() {\\n        require(msg.sender == linkNode);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe516ecae468b9d0e4fb33cb39c16efbadfeab94d34240fdf095bf1b4eab01706\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x26c297226aeb6ad5e522fe97f9d68cc4474b2560bf22c8cd124c93442d339a4c\",\"license\":\"MIT\"},\"contracts/libraries/ResolveByFiat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Sport.sol\\\";\\nimport \\\"./ManagedByLink.sol\\\";\\n\\nabstract contract ResolvesByFiat is Sport, ManagedByLink {\\n    function resolveEvent(\\n        uint256 _eventId,\\n        SportsEventStatus _eventStatus,\\n        uint256 _homeTeamId, // for verifying team stability\\n        uint256 _awayTeamId, // for verifying team stability\\n        uint256 _whoWon\\n    ) public onlyLinkNode {\\n        SportsEvent storage _event = sportsEvents[_eventId];\\n\\n        require(_event.status == SportsEventStatus.Scheduled);\\n        require(SportsEventStatus(_eventStatus) != SportsEventStatus.Scheduled);\\n\\n        if (eventIsNoContest(_event, _eventStatus, _homeTeamId, _awayTeamId, _whoWon)) {\\n            resolveInvalidEvent(_eventId);\\n        } else {\\n            resolveValidEvent(_event, _whoWon);\\n        }\\n\\n        sportsEvents[_eventId].status = _eventStatus;\\n    }\\n\\n    function resolveValidEvent(SportsEvent memory _event, uint256 _whoWon) internal virtual;\\n}\\n\",\"keccak256\":\"0x075c69846d7fce1a51625164c40a70fb3058cd7f403694a96b22f483423256a2\",\"license\":\"MIT\"},\"contracts/libraries/ResolveByScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Sport.sol\\\";\\nimport \\\"./ManagedByLink.sol\\\";\\n\\nabstract contract ResolvesByScore is Sport, ManagedByLink {\\n    function resolveEvent(\\n        uint256 _eventId,\\n        SportsEventStatus _eventStatus,\\n        uint256 _homeTeamId, // for verifying team stability\\n        uint256 _awayTeamId, // for verifying team stability\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) public onlyLinkNode {\\n        SportsEvent storage _event = sportsEvents[_eventId];\\n\\n        require(_event.status == SportsEventStatus.Scheduled);\\n        require(uint8(_eventStatus) >= uint8(SportsEventStatus.Final));\\n\\n        if (eventIsNoContest(_event, _eventStatus, _homeTeamId, _awayTeamId, WhoWonUnknown)) {\\n            resolveInvalidEvent(_eventId);\\n        } else {\\n            resolveValidEvent(_event, _homeScore, _awayScore);\\n        }\\n\\n        _event.status = _eventStatus;\\n        _event.homeScore = _homeScore;\\n        _event.awayScore = _awayScore;\\n    }\\n\\n    function resolveValidEvent(\\n        SportsEvent memory _event,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x92f825bd5cf13184154e1b42493095ab0c621b093162aa92b9589075862d10a5\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract Rewardable {\\n    // Rewards will be paid out over the lifetime of an event.\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\n\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb5296c464967afdf84ea175e46345f8e291c0e621299cb0f6ecfed9e9585add\",\"license\":\"MIT\"},\"contracts/libraries/Sport.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./LineHelper.sol\\\";\\n\\nabstract contract Sport is AbstractMarketFactoryV3, LineHelper {\\n    event SportsEventCreated(\\n        uint256 id,\\n        uint256[] markets,\\n        int256[] lines,\\n        uint256 homeTeamId,\\n        uint256 awayTeamId,\\n        string homeTeamName,\\n        string awayTeamName,\\n        uint256 estimatedStartTime\\n    );\\n\\n    enum SportsEventStatus {Unknown, Scheduled, Final, Postponed, Canceled}\\n    struct SportsEvent {\\n        SportsEventStatus status;\\n        uint256[] markets;\\n        int256[] lines;\\n        uint256 estimatedStartTime;\\n        uint256 homeTeamId;\\n        uint256 awayTeamId;\\n        string homeTeamName;\\n        string awayTeamName;\\n        uint256 homeScore;\\n        uint256 awayScore;\\n    }\\n    // EventId => EventDetails\\n    mapping(uint256 => SportsEvent) public sportsEvents;\\n    uint256[] public listOfSportsEvents;\\n    mapping(uint256 => uint256) public marketIdToEventIdMapping;\\n    uint256 constant NoContest = 0;\\n\\n    function eventCount() public view returns (uint256) {\\n        return listOfSportsEvents.length;\\n    }\\n\\n    function getSportsEvent(uint256 _eventId) public view returns (SportsEvent memory) {\\n        return sportsEvents[_eventId];\\n    }\\n\\n    function getSportsEventByIndex(uint256 _index) public view returns (SportsEvent memory _event, uint256 _eventId) {\\n        _eventId = listOfSportsEvents[_index];\\n        _event = getSportsEvent(_eventId);\\n    }\\n\\n    function makeSportsEvent(\\n        uint256 _eventId,\\n        uint256[] memory _markets,\\n        int256[] memory _lines,\\n        uint256 _estimatedStartTime,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) internal {\\n        // Cannot create markets for an event twice.\\n        require(sportsEvents[_eventId].status == SportsEventStatus.Unknown, \\\"event exists\\\");\\n\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            marketIdToEventIdMapping[_markets[i]] = _eventId;\\n        }\\n\\n        listOfSportsEvents.push(_eventId);\\n        sportsEvents[_eventId].status = SportsEventStatus.Scheduled; // new events must be Scheduled\\n        sportsEvents[_eventId].markets = _markets;\\n        sportsEvents[_eventId].lines = _lines;\\n        sportsEvents[_eventId].estimatedStartTime = _estimatedStartTime;\\n        sportsEvents[_eventId].homeTeamId = _homeTeamId;\\n        sportsEvents[_eventId].awayTeamId = _awayTeamId;\\n        sportsEvents[_eventId].homeTeamName = _homeTeamName;\\n        sportsEvents[_eventId].awayTeamName = _awayTeamName;\\n        // homeScore and awayScore default to zero, which is correct for new events\\n\\n        emit SportsEventCreated(\\n            _eventId,\\n            _markets,\\n            _lines,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _homeTeamName,\\n            _awayTeamName,\\n            _estimatedStartTime\\n        );\\n    }\\n\\n    uint256 constant WhoWonUnknown = 0;\\n    uint256 constant WhoWonHome = 1;\\n    uint256 constant WhoWonAway = 2;\\n    uint256 constant WhoWonDraw = 3;\\n\\n    function eventIsNoContest(\\n        SportsEvent memory _event,\\n        SportsEventStatus _eventStatus,\\n        uint256 _homeTeamId,\\n        uint256 _awayTeamId,\\n        uint256 _whoWon // pass in WhoWonUnknown if using a scoring sport\\n    ) internal pure returns (bool) {\\n        bool _draw = _whoWon == WhoWonDraw;\\n        bool _notFinal = _eventStatus != SportsEventStatus.Final;\\n        bool _unstableHomeTeamId = _event.homeTeamId != _homeTeamId;\\n        bool _unstableAwayTeamId = _event.awayTeamId != _awayTeamId;\\n        return _draw || _notFinal || _unstableHomeTeamId || _unstableAwayTeamId;\\n    }\\n\\n    function resolveInvalidEvent(uint256 _eventId) internal {\\n        uint256[] memory _marketIds = sportsEvents[_eventId].markets;\\n        for (uint256 i = 0; i < _marketIds.length; i++) {\\n            uint256 _marketId = _marketIds[i];\\n            if (_marketId == 0) continue; // skip non-created markets\\n            endMarket(_marketId, NoContest);\\n        }\\n    }\\n\\n    // TODO is this needed? getSportsEvent should do the same\\n    function getEventMarkets(uint256 _eventId) public view returns (uint256[] memory _markets) {\\n        uint256[] storage _original = sportsEvents[_eventId].markets;\\n        uint256 _len = _original.length;\\n        _markets = new uint256[](_len);\\n        for (uint256 i = 0; i < _len; i++) {\\n            _markets[i] = _original[i];\\n        }\\n    }\\n\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\n        uint256 _eventId = marketIdToEventIdMapping[_marketId];\\n        return getSportsEvent(_eventId).estimatedStartTime;\\n    }\\n}\\n\\n// TODO change this to work with the Fetcher contracts and use it there, since it's offchain-read-only.\\nabstract contract SportView is Sport {\\n    // Only usable off-chain. Gas cost can easily eclipse block limit.\\n    // Lists all events that could be resolved with a call to resolveEvent.\\n    // Not all will be resolvable because this does not ensure the game ended.\\n    function listResolvableEvents() external view returns (uint256[] memory) {\\n        uint256 _totalResolvable = countResolvableEvents();\\n        uint256[] memory _resolvableEvents = new uint256[](_totalResolvable);\\n\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < listOfSportsEvents.length; i++) {\\n            if (n > _totalResolvable) break;\\n            uint256 _eventId = listOfSportsEvents[i];\\n            if (isEventResolvable(_eventId)) {\\n                _resolvableEvents[n] = _eventId;\\n                n++;\\n            }\\n        }\\n\\n        return _resolvableEvents;\\n    }\\n\\n    function countResolvableEvents() internal view returns (uint256) {\\n        uint256 _totalResolvable = 0;\\n        for (uint256 i = 0; i < listOfSportsEvents.length; i++) {\\n            uint256 _eventId = listOfSportsEvents[i];\\n            if (isEventResolvable(_eventId)) {\\n                _totalResolvable++;\\n            }\\n        }\\n        return _totalResolvable;\\n    }\\n\\n    // Returns true if a call to resolveEvent is potentially useful.\\n    function isEventResolvable(uint256 _eventId) internal view returns (bool) {\\n        uint256[] memory _markets = getEventMarkets(_eventId);\\n\\n        bool _unresolved = false; // default because non-existing markets aren't resolvable\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            uint256 _marketId = _markets[i];\\n            if (_marketId != 0 && !isMarketResolved(_marketId)) {\\n                _unresolved = true;\\n                break;\\n            }\\n        }\\n\\n        return _unresolved;\\n    }\\n}\\n\",\"keccak256\":\"0x735d5f011f8fcbe19ca579d666100b5d7b5da5f9019dbaff6e7adee1b0314936\",\"license\":\"MIT\"},\"contracts/libraries/TokenNamesFromTeams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Sport.sol\\\";\\n\\nabstract contract TokenNamesFromTeams is Sport {\\n    uint256 constant Away = 1;\\n    uint256 constant Home = 2;\\n\\n    function makeSportsMarket(\\n        string memory _noContestName,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName,\\n        uint256[] memory _odds\\n    ) internal returns (uint256) {\\n        string[] memory _outcomeNames = makeOutcomeNames(_noContestName, _homeTeamName, _awayTeamName);\\n        return startMarket(msg.sender, _outcomeNames, _odds, true);\\n    }\\n\\n    function makeOutcomeNames(\\n        string memory _noContestName,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) private pure returns (string[] memory _names) {\\n        _names = new string[](3);\\n        _names[NoContest] = _noContestName;\\n        _names[Away] = _awayTeamName;\\n        _names[Home] = _homeTeamName;\\n    }\\n}\\n\",\"keccak256\":\"0x1cf3c3dff384eed0aefb4e14aeef44e66641725fd8aaed1859a315d08d09ba17\",\"license\":\"MIT\"},\"contracts/libraries/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract Versioned {\\n    string internal version;\\n\\n    constructor(string memory _version) {\\n        version = _version;\\n    }\\n\\n    function getVersion() public view returns (string memory) {\\n        return version;\\n    }\\n}\\n\",\"keccak256\":\"0xea7089752f1a6e834ae7428c709749b2088ebedcebb5c4427945fc6d8131950b\",\"license\":\"MIT\"},\"contracts/rewards/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\" as OpenZeppelinOwnable;\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\nimport \\\"../turbo/AMMFactory.sol\\\";\\n\\n// MasterChef is the master of Reward. He can make Reward and he is a fair guy.\\ncontract MasterChef is OpenZeppelinOwnable.Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BONE = 10**18;\\n\\n    // The percentage of the rewards period that early deposit bonus will payout.\\n    // e.g. Early deposit bonus hits if LP is done in the first x percent of the period.\\n    uint256 public constant EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE = BONE / 10; // 10% of reward period.\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 lastActionTimestamp; // Timestamp of the withdrawal or deposit from this user.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of REWARDs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardsPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each user that deposits LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 accRewardsPerShare; // Accumulated REWARDs per share, times BONE. See below.\\n        uint256 totalEarlyDepositBonusRewardShares; // The total number of share currently qualifying bonus REWARDs.\\n        uint256 beginTimestamp; // The timestamp to begin calculating rewards at.\\n        uint256 endTimestamp; // Timestamp of the end of the rewards period.\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs to distribute to early depositors.\\n        uint256 lastRewardTimestamp; // Last timestamp REWARDs distribution occurred.\\n        uint256 rewardsPerSecond; // Number of rewards paid out per second.\\n    }\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // This is a snapshot of the current state of a market.\\n    struct PoolStatusInfo {\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        uint256 earlyDepositEndTimestamp;\\n        uint256 totalRewardsAccrued;\\n        bool created;\\n    }\\n\\n    struct PendingRewardInfo {\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        uint256 earlyDepositEndTimestamp;\\n        uint256 accruedStandardRewards;\\n        uint256 accruedEarlyDepositBonusRewards;\\n        uint256 pendingEarlyDepositBonusRewards;\\n        bool created;\\n    }\\n\\n    struct MarketFactoryInfo {\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs per day to distribute to early depositors.\\n        uint256 rewardsPeriods; // Number of days the rewards for this pool will payout.\\n        uint256 rewardsPerPeriod; // Amount of rewards to be given out for a given period.\\n    }\\n    mapping(address => MarketFactoryInfo) marketFactoryRewardInfo;\\n\\n    struct RewardPoolLookupInfo {\\n        uint256 pid;\\n        bool created;\\n    }\\n\\n    // AMMFactory => MarketFactory => MarketId\\n    mapping(address => mapping(address => mapping(uint256 => RewardPoolLookupInfo))) public rewardPoolLookup;\\n\\n    // The REWARD TOKEN!\\n    IERC20 private rewardsToken;\\n\\n    mapping(address => bool) private approvedAMMFactories;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address recipient);\\n    event TrustMarketFactory(\\n        address indexed MarketFactory,\\n        uint256 OriginEarlyDepositBonusRewards,\\n        uint256 OriginrewardsPeriods,\\n        uint256 OriginRewardsPerPeriod,\\n        uint256 EarlyDepositBonusRewards,\\n        uint256 rewardsPeriods,\\n        uint256 RewardsPerPeriod\\n    );\\n\\n    event PoolCreated(\\n        address indexed ammFactory,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address creator,\\n        address lpTokenRecipient\\n    );\\n    event LiquidityChanged(\\n        address indexed ammFactory,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address user,\\n        address recipient,\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\n        int256 collateral,\\n        int256 lpTokens,\\n        uint256[] sharesReturned\\n    );\\n\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(IERC20 _rewardsToken) {\\n        rewardsToken = _rewardsToken;\\n    }\\n\\n    function trustAMMFactory(address _ammFactory) public onlyOwner {\\n        approvedAMMFactories[_ammFactory] = true;\\n    }\\n\\n    function untrustAMMFactory(address _ammFactory) public onlyOwner {\\n        delete approvedAMMFactories[_ammFactory];\\n    }\\n\\n    // This method can also be used to update rewards\\n    function addRewards(\\n        address _marketFactory,\\n        uint256 _rewardsPerMarket,\\n        uint256 _rewardDaysPerMarket,\\n        uint256 _earlyDepositBonusRewards\\n    ) public onlyOwner {\\n        MarketFactoryInfo memory _oldMarketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\n\\n        marketFactoryRewardInfo[_marketFactory] = MarketFactoryInfo({\\n            rewardsPeriods: _rewardDaysPerMarket,\\n            rewardsPerPeriod: _rewardsPerMarket,\\n            earlyDepositBonusRewards: _earlyDepositBonusRewards\\n        });\\n\\n        emit TrustMarketFactory(\\n            _marketFactory,\\n            _oldMarketFactoryInfo.earlyDepositBonusRewards,\\n            _oldMarketFactoryInfo.rewardsPeriods,\\n            _oldMarketFactoryInfo.rewardsPerPeriod,\\n            _earlyDepositBonusRewards,\\n            _rewardDaysPerMarket,\\n            _rewardsPerMarket\\n        );\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    // An _endTimestamp of zero means the rewards start immediately.\\n    function add(\\n        address _ammFactory,\\n        address _marketFactory,\\n        uint256 _marketId,\\n        IERC20 _lpToken,\\n        uint256 _endTimestamp\\n    ) public onlyOwner returns (uint256 _nextPID) {\\n        return addInternal(_ammFactory, _marketFactory, _marketId, _lpToken, _endTimestamp);\\n    }\\n\\n    function addInternal(\\n        address _ammFactory,\\n        address _marketFactory,\\n        uint256 _marketId,\\n        IERC20 _lpToken,\\n        uint256 _endTimestamp\\n    ) internal returns (uint256 _nextPID) {\\n        require(\\n            !rewardPoolLookup[_ammFactory][_marketFactory][_marketId].created,\\n            \\\"Reward pool has already been created.\\\"\\n        );\\n\\n        require(approvedAMMFactories[address(_ammFactory)], \\\"AMMFactory must be approved to create pool\\\");\\n\\n        _nextPID = poolInfo.length;\\n\\n        rewardPoolLookup[_ammFactory][_marketFactory][_marketId] = RewardPoolLookupInfo({pid: _nextPID, created: true});\\n\\n        MarketFactoryInfo memory _marketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\n\\n        // Need to figure out the beginning/end of the reward period.\\n        uint256 _rewardsPeriodsInSeconds = _marketFactoryInfo.rewardsPeriods * 1 days;\\n        uint256 _beginTimestamp = block.timestamp;\\n\\n        // Add one hour buffer for LPs to withdraw before event start.\\n        if (_endTimestamp != 0) {\\n            _endTimestamp = _endTimestamp - 1 hours;\\n        }\\n\\n        if (_endTimestamp == 0) {\\n            _endTimestamp = _beginTimestamp + _rewardsPeriodsInSeconds;\\n        } else if ((_endTimestamp - _rewardsPeriodsInSeconds) > block.timestamp) {\\n            _beginTimestamp = _endTimestamp - _rewardsPeriodsInSeconds;\\n        } else if (block.timestamp >= _endTimestamp) {\\n            // reward period already over.\\n            _beginTimestamp = _endTimestamp;\\n        }\\n        poolInfo.push(\\n            PoolInfo({\\n                accRewardsPerShare: 0,\\n                beginTimestamp: _beginTimestamp,\\n                endTimestamp: _endTimestamp,\\n                totalEarlyDepositBonusRewardShares: 0,\\n                earlyDepositBonusRewards: (_marketFactoryInfo.earlyDepositBonusRewards / 1 days) *\\n                    (_endTimestamp - _beginTimestamp),\\n                lpToken: _lpToken,\\n                rewardsPerSecond: (_marketFactoryInfo.rewardsPerPeriod / 1 days),\\n                lastRewardTimestamp: _beginTimestamp\\n            })\\n        );\\n    }\\n\\n    // Return number of seconds elapsed in terms of BONEs.\\n    function getTimeElapsed(uint256 _pid) public view returns (uint256) {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        uint256 _fromTimestamp = block.timestamp;\\n\\n        if (\\n            // Rewards have not started yet.\\n            _pool.beginTimestamp > _fromTimestamp ||\\n            // Not sure how this happens but it is accounted for in the original master chef contract.\\n            _pool.lastRewardTimestamp > _fromTimestamp ||\\n            // No rewards to be distributed\\n            _pool.rewardsPerSecond == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        // Rewards are over for this pool. No more rewards have accrued.\\n        if (_pool.lastRewardTimestamp >= _pool.endTimestamp) {\\n            return 0;\\n        }\\n\\n        return min(_fromTimestamp, _pool.endTimestamp).sub(_pool.lastRewardTimestamp).add(1).mul(BONE);\\n        // return (min(_fromTimestamp, _pool.endTimestamp) - _pool.lastRewardTimestamp + 1) * BONE;\\n    }\\n\\n    function getPoolTokenBalance(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _user\\n    ) external view returns (uint256) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        if (_rewardPoolLookupInfo.created) {\\n            return userInfo[_rewardPoolLookupInfo.pid][_user].amount;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getUserAmount(uint256 _pid, address _user) external view returns (uint256) {\\n        return userInfo[_pid][_user].amount;\\n    }\\n\\n    function getPoolRewardEndTimestamp(uint256 _pid) public view returns (uint256) {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        return _pool.endTimestamp;\\n    }\\n\\n    function getEarlyDepositEndTimestamp(uint256 _pid) public view returns (uint256) {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\n\\n        return ((_duration * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\n    }\\n\\n    function getPoolLPTokenTotalSupply(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId\\n    ) public view returns (uint256) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken.totalSupply();\\n    }\\n\\n    function getPoolLPToken(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId\\n    ) public view returns (IERC20) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken;\\n    }\\n\\n    function getPoolInfo(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId\\n    ) public view returns (PoolStatusInfo memory _poolStatusInfo) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        // This cannot revert as it will be used in a multicall.\\n        if (_rewardPoolLookupInfo.created) {\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\n\\n            _poolStatusInfo.beginTimestamp = _pool.beginTimestamp;\\n            _poolStatusInfo.endTimestamp = _pool.endTimestamp;\\n            _poolStatusInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\n\\n            _poolStatusInfo.totalRewardsAccrued =\\n                (min(block.timestamp, _pool.endTimestamp) - _pool.beginTimestamp) *\\n                _pool.rewardsPerSecond;\\n            _poolStatusInfo.created = true;\\n        }\\n    }\\n\\n    // View function to see pending REWARDs on frontend.\\n    function getUserPendingRewardInfo(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _userAddress\\n    ) external view returns (PendingRewardInfo memory _pendingRewardInfo) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        if (_rewardPoolLookupInfo.created) {\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\n            UserInfo storage _user = userInfo[_rewardPoolLookupInfo.pid][_userAddress];\\n            uint256 accRewardsPerShare = _pool.accRewardsPerShare;\\n            uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\\n\\n            uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\n\\n            _pendingRewardInfo.created = true;\\n            _pendingRewardInfo.beginTimestamp = _pool.beginTimestamp;\\n            _pendingRewardInfo.endTimestamp = _pool.endTimestamp;\\n            _pendingRewardInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\n\\n            if (_user.lastActionTimestamp <= _pendingRewardInfo.earlyDepositEndTimestamp) {\\n                if (_pool.totalEarlyDepositBonusRewardShares > 0 && block.timestamp > _pendingRewardInfo.endTimestamp) {\\n                    _pendingRewardInfo.accruedEarlyDepositBonusRewards = _pool\\n                        .earlyDepositBonusRewards\\n                        .mul(_user.amount)\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\n                } else if (_pool.totalEarlyDepositBonusRewardShares > 0) {\\n                    _pendingRewardInfo.pendingEarlyDepositBonusRewards = _pool\\n                        .earlyDepositBonusRewards\\n                        .mul(_user.amount)\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\n                }\\n            }\\n\\n            if (block.timestamp > _pool.lastRewardTimestamp && lpSupply != 0) {\\n                uint256 multiplier = getTimeElapsed(_rewardPoolLookupInfo.pid);\\n                accRewardsPerShare = accRewardsPerShare.add(multiplier.mul(_pool.rewardsPerSecond).div(lpSupply));\\n            }\\n\\n            _pendingRewardInfo.accruedStandardRewards = _user.amount.mul(accRewardsPerShare).div(BONE).sub(\\n                _user.rewardDebt\\n            );\\n        }\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getTimeElapsed(_pid);\\n        pool.accRewardsPerShare = pool.accRewardsPerShare.add(multiplier.mul(pool.rewardsPerSecond).div(lpSupply));\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for REWARD allocation.\\n    // Assumes the staked tokens are already on contract.\\n    function depositInternal(\\n        address _userAddress,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) internal {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\n\\n        updatePool(_pid);\\n\\n        if (_user.amount > 0) {\\n            uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\n            safeRewardsTransfer(_userAddress, pending);\\n        }\\n\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\n\\n        // If the user was an early deposit, remove user amount from the pool.\\n        // Even if the pools reward period has elapsed. They must withdraw first.\\n        if (\\n            block.timestamp > _bonusrewardsPeriodsEndTimestamp &&\\n            _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\n        ) {\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\n        }\\n\\n        // Still in the early deposit bonus period.\\n        if (_bonusrewardsPeriodsEndTimestamp > block.timestamp) {\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.add(_amount);\\n        }\\n\\n        _user.amount = _user.amount.add(_amount);\\n\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\n        _user.lastActionTimestamp = block.timestamp;\\n        emit Deposit(_userAddress, _pid, _amount);\\n    }\\n\\n    function depositByMarket(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _amount\\n    ) public {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\n\\n        deposit(_rewardPoolLookupInfo.pid, _amount);\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        depositInternal(msg.sender, _pid, _amount);\\n        poolInfo[_pid].lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    // Assumes caller is handling distribution of LP tokens.\\n    function withdrawInternal(\\n        address _userAddress,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _tokenRecipientAddress\\n    ) internal {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\n        require(_user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\n        uint256 _rewardPeriodEndTimestamp = _rewardsPeriodsInSeconds + _pool.beginTimestamp + 1;\\n\\n        if (_rewardPeriodEndTimestamp <= block.timestamp) {\\n            if (\\n                _pool.totalEarlyDepositBonusRewardShares > 0 &&\\n                _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\n            ) {\\n                uint256 _rewardsToUser =\\n                    _pool.earlyDepositBonusRewards.mul(_user.amount).div(_pool.totalEarlyDepositBonusRewardShares);\\n                safeRewardsTransfer(_userAddress, _rewardsToUser);\\n            }\\n        } else if (_bonusrewardsPeriodsEndTimestamp >= block.timestamp) {\\n            // Still in the early deposit bonus period.\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_amount);\\n        } else if (\\n            // If the user was an early deposit, remove user amount from the pool.\\n            _bonusrewardsPeriodsEndTimestamp >= _user.lastActionTimestamp\\n        ) {\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\n        }\\n\\n        uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\n\\n        safeRewardsTransfer(_tokenRecipientAddress, pending);\\n        _user.amount = _user.amount.sub(_amount);\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\n        _user.lastActionTimestamp = block.timestamp;\\n\\n        emit Withdraw(msg.sender, _pid, _amount, _tokenRecipientAddress);\\n    }\\n\\n    function withdrawByMarket(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _amount\\n    ) public {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\n\\n        withdraw(_rewardPoolLookupInfo.pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        withdrawInternal(msg.sender, _pid, _amount, msg.sender);\\n        poolInfo[_pid].lpToken.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function createPool(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _initialLiquidity,\\n        address _lpTokenRecipient\\n    ) public returns (uint256) {\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _initialLiquidity);\\n        _marketFactory.collateral().approve(address(_ammFactory), _initialLiquidity);\\n\\n        uint256 _lpTokensIn = _ammFactory.createPool(_marketFactory, _marketId, _initialLiquidity, address(this));\\n        IERC20 _lpToken = IERC20(address(_ammFactory.getPool(_marketFactory, _marketId)));\\n\\n        uint256 _nextPID =\\n            addInternal(\\n                address(_ammFactory),\\n                address(_marketFactory),\\n                _marketId,\\n                _lpToken,\\n                _marketFactory.getRewardEndTime(_marketId)\\n            );\\n\\n        depositInternal(_lpTokenRecipient, _nextPID, _lpTokensIn);\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _balances[i] = 0;\\n        }\\n\\n        emit PoolCreated(address(_ammFactory), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\n        emit LiquidityChanged(\\n            address(_ammFactory),\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_initialLiquidity),\\n            int256(_lpTokensIn),\\n            _balances\\n        );\\n\\n        return _lpTokensIn;\\n    }\\n\\n    function addLiquidity(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _collateralIn,\\n        uint256 _minLPTokensOut,\\n        address _lpTokenRecipient\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        uint256 _pid = _rewardPoolLookupInfo.pid;\\n\\n        // If not created should attempt to create it.\\n        if (!_rewardPoolLookupInfo.created) {\\n            BPool _bPool = _ammFactory.getPool(_marketFactory, _marketId);\\n            require(_bPool != BPool(address(0)), \\\"Pool not created.\\\");\\n\\n            _pid = addInternal(\\n                address(_ammFactory),\\n                address(_marketFactory),\\n                _marketId,\\n                IERC20(address(_bPool)),\\n                _marketFactory.getRewardEndTime(_marketId)\\n            );\\n        }\\n\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _collateralIn);\\n        _marketFactory.collateral().approve(address(_ammFactory), _collateralIn);\\n\\n        (_poolAmountOut, _balances) = _ammFactory.addLiquidity(\\n            _marketFactory,\\n            _marketId,\\n            _collateralIn,\\n            _minLPTokensOut,\\n            address(this)\\n        );\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        for (uint256 i = 0; i < _balances.length; i++) {\\n            if (_balances[i] > 0) {\\n                _market.shareTokens[i].transfer(_lpTokenRecipient, _balances[i]);\\n            }\\n        }\\n\\n        depositInternal(_lpTokenRecipient, _pid, _poolAmountOut);\\n\\n        emit LiquidityChanged(\\n            address(_ammFactory),\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_collateralIn),\\n            int256(_poolAmountOut),\\n            _balances\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _lpTokensIn,\\n        uint256 _minCollateralOut,\\n        address _collateralRecipient\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\n\\n        withdrawInternal(msg.sender, _rewardPoolLookupInfo.pid, _lpTokensIn, _collateralRecipient);\\n\\n        PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\n\\n        _pool.lpToken.approve(address(_ammFactory), _lpTokensIn);\\n\\n        (_collateralOut, _balances) = _ammFactory.removeLiquidity(\\n            _marketFactory,\\n            _marketId,\\n            _lpTokensIn,\\n            _minCollateralOut,\\n            _collateralRecipient\\n        );\\n\\n        emit LiquidityChanged(\\n            address(_ammFactory),\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _collateralRecipient,\\n            int256(_collateralOut),\\n            -int256(_lpTokensIn),\\n            _balances\\n        );\\n    }\\n\\n    function withdrawRewards(uint256 _amount) external onlyOwner {\\n        rewardsToken.transfer(msg.sender, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.lastActionTimestamp = 0;\\n    }\\n\\n    function safeRewardsTransfer(address _to, uint256 _amount) internal {\\n        uint256 _rewardsBal = rewardsToken.balanceOf(address(this));\\n        if (_amount > _rewardsBal) {\\n            rewardsToken.transfer(_to, _rewardsBal);\\n        } else {\\n            rewardsToken.transfer(_to, _amount);\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2a5a90dbee8b27054d4684d2f9be9fcac24f1d35b0524edf16f98544b6d9d47\",\"license\":\"MIT\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../balancer/BFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"../balancer/BNum.sol\\\";\\nimport \\\"../bonds/Ibondingcurve.sol\\\"; \\n\\ncontract AMMFactory is BNum {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\n\\n    BFactory public bFactory;\\n    // MarketFactory => Market => BPool\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\n    uint256 fee;\\n\\n    event PoolCreated(\\n        address pool,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed creator,\\n        address lpTokenRecipient\\n    );\\n    event LiquidityChanged(\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed user,\\n        address recipient,\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\n        int256 collateral,\\n        int256 lpTokens,\\n        uint256[] sharesReturned\\n    );\\n    event SharesSwapped(\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed user,\\n        uint256 outcome,\\n        // from the perspective of the user. e.g. collateral is negative when buying\\n        int256 collateral,\\n        int256 shares,\\n        uint256 price\\n    );\\n\\n    constructor(BFactory _bFactory, uint256 _fee) {\\n        bFactory = _bFactory;\\n        fee = _fee;\\n    }\\n\\n    function createPool(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _initialLiquidity,\\n        address _lpTokenRecipient\\n    ) public returns (uint256) {\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\n\\n        // Comparing to sets because sets are normalized to 10e18.\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\n\\n        //  Turn collateral into shares\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        require(\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\n        );\\n\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\n\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        // Create pool\\n        BPool _pool = bFactory.newBPool();\\n\\n        // Add each outcome to the pool. Collateral is NOT added.\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            _token.approve(address(_pool), MAX_UINT);\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\n        }\\n\\n        // Set the swap fee.\\n        _pool.setSwapFee(fee);\\n\\n        // Finalize pool setup\\n        _pool.finalize();\\n\\n        pools[address(_marketFactory)][_marketId] = _pool;\\n\\n        // Pass along LP tokens for initial liquidity\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\n\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\n        _pool.transfer(address(0x0), (BONE / 1000));\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\n\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _balances[i] = 0;\\n        }\\n\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_initialLiquidity),\\n            int256(_lpTokenBalance),\\n            _balances\\n        );\\n\\n        return _lpTokenBalance;\\n    }\\n\\n    function addLiquidity(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _collateralIn,\\n        uint256 _minLPTokensOut,\\n        address _lpTokenRecipient\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        //  Turn collateral into shares\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        // Find poolAmountOut\\n        _poolAmountOut = MAX_UINT;\\n\\n        {\\n            uint256 _totalSupply = _pool.totalSupply();\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                _maxAmountsIn[i] = _sets;\\n\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\n\\n                // This is the result the following when solving for poolAmountOut:\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\n                uint256 _tokenPoolAmountOut =\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\n\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\n                    _poolAmountOut = _tokenPoolAmountOut;\\n                }\\n            }\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\n        }\\n\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\n\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\n\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\n        _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            _balances[i] = _token.balanceOf(address(this));\\n            if (_balances[i] > 0) {\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\n            }\\n        }\\n\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_collateralIn),\\n            int256(_poolAmountOut),\\n            _balances\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _lpTokensIn,\\n        uint256 _minCollateralOut,\\n        address _collateralRecipient\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\n\\n        uint256[] memory exitPoolEstimate;\\n        {\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\n        }\\n\\n        // Find the number of sets to sell.\\n        uint256 _setsToSell = MAX_UINT;\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\n        }\\n\\n        // Must be a multiple of share factor.\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\n\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\n        if (_resolved) {\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\n        } else {\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\n        }\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\n\\n        // Transfer the remaining shares back to _collateralRecipient.\\n        _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\n            if (_balances[i] > 0) {\\n                _token.transfer(_collateralRecipient, _balances[i]);\\n            }\\n        }\\n\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _collateralRecipient,\\n            int256(_collateralOut),\\n            -int256(_lpTokensIn),\\n            _balances\\n        );\\n    }\\n\\n\\n    function buyZCB(\\n        AbstractMarketFactoryV3 _marketFactory, \\n        address from, \\n        address bondingcurve, \\n        uint256 _marketId, \\n        uint256 _collateralIn\\n        ) external returns(uint256){\\n\\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(from, address(this), _collateralIn);\\n        _collateral.approve(bondingcurve, _collateralIn); \\n\\n        return IBondingCurve(bondingcurve).buy(address(_marketFactory), from, _collateralIn, _marketId);\\n    }\\n\\n    function sellZCB(\\n        AbstractMarketFactoryV3 _marketFactory, \\n        address from, \\n        address bondingcurve, \\n        uint256 _marketId, \\n        uint256 _zcb_amountIn\\n        ) external returns(uint256){\\n\\n        uint256 fee_deducted_collateral_out = IBondingCurve(bondingcurve).sell(\\n            address(_marketFactory),\\n            from, \\n            _zcb_amountIn, \\n             _marketId); \\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transfer(from, fee_deducted_collateral_out); \\n\\n        return fee_deducted_collateral_out; \\n    }\\n\\n\\n    function buy(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _outcome,\\n        uint256 _collateralIn,\\n        uint256 _minTokensOut\\n    ) external returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        uint256 _totalDesiredOutcome = _sets;\\n        {\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\n\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                if (i == _outcome) continue;\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                (uint256 _acquiredToken, ) =\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\n                _totalDesiredOutcome += _acquiredToken;\\n            }\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\n\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\n        }\\n\\n        emit SharesSwapped(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _outcome,\\n            -int256(_collateralIn),\\n            int256(_totalDesiredOutcome),\\n            bdiv(_sets, _totalDesiredOutcome)\\n        );\\n\\n        return _totalDesiredOutcome;\\n    }\\n\\n    function sellForCollateral(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _outcome,\\n        uint256[] memory _shareTokensIn,\\n        uint256 _minSetsOut\\n    ) external returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        uint256 _setsOut = MAX_UINT;\\n        uint256 _totalUndesiredTokensIn = 0;\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\n        }\\n\\n        {\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\n\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                if (i == _outcome) continue;\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                (uint256 tokenAmountOut, ) =\\n                    _pool.swapExactAmountIn(\\n                        address(_market.shareTokens[_outcome]),\\n                        _shareTokensIn[i],\\n                        address(_token),\\n                        0,\\n                        MAX_UINT\\n                    );\\n\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\n            }\\n\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\n        }\\n\\n        // Transfer undesired token balance back.\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            uint256 _balance = _token.balanceOf(address(this));\\n            if (_balance > 0) {\\n                _token.transfer(msg.sender, _balance);\\n            }\\n        }\\n\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\n        emit SharesSwapped(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _outcome,\\n            int256(_collateralOut),\\n            -int256(_totalUndesiredTokensIn),\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\n        );\\n\\n        return _collateralOut;\\n    }\\n\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\n    // So the first outcome is 10**18 and all others are higher or lower.\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        address _basisToken = address(_market.shareTokens[0]);\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\n        _ratios[0] = 10**18;\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\n            _ratios[i] = _price;\\n        }\\n        return _ratios;\\n    }\\n\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        address[] memory _tokens = _pool.getCurrentTokens();\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\n        }\\n        return _balances;\\n    }\\n\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        address[] memory _tokens = _pool.getCurrentTokens();\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\n        }\\n        return _weights;\\n    }\\n\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        return _pool.getSwapFee();\\n    }\\n\\n    function getPoolTokenBalance(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _user\\n    ) external view returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        return _pool.balanceOf(_user);\\n    }\\n\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\n        return pools[address(_marketFactory)][_marketId];\\n    }\\n}\\n\",\"keccak256\":\"0x1a997b0a568cb0ca711ae3b541f09269cc1b75b066aadce15324d6c423b9c309\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/Rewardable.sol\\\";\\nimport { LinearBondingCurve } from \\\"../bonds/LinearBondingCurve.sol\\\";\\n\\nabstract contract AbstractMarketFactoryV3 is ZCBFactory, TurboShareTokenFactory, Ownable, Rewardable {\\n    using SafeMath for uint256;\\n\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\n    event MarketActivated(uint256 id);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(\\n        uint256 id,\\n        address winningOutcome,\\n        uint256 winningIndex,\\n        string winningName,\\n        uint256 amount,\\n        uint256 settlementFee,\\n        uint256 payout,\\n        address indexed receiver\\n    );\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        OwnedERC20 winner;\\n        uint256 winnerIndex;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n        uint256 creationTimestamp;\\n        uint256 resolutionTimestamp; // when winner is declared\\n        uint256[] initialOdds;\\n        bool active; // false if not ready to use or if resolved\\n    }\\n\\n    Market[] internal markets;\\n    // ZCBMarket[] internal zcbmarkets; \\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\n    mapping(uint256 => bool ) inAssessment; \\n    mapping(uint256=> uint256) buy_thresholds;\\n\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees, // staker, settlement, protocol\\n        address _protocol\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _fees[0];\\n        settlementFee = _fees[1];\\n        protocolFee = _fees[2];\\n        protocol = _protocol;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\n        markets.push(makeEmptyMarket());\\n\\n        //FOR TESTING ONLY\\n        buy_thresholds[0] = MAX_UINT;\\n        buy_thresholds[1] = MAX_UINT; \\n        buy_thresholds[2] = MAX_UINT; \\n    }\\n        \\n\\n   // function quantityAvailable(uint256 marketId)\\n\\n    //Called by lendingpool when market is created i.e , and when loan is approved \\n    function handleAssessment(uint256 _marketId, bool startAssessing) \\n    external\\n    //onlyController\\n     {\\n        bool market_inAssessment = startAssessing? true : false; \\n        inAssessment[_marketId] = market_inAssessment; \\n    }\\n    function handleOnlyReputable(uint256 _marketId)\\n    external \\n    //onlyController\\n    {\\n\\n    }\\n    //Called by controller after assessment phase \\n    function set_buy_threshold(uint256 _marketId, uint256 threshold)\\n    external \\n    //onlyController\\n    {\\n        buy_thresholds[_marketId] = threshold;\\n    }\\n\\n    function get_buy_threshold(uint256 _marketId) external view returns(uint256){\\n        return buy_thresholds[_marketId]; \\n    }\\n    function isInAssessment(uint256 _marketId) external view returns(bool){\\n        return inAssessment[_marketId]; \\n    }\\n\\n    function onlyReputable(uint256 _marketId) external view returns(bool){\\n        return false;\\n    }\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\n\\n    }\\n\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\n        return TradeDetails[_marketId][_outcome]; \\n    }\\n\\n\\n\\n\\n    // Returns an empty struct if the market doesn't exist.\\n    // Can check market existence before calling this by comparing _id against markets.length.\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n            return makeEmptyMarket();\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length; //+ zcbmarkets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\n\\n        accumulatedProtocolFee += _protocolFee;\\n        collateral.transfer(_receiver, _payout);\\n        feePot.depositFees(_stakerFee);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee);\\n\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\n        collateral.transfer(_receiver, _payout);\\n\\n        uint256 _winningIndex = _market.winnerIndex;\\n        string memory _winningName = _market.winner.name();\\n\\n        emit WinningsClaimed(\\n            _id,\\n            address(_market.winner),\\n            _winningIndex,\\n            _winningName,\\n            _winningShares,\\n            _settlementFee,\\n            _payout,\\n            _receiver\\n        );\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        if (_fees > 0) {\\n            accumulatedSettlementFees[msg.sender] = 0;\\n            collateral.transfer(_receiver, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this));\\n        uint256 _fees = accumulatedProtocolFee;\\n        if (_fees > 0) {\\n            accumulatedProtocolFee = 0;\\n            collateral.transfer(protocol, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n    }\\n\\n\\n    function startMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        uint256[] memory _initialOdds,\\n        bool _active\\n    ) internal returns (uint256 _marketId) {\\n        _marketId = markets.length;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                createShareTokens(_names, address(this)),\\n                OwnedERC20(address(0)),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                0,\\n                _initialOdds,\\n                _active\\n            )\\n        );\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n    }\\n       \\n    \\n    function activateMarket(uint256 _marketId) internal {\\n        markets[_marketId].active = true;\\n        emit MarketActivated(_marketId);\\n    }\\n\\n    function makeEmptyMarket() private pure returns (Market memory) {\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\n        uint256[] memory _initialOdds = new uint256[](0);\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\n    }\\n\\n\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\n        Market storage _market = markets[_marketId];\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\n\\n        _market.winner = _winner;\\n        _market.active = false;\\n        _market.winnerIndex = _winningOutcome;\\n        _market.resolutionTimestamp = block.timestamp;\\n        string memory _outcomeName = _winner.name();\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(address(0));\\n    }\\n\\n    // shares => collateral\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n\\n    /**\\n     @notice \\n     */\\n    function startZCBMarket(\\n        address _settlementAddress,\\n        uint256[] memory _initialOdds,\\n        bool _active,\\n        OwnedERC20[] memory _zcb\\n    ) internal returns (uint256 _marketId){\\n\\n        _marketId = markets.length;\\n        // OwnedERC20[] memory zcb = new OwnedERC20[](2);\\n        // zcb[0] = _zcb;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                _zcb,\\n                OwnedERC20(address(0)),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                0,\\n                _initialOdds,\\n                _active\\n                )\\n            );\\n\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n\\n    }\\n\\n    function getZCBMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n           revert(\\\"Market Not Activated\\\");\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdfd0469868be1d9333baf53d7451c38fac437e433230c2f9a337c4581b5742f8\",\"license\":\"MIT\"},\"contracts/turbo/CryptoCurrencyMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"../utils/AggregatorV3Interface.sol\\\";\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\nimport \\\"../libraries/Versioned.sol\\\";\\nimport \\\"../libraries/ManagedByLink.sol\\\";\\n\\ncontract CryptoCurrencyMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned, ManagedByLink {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    event CoinAdded(uint256 indexed id, string name);\\n    event ValueUpdate(uint256 indexed coinIndex, uint256 indexed resolutionTime, uint256 market, uint256 value);\\n\\n    enum Outcome {\\n        Above, // 0\\n        NotAbove // 1\\n    }\\n    string constant Above = \\\"Above\\\";\\n    string constant NotAbove = \\\"Not Above\\\";\\n\\n    struct Coin {\\n        string name;\\n        AggregatorV3Interface feed;\\n        uint256 value;\\n        uint8 imprecision; // how many decimals to truncate\\n        uint256 currentMarket; // 0 indicates no current market\\n    }\\n    Coin[] public coins;\\n\\n    struct MarketDetails {\\n        uint256 coinIndex;\\n        uint256 creationValue;\\n        uint256 resolutionValue;\\n        uint256 resolutionTime; // value at given time; this is that time\\n    }\\n    // MarketId => MarketDetails\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol,\\n        address _linkNode\\n    )\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\n        Versioned(\\\"v1.3.3\\\")\\n        ManagedByLink(_linkNode)\\n    {\\n        string memory _name = \\\"\\\";\\n        coins.push(makeCoin(_name, AggregatorV3Interface(address(0)), 0));\\n    }\\n\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\n        return marketDetails[_marketId];\\n    }\\n\\n    // NOTE: Trusts the owner not to add a coin twice.\\n    function addCoin(\\n        string calldata _name,\\n        AggregatorV3Interface _feed,\\n        uint8 _imprecision\\n    ) external onlyOwner returns (uint256 _coinIndex) {\\n        Coin memory _coin = makeCoin(_name, _feed, _imprecision);\\n        _coinIndex = coins.length;\\n        coins.push(_coin);\\n        emit CoinAdded(_coinIndex, _name);\\n    }\\n\\n    function getCoin(uint256 _coinIndex) public view returns (Coin memory _coin) {\\n        _coin = coins[_coinIndex];\\n    }\\n\\n    function getCoins() public view returns (Coin[] memory _coins) {\\n        _coins = new Coin[](coins.length);\\n        // Skip first coin because it's always the zeroed-out fake coin.\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            _coins[i] = coins[i];\\n        }\\n    }\\n\\n    // If _resolutionTime is 0 then do NOT create.\\n    // If _roundId is 0 then do NOT resolve.\\n    function pokeCoin(\\n        uint256 _coinIndex,\\n        uint256 _resolutionTime,\\n        uint80 _roundId\\n    ) public onlyLinkNode {\\n        Coin storage _coin = coins[_coinIndex];\\n\\n        // There's a market to resolve.\\n        if (_roundId != 0 && _coin.currentMarket != 0) {\\n            resolveMarket(_coin, _roundId);\\n        }\\n\\n        // Create a market\\n        if (_resolutionTime != 0 && _coin.currentMarket == 0) {\\n            createMarket(_coinIndex, _coin, _resolutionTime);\\n        }\\n    }\\n\\n    function createMarket(\\n        uint256 _coinIndex,\\n        Coin storage _coin,\\n        uint256 _resolutionTime\\n    ) internal returns (uint256 _marketId) {\\n        (, uint256 _newValue) = getLatestValue(_coin);\\n\\n        string[] memory _outcomes = new string[](2);\\n        _outcomes[uint256(Outcome.Above)] = Above;\\n        _outcomes[uint256(Outcome.NotAbove)] = NotAbove;\\n\\n        _marketId = startMarket(linkNode, _outcomes, evenOdds(false, 2), true);\\n        marketDetails[_marketId] = MarketDetails(_coinIndex, _newValue, 0, _resolutionTime);\\n        _coin.currentMarket = _marketId;\\n        _coin.value = _newValue;\\n        emit ValueUpdate(_coinIndex, _resolutionTime, _marketId, _newValue);\\n    }\\n\\n    function resolveMarket(Coin storage _coin, uint80 _roundId) internal {\\n        uint256 _resolutionTime = marketDetails[_coin.currentMarket].resolutionTime;\\n        (uint256 _fullValue, uint256 _newValue) = getSpecificValue(_coin, _roundId, _resolutionTime);\\n\\n        uint256 _winningOutcome;\\n        if (_newValue > _coin.value) {\\n            _winningOutcome = uint256(Outcome.Above);\\n        } else {\\n            _winningOutcome = uint256(Outcome.NotAbove);\\n        }\\n\\n        endMarket(_coin.currentMarket, _winningOutcome);\\n        marketDetails[_coin.currentMarket].resolutionValue = _fullValue;\\n        _coin.currentMarket = 0;\\n        _coin.value = 0;\\n    }\\n\\n    function getLatestValue(Coin storage _coin) internal view returns (uint256 _fullValue, uint256 _truncatedValue) {\\n        (, int256 _rawValue, , , ) = _coin.feed.latestRoundData();\\n        require(_rawValue >= 0, \\\"Value from feed is negative\\\");\\n        _fullValue = uint256(_rawValue);\\n        _truncatedValue = calcTruncatedValue(_coin, _fullValue);\\n    }\\n\\n    // Get value at a specific round, but fail if it isn't after a specific time.\\n    function getSpecificValue(\\n        Coin storage _coin,\\n        uint80 _roundId,\\n        uint256 _resolutionTime\\n    ) internal view returns (uint256 _fullValue, uint256 _truncatedValue) {\\n        (, int256 _rawValue, , uint256 _updatedAt, ) = _coin.feed.getRoundData(_roundId);\\n        require(_rawValue >= 0, \\\"Value from feed is negative\\\");\\n        require(_updatedAt >= _resolutionTime, \\\"Value hasn't been updated yet\\\");\\n\\n        (, , , uint256 _previousRoundTime, ) = _coin.feed.getRoundData(previousRound(_roundId));\\n        require(_previousRoundTime < _resolutionTime, \\\"Must use first round after resolution time\\\");\\n\\n        _fullValue = uint256(_rawValue);\\n        _truncatedValue = calcTruncatedValue(_coin, _fullValue);\\n    }\\n\\n    // The precision is how many decimals the value has. Zero is dollars, 2 includes cents, 3 is tenths of a cent, etc.\\n    // Our resolution rules want a certain precision. Like BTC is to the dollar and MATIC is to the cent.\\n    // If somehow the decimals are larger than the desired precision then add zeroes to the end to meet the precision.\\n    // This does not change the resolution outcome but does guard against decimals() changing and therefore altering the basis.\\n    function calcTruncatedValue(Coin storage _coin, uint256 _fullValue)\\n        internal\\n        view\\n        returns (uint256 _truncatedValue)\\n    {\\n        uint8 _precision = _coin.feed.decimals(); // probably constant but that isn't guaranteed, so query each time\\n        if (_precision > _coin.imprecision) {\\n            uint8 _truncate = _precision - _coin.imprecision;\\n            _truncatedValue = _fullValue / (10**_truncate);\\n        } else if (_precision < _coin.imprecision) {\\n            uint8 _greaten = _coin.imprecision - _precision;\\n            _truncatedValue = _fullValue * (10**_greaten);\\n        } else {\\n            _truncatedValue = _fullValue;\\n        }\\n\\n        // Round up because that cleanly fits Above/Not-Above.\\n        if (_truncatedValue != _fullValue) {\\n            _truncatedValue += 1;\\n        }\\n    }\\n\\n    function makeCoin(\\n        string memory _name,\\n        AggregatorV3Interface _feed,\\n        uint8 _imprecision\\n    ) internal pure returns (Coin memory _coin) {\\n        _coin = Coin(_name, _feed, 0, _imprecision, 0);\\n    }\\n\\n    // The roundId is the encoding of two parts: the phase and the phase-specific round id.\\n    // To find the previous roundId:\\n    // 1. extract the phase and phase-specific round (I call these _phaseId and _roundId)\\n    // 2. decrement the phase-specific round\\n    // 3. re-encode the phase and phase-specific round.\\n    uint256 private constant PHASE_OFFSET = 64;\\n\\n    function previousRound(uint80 _fullRoundId) internal pure returns (uint80) {\\n        uint256 _phaseId = uint256(uint16(_fullRoundId >> PHASE_OFFSET));\\n        uint64 _roundId = uint64(_fullRoundId) - 1;\\n        return uint80((_phaseId << PHASE_OFFSET) | _roundId);\\n    }\\n\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\n        return getMarketDetails(_marketId).resolutionTime;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d0075a2c27e63e9ea84d0ef4fb5823d77913e0075d8e413022756090823f9b\",\"license\":\"MIT\"},\"contracts/turbo/CryptoMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"../utils/AggregatorV3Interface.sol\\\";\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\nimport \\\"../libraries/Versioned.sol\\\";\\nimport \\\"../libraries/ManagedByLink.sol\\\";\\nimport \\\"../libraries/Rewardable.sol\\\";\\n\\ncontract CryptoMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned, ManagedByLink {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    event CoinAdded(uint256 indexed id, string name);\\n\\n    event NewPrices(uint256 indexed nextResolutionTime, uint256[] markets, uint256[] prices);\\n\\n    struct Coin {\\n        string name;\\n        AggregatorV3Interface priceFeed;\\n        uint256 price;\\n        uint8 imprecision; // how many decimals to truncate\\n        uint256[1] currentMarkets;\\n    }\\n    Coin[] public coins;\\n\\n    enum MarketType {\\n        PriceUpDown // 0\\n    }\\n    enum PriceUpDownOutcome {\\n        Above, // 0\\n        NotAbove // 1\\n    }\\n    struct MarketDetails {\\n        MarketType marketType;\\n        uint256 coinIndex;\\n        uint256 creationPrice;\\n        uint256 resolutionPrice;\\n        uint256 resolutionTime; // price at given time; this is that time\\n    }\\n    // MarketId => MarketDetails\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\n\\n    uint256 public nextResolutionTime;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol,\\n        address _linkNode\\n    )\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\n        Versioned(\\\"v1.2.0\\\")\\n        ManagedByLink(_linkNode)\\n    {\\n        string memory _name = \\\"\\\";\\n        coins.push(makeCoin(_name, AggregatorV3Interface(address(0)), 0));\\n    }\\n\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\n        return marketDetails[_marketId];\\n    }\\n\\n    // NOTE: Trusts the owner not to add a coin twice.\\n    // Returns the coin index.\\n    function addCoin(\\n        string calldata _name,\\n        AggregatorV3Interface _priceFeed,\\n        uint8 _imprecision\\n    ) external onlyOwner returns (uint256 _coinIndex) {\\n        Coin memory _coin = makeCoin(_name, _priceFeed, _imprecision);\\n        _coinIndex = coins.length;\\n        coins.push(_coin);\\n        emit CoinAdded(_coinIndex, _name);\\n    }\\n\\n    function getCoin(uint256 _coinIndex) public view returns (Coin memory _coin) {\\n        _coin = coins[_coinIndex];\\n    }\\n\\n    function getCoins() public view returns (Coin[] memory _coins) {\\n        _coins = new Coin[](coins.length);\\n        // Skip first coin because it's always the zeroed-out fake coin.\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            _coins[i] = coins[i];\\n        }\\n    }\\n\\n    // Iterates over all coins.\\n    // If markets do not exist for coin, create them.\\n    // Unless _nextResolutionTime is zero; then do not create new markets.\\n    // If markets for coin exist and are ready to resolve, resolve them and create new markets.\\n    // Else, error.\\n    //\\n    // Assume that _roundIds has a dummy value at index 0, and is 1 indexed like the\\n    // coins array.\\n    function createAndResolveMarkets(uint80[] calldata _roundIds, uint256 _nextResolutionTime) public onlyLinkNode {\\n        // If market creation was stopped then it can be started again.\\n        // If market creation wasn't stopped then you must wait for market end time to resolve.\\n        require(block.timestamp >= nextResolutionTime, \\\"Must wait for market resolution\\\");\\n        require(_roundIds.length == coins.length, \\\"Must specify one roundId for each coin\\\");\\n\\n        uint256 _resolutionTime = nextResolutionTime;\\n        nextResolutionTime = _nextResolutionTime;\\n\\n        uint256[] memory _prices = new uint256[](coins.length - 1);\\n        uint256[] memory _newMarketIds = new uint256[](coins.length - 1);\\n        // Start at 1 to skip the fake Coin in the 0 index\\n        for (uint256 i = 1; i < coins.length; i++) {\\n            (_prices[i - 1], _newMarketIds[i - 1]) = createAndResolveMarketsForCoin(i, _resolutionTime, _roundIds[i]);\\n        }\\n\\n        emit NewPrices(nextResolutionTime, _newMarketIds, _prices);\\n    }\\n\\n    function createAndResolveMarketsForCoin(\\n        uint256 _coinIndex,\\n        uint256 _resolutionTime,\\n        uint80 _roundId\\n    ) internal returns (uint256 _price, uint256 _newMarketId) {\\n        Coin memory _coin = coins[_coinIndex];\\n        (uint256 _fullPrice, uint256 _newPrice) = getPrice(_coin, _roundId, _resolutionTime);\\n\\n        // resolve markets\\n        if (_coin.currentMarkets[uint256(MarketType.PriceUpDown)] != 0) {\\n            resolvePriceUpDownMarket(_coin, _newPrice, _fullPrice);\\n        }\\n\\n        // update price only AFTER resolution\\n        coins[_coinIndex].price = _newPrice;\\n\\n        // link node sets nextResolutionTime to zero to signify \\\"do not create markets after resolution\\\"\\n        if (nextResolutionTime == 0) {\\n            return (0, 0);\\n        }\\n\\n        // create markets\\n        _newMarketId = createPriceUpDownMarket(_coinIndex, linkNode, _newPrice);\\n        coins[_coinIndex].currentMarkets[uint256(MarketType.PriceUpDown)] = _newMarketId;\\n\\n        return (_newPrice, _newMarketId);\\n    }\\n\\n    function resolvePriceUpDownMarket(\\n        Coin memory _coin,\\n        uint256 _newPrice,\\n        uint256 _fullPrice\\n    ) internal {\\n        uint256 _marketId = _coin.currentMarkets[uint256(MarketType.PriceUpDown)];\\n\\n        uint256 _winningOutcome;\\n        if (_newPrice > _coin.price) {\\n            _winningOutcome = uint256(PriceUpDownOutcome.Above);\\n        } else {\\n            _winningOutcome = uint256(PriceUpDownOutcome.NotAbove);\\n        }\\n\\n        endMarket(_marketId, _winningOutcome);\\n        marketDetails[_marketId].resolutionPrice = _fullPrice;\\n    }\\n\\n    function createPriceUpDownMarket(\\n        uint256 _coinIndex,\\n        address _creator,\\n        uint256 _newPrice\\n    ) internal returns (uint256 _id) {\\n        string[] memory _outcomes = new string[](2);\\n        _outcomes[uint256(PriceUpDownOutcome.Above)] = \\\"Above\\\";\\n        _outcomes[uint256(PriceUpDownOutcome.NotAbove)] = \\\"Not Above\\\";\\n\\n        _id = startMarket(_creator, _outcomes, evenOdds(false, 2), true);\\n        marketDetails[_id] = MarketDetails(MarketType.PriceUpDown, _coinIndex, _newPrice, 0, nextResolutionTime);\\n    }\\n\\n    // Returns the price based on a few factors.\\n    // If _roundId is zero then it returns the latest price.\\n    // Else, it returns the price for that round,\\n    //       but errors if that isn't the first round after the resolution time.\\n    // The price is then altered to match the desired precision.\\n    function getPrice(\\n        Coin memory _coin,\\n        uint80 _roundId,\\n        uint256 _resolutionTime\\n    ) internal view returns (uint256 _fullPrice, uint256 _truncatedPrice) {\\n        if (_roundId == 0) {\\n            (, int256 _rawPrice, , , ) = _coin.priceFeed.latestRoundData();\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\n            _fullPrice = uint256(_rawPrice);\\n        } else {\\n            (, int256 _rawPrice, , uint256 updatedAt, ) = _coin.priceFeed.getRoundData(_roundId);\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\n            require(updatedAt >= _resolutionTime, \\\"Price hasn't been updated yet\\\");\\n\\n            // if resolution time is zero then market creation was stopped, so the previous round doesn't matter\\n            if (_resolutionTime != 0) {\\n                (, , , uint256 _previousRoundTime, ) = _coin.priceFeed.getRoundData(previousRound(_roundId));\\n                require(_previousRoundTime < _resolutionTime, \\\"Must use first round after resolution time\\\");\\n            }\\n\\n            _fullPrice = uint256(_rawPrice);\\n        }\\n\\n        // The precision is how many decimals the price has. Zero is dollars, 2 includes cents, 3 is tenths of a cent, etc.\\n        // Our resolution rules want a certain precision. Like BTC is to the dollar and MATIC is to the cent.\\n        // If somehow the decimals are larger than the desired precision then add zeroes to the end to meet the precision.\\n        // This does not change the resolution outcome but does guard against decimals() changing and therefore altering the basis.\\n\\n        uint8 _precision = _coin.priceFeed.decimals(); // probably constant but that isn't guaranteed, so query each time\\n        if (_precision > _coin.imprecision) {\\n            uint8 _truncate = _precision - _coin.imprecision;\\n            _truncatedPrice = _fullPrice / (10**_truncate);\\n        } else if (_precision < _coin.imprecision) {\\n            uint8 _greaten = _coin.imprecision - _precision;\\n            _truncatedPrice = _fullPrice * (10**_greaten);\\n        } else {\\n            _truncatedPrice = _fullPrice;\\n        }\\n\\n        // Round up because that cleanly fits Above/Not-Above.\\n        if (_truncatedPrice != _fullPrice) {\\n            _truncatedPrice += 1;\\n        }\\n    }\\n\\n    function makeCoin(\\n        string memory _name,\\n        AggregatorV3Interface _priceFeed,\\n        uint8 _imprecision\\n    ) internal pure returns (Coin memory _coin) {\\n        uint256[1] memory _currentMarkets = [uint256(0)];\\n        _coin = Coin(_name, _priceFeed, 0, _imprecision, _currentMarkets);\\n    }\\n\\n    // The roundId is the encoding of two parts: the phase and the phase-specific round id.\\n    // To find the previous roundId:\\n    // 1. extract the phase and phase-specific round (I call these _phaseId and _roundId)\\n    // 2. decrement the phase-specific round\\n    // 3. re-encode the phase and phase-specific round.\\n    uint256 private constant PHASE_OFFSET = 64;\\n\\n    function previousRound(uint80 _fullRoundId) internal pure returns (uint80) {\\n        uint256 _phaseId = uint256(uint16(_fullRoundId >> PHASE_OFFSET));\\n        uint64 _roundId = uint64(_fullRoundId) - 1;\\n        return uint80((_phaseId << PHASE_OFFSET) | _roundId);\\n    }\\n\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\n        return getMarketDetails(_marketId).resolutionTime;\\n    }\\n}\\n\",\"keccak256\":\"0xe7441ec81966b2fc62a6e1badc135f56ad7ed187a26a8cd556e53b3067e15b0f\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(address(0)));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35a2aa230007983b91a3bf432412cb3f3d497464e911e5c640a6d541f612f8a8\",\"license\":\"MIT\"},\"contracts/turbo/Fetcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"./MMAMarketFactoryV3.sol\\\";\\nimport \\\"./AMMFactory.sol\\\";\\nimport \\\"./CryptoMarketFactoryV3.sol\\\";\\nimport \\\"./NBAMarketFactoryV3.sol\\\";\\nimport \\\"../rewards/MasterChef.sol\\\";\\nimport \\\"./CryptoCurrencyMarketFactoryV3.sol\\\";\\nimport \\\"./TrustedMarketFactoryV3.sol\\\";\\n\\n// Helper contract for grabbing huge amounts of data without overloading multicall.\\nabstract contract Fetcher {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    struct CollateralBundle {\\n        address addr;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n\\n    struct MarketFactoryBundle {\\n        uint256 shareFactor;\\n        uint256 stakerFee;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        FeePot feePot;\\n        CollateralBundle collateral;\\n        uint256 marketCount;\\n    }\\n\\n    struct PoolBundle {\\n        address addr;\\n        uint256[] tokenRatios;\\n        uint256[] balances;\\n        uint256[] weights;\\n        uint256 swapFee;\\n        uint256 totalSupply;\\n    }\\n\\n    struct StaticMarketBundle {\\n        AbstractMarketFactoryV3 factory;\\n        uint256 marketId;\\n        PoolBundle pool;\\n        MasterChef.PoolStatusInfo rewards;\\n        OwnedERC20[] shareTokens;\\n        uint256 creationTimestamp;\\n        OwnedERC20 winner;\\n        uint256[] initialOdds;\\n    }\\n\\n    struct DynamicMarketBundle {\\n        AbstractMarketFactoryV3 factory;\\n        uint256 marketId;\\n        PoolBundle pool;\\n        OwnedERC20 winner;\\n    }\\n\\n    string public marketType;\\n    string public version;\\n\\n    constructor(string memory _type, string memory _version) {\\n        marketType = _type;\\n        version = _version;\\n    }\\n\\n    function buildCollateralBundle(IERC20Full _collateral) internal view returns (CollateralBundle memory _bundle) {\\n        _bundle.addr = address(_collateral);\\n        _bundle.symbol = _collateral.symbol();\\n        _bundle.decimals = _collateral.decimals();\\n    }\\n\\n    function buildMarketFactoryBundle(AbstractMarketFactoryV3 _marketFactory)\\n        internal\\n        view\\n        returns (MarketFactoryBundle memory _bundle)\\n    {\\n        _bundle.shareFactor = _marketFactory.shareFactor();\\n        _bundle.stakerFee = _marketFactory.stakerFee();\\n        _bundle.settlementFee = _marketFactory.settlementFee();\\n        _bundle.protocolFee = _marketFactory.protocolFee();\\n        _bundle.feePot = _marketFactory.feePot();\\n        _bundle.collateral = buildCollateralBundle(_marketFactory.collateral());\\n        _bundle.marketCount = _marketFactory.marketCount();\\n    }\\n\\n    function buildStaticMarketBundle(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _marketId\\n    ) internal view returns (StaticMarketBundle memory _bundle) {\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        _bundle.factory = _marketFactory;\\n        _bundle.marketId = _marketId;\\n        _bundle.pool = buildPoolBundle(_marketFactory, _ammFactory, _marketId);\\n        _bundle.rewards = _masterChef.getPoolInfo(_ammFactory, _marketFactory, _marketId);\\n        _bundle.shareTokens = _market.shareTokens;\\n        _bundle.creationTimestamp = _market.creationTimestamp;\\n        _bundle.winner = _market.winner;\\n        _bundle.initialOdds = _market.initialOdds;\\n    }\\n\\n    function buildDynamicMarketBundle(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _marketId\\n    ) internal view returns (DynamicMarketBundle memory _bundle) {\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        _bundle.factory = _marketFactory;\\n        _bundle.marketId = _marketId;\\n        _bundle.winner = _market.winner;\\n        _bundle.pool = buildPoolBundle(_marketFactory, _ammFactory, _marketId);\\n    }\\n\\n    function buildPoolBundle(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _marketId\\n    ) internal view returns (PoolBundle memory _bundle) {\\n        BPool _pool = _ammFactory.getPool(_marketFactory, _marketId);\\n        if (_pool == BPool(address(0))) return _bundle;\\n\\n        _bundle.addr = address(_pool);\\n        _bundle.totalSupply = _pool.totalSupply();\\n        _bundle.swapFee = _ammFactory.getSwapFee(_marketFactory, _marketId);\\n        _bundle.balances = _ammFactory.getPoolBalances(_marketFactory, _marketId);\\n        _bundle.tokenRatios = _ammFactory.tokenRatios(_marketFactory, _marketId);\\n        _bundle.weights = _ammFactory.getPoolWeights(_marketFactory, _marketId);\\n    }\\n\\n    function openOrHasWinningShares(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        if (_market.winner == OwnedERC20(address(0))) return true; // open\\n        return _market.winner.totalSupply() > 0; // has winning shares\\n    }\\n}\\n\\nabstract contract SportsFetcher is Fetcher {\\n    struct SpecificMarketFactoryBundle {\\n        MarketFactoryBundle _super;\\n    }\\n\\n    struct StaticEventBundle {\\n        uint256 id;\\n        StaticMarketBundle[] markets;\\n        int256[] lines;\\n        uint256 estimatedStartTime;\\n        uint256 homeTeamId;\\n        uint256 awayTeamId;\\n        string homeTeamName;\\n        string awayTeamName;\\n        // Dynamics\\n        Sport.SportsEventStatus status;\\n        uint256 homeScore;\\n        uint256 awayScore;\\n    }\\n\\n    struct DynamicEventBundle {\\n        uint256 id;\\n        Sport.SportsEventStatus status;\\n        DynamicMarketBundle[] markets;\\n        uint256 homeScore;\\n        uint256 awayScore;\\n    }\\n\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\n        internal\\n        view\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\n    {\\n        _bundle._super = buildMarketFactoryBundle(AbstractMarketFactoryV3(_marketFactory));\\n    }\\n\\n    function fetchInitial(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\n            StaticEventBundle[] memory _eventBundles,\\n            uint256 _lowestEventIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\n        (_eventBundles, _lowestEventIndex) = buildStaticEventBundles(\\n            _marketFactory,\\n            _ammFactory,\\n            _masterChef,\\n            _offset,\\n            _total\\n        );\\n        _timestamp = block.timestamp;\\n    }\\n\\n    function fetchDynamic(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            DynamicEventBundle[] memory _bundles,\\n            uint256 _lowestEventIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        (_bundles, _lowestEventIndex) = buildDynamicEventBundles(_marketFactory, _ammFactory, _offset, _total);\\n        _timestamp = block.timestamp;\\n    }\\n\\n    function buildStaticEventBundles(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _offset,\\n        uint256 _total\\n    ) internal view returns (StaticEventBundle[] memory _bundles, uint256 _lowestEventIndex) {\\n        uint256[] memory _eventIds;\\n        (_eventIds, _lowestEventIndex) = listOfInterestingEvents(_marketFactory, _offset, _total);\\n\\n        _total = _eventIds.length;\\n        _bundles = new StaticEventBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _bundles[i] = buildStaticEventBundle(_marketFactory, _ammFactory, _masterChef, _eventIds[i]);\\n        }\\n    }\\n\\n    function buildDynamicEventBundles(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    ) internal view returns (DynamicEventBundle[] memory _bundles, uint256 _lowestEventIndex) {\\n        uint256[] memory _eventIds;\\n        (_eventIds, _lowestEventIndex) = listOfInterestingEvents(_marketFactory, _offset, _total);\\n\\n        _total = _eventIds.length;\\n        _bundles = new DynamicEventBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _bundles[i] = buildDynamicEventBundle(_marketFactory, _ammFactory, _eventIds[i]);\\n        }\\n    }\\n\\n    function buildStaticEventBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _eventId\\n    ) internal view returns (StaticEventBundle memory _bundle) {\\n        Sport.SportsEvent memory _event = Sport(_marketFactory).getSportsEvent(_eventId);\\n\\n        StaticMarketBundle[] memory _markets = new StaticMarketBundle[](_event.markets.length);\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            _markets[i] = buildStaticMarketBundle(\\n                AbstractMarketFactoryV3(_marketFactory),\\n                _ammFactory,\\n                _masterChef,\\n                _event.markets[i]\\n            );\\n        }\\n\\n        _bundle.id = _eventId;\\n        _bundle.status = _event.status;\\n        _bundle.markets = _markets;\\n        _bundle.lines = _event.lines;\\n        _bundle.estimatedStartTime = _event.estimatedStartTime;\\n        _bundle.homeTeamId = _event.homeTeamId;\\n        _bundle.awayTeamId = _event.awayTeamId;\\n        _bundle.homeTeamName = _event.homeTeamName;\\n        _bundle.awayTeamName = _event.awayTeamName;\\n        _bundle.homeScore = _event.homeScore;\\n        _bundle.awayScore = _event.awayScore;\\n    }\\n\\n    function buildDynamicEventBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _eventId\\n    ) internal view returns (DynamicEventBundle memory _bundle) {\\n        Sport.SportsEvent memory _event = Sport(_marketFactory).getSportsEvent(_eventId);\\n\\n        DynamicMarketBundle[] memory _markets = new DynamicMarketBundle[](_event.markets.length);\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            _markets[i] = buildDynamicMarketBundle(\\n                AbstractMarketFactoryV3(_marketFactory),\\n                _ammFactory,\\n                _event.markets[i]\\n            );\\n        }\\n\\n        _bundle.id = _eventId;\\n        _bundle.markets = _markets;\\n        _bundle.status = _event.status;\\n        _bundle.homeScore = _event.homeScore;\\n        _bundle.awayScore = _event.awayScore;\\n    }\\n\\n    // Starts from the end of the events list because newer events are more interesting.\\n    // _offset is skipping all events, not just interesting events\\n    function listOfInterestingEvents(\\n        address _marketFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    ) internal view returns (uint256[] memory _interestingEventIds, uint256 _eventIndex) {\\n        _interestingEventIds = new uint256[](_total);\\n\\n        uint256 _eventCount = Sport(_marketFactory).eventCount();\\n\\n        // No events so return nothing. (needed to avoid integer underflow below)\\n        if (_eventCount == 0) {\\n            return (new uint256[](0), 0);\\n        }\\n\\n        uint256 _max = _eventCount;\\n\\n        // No remaining events so return nothing. (needed to avoid integer underflow below)\\n        if (_offset > _max) {\\n            return (new uint256[](0), 0);\\n        }\\n\\n        uint256 _collectedEvents = 0;\\n        _eventIndex = _max - _offset;\\n        while (true) {\\n            if (_collectedEvents >= _total) break;\\n            if (_eventIndex == 0) break;\\n\\n            _eventIndex--; // starts out one too high, so this works\\n\\n            (Sport.SportsEvent memory _event, uint256 _eventId) =\\n                Sport(_marketFactory).getSportsEventByIndex(_eventIndex);\\n\\n            if (isEventInteresting(_event, AbstractMarketFactoryV3(_marketFactory))) {\\n                _interestingEventIds[_collectedEvents] = _eventId;\\n                _collectedEvents++;\\n            }\\n        }\\n\\n        if (_total > _collectedEvents) {\\n            assembly {\\n                // shortens array\\n                mstore(_interestingEventIds, _collectedEvents)\\n            }\\n        }\\n    }\\n\\n    function isEventInteresting(Sport.SportsEvent memory _event, AbstractMarketFactoryV3 _marketFactory)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < _event.markets.length; i++) {\\n            uint256 _marketId = _event.markets[i];\\n            if (openOrHasWinningShares(_marketFactory, _marketId)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\ncontract NBAFetcher is SportsFetcher {\\n    constructor() Fetcher(\\\"NBA\\\", \\\"TBD\\\") {}\\n}\\n\\ncontract MLBFetcher is SportsFetcher {\\n    constructor() Fetcher(\\\"MLB\\\", \\\"TBD\\\") {}\\n}\\n\\ncontract MMAFetcher is SportsFetcher {\\n    constructor() Fetcher(\\\"MMA\\\", \\\"TBD\\\") {}\\n}\\n\\ncontract NFLFetcher is SportsFetcher {\\n    constructor() Fetcher(\\\"NFL\\\", \\\"TBD\\\") {}\\n}\\n\\ncontract CryptoFetcher is Fetcher {\\n    constructor() Fetcher(\\\"Crypto\\\", \\\"TBD\\\") {}\\n\\n    struct SpecificMarketFactoryBundle {\\n        MarketFactoryBundle _super;\\n    }\\n\\n    struct SpecificStaticMarketBundle {\\n        StaticMarketBundle _super;\\n        uint8 marketType;\\n        uint256 coinIndex;\\n        uint256 creationPrice;\\n        uint256 resolutionTime;\\n        // Dynamics\\n        uint256 resolutionPrice;\\n    }\\n\\n    struct SpecificDynamicMarketBundle {\\n        DynamicMarketBundle _super;\\n        uint256 resolutionPrice;\\n    }\\n\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\n        internal\\n        view\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\n    {\\n        _bundle._super = buildMarketFactoryBundle(CryptoMarketFactoryV3(_marketFactory));\\n    }\\n\\n    function buildSpecificStaticMarketBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _marketId\\n    ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\n        CryptoMarketFactoryV3.MarketDetails memory _details =\\n            CryptoMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n        _bundle._super = buildStaticMarketBundle(\\n            CryptoMarketFactoryV3(_marketFactory),\\n            _ammFactory,\\n            _masterChef,\\n            _marketId\\n        );\\n        _bundle.marketType = uint8(_details.marketType);\\n        _bundle.creationPrice = _details.creationPrice;\\n        _bundle.coinIndex = _details.coinIndex;\\n        _bundle.resolutionPrice = _details.resolutionPrice;\\n        _bundle.resolutionTime = _details.resolutionTime;\\n    }\\n\\n    function buildSpecificDynamicMarketBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _marketId\\n    ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\n        CryptoMarketFactoryV3.MarketDetails memory _details =\\n            CryptoMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n        _bundle._super = buildDynamicMarketBundle(CryptoMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\n        _bundle.resolutionPrice = _details.resolutionPrice;\\n    }\\n\\n    function fetchInitial(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\n            SpecificStaticMarketBundle[] memory _marketBundles,\\n            uint256 _lowestMarketIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\n\\n        uint256[] memory _marketIds;\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n        _total = _marketIds.length;\\n        _marketBundles = new SpecificStaticMarketBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _marketBundles[i] = buildSpecificStaticMarketBundle(\\n                _marketFactory,\\n                _ammFactory,\\n                _masterChef,\\n                _marketIds[i]\\n            );\\n        }\\n\\n        _timestamp = block.timestamp;\\n    }\\n\\n    function fetchDynamic(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificDynamicMarketBundle[] memory _bundles,\\n            uint256 _lowestMarketIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        uint256[] memory _marketIds;\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n        _total = _marketIds.length;\\n        _bundles = new SpecificDynamicMarketBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\n        }\\n\\n        _timestamp = block.timestamp;\\n    }\\n\\n    // Starts from the end of the markets list because newer markets are more interesting.\\n    // _offset is skipping all markets, not just interesting markets\\n    function listOfInterestingMarkets(\\n        address _marketFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\n        _interestingMarketIds = new uint256[](_total);\\n        uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\n\\n        // No markets so return nothing. (needed to prevent integer underflow below)\\n        if (_max == 0 || _offset >= _max) {\\n            return (new uint256[](0), 0);\\n        }\\n\\n        // Starts at the end, less offset.\\n        // Stops before the 0th market since that market is always fake.\\n        uint256 _collectedMarkets = 0;\\n        _marketId = _max - _offset;\\n\\n        while (true) {\\n            if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\n                _interestingMarketIds[_collectedMarkets] = _marketId;\\n                _collectedMarkets++;\\n            }\\n\\n            if (_collectedMarkets >= _total) break;\\n            if (_marketId == 1) break; // skipping 0th market, which is fake\\n            _marketId--; // starts out oone too high, so this works\\n        }\\n\\n        if (_total > _collectedMarkets) {\\n            assembly {\\n                // shortens array\\n                mstore(_interestingMarketIds, _collectedMarkets)\\n            }\\n        }\\n    }\\n}\\n\\ncontract CryptoCurrencyFetcher is Fetcher {\\n    constructor() Fetcher(\\\"CryptoCurrency\\\", \\\"TBD\\\") {}\\n\\n    struct SpecificMarketFactoryBundle {\\n        MarketFactoryBundle _super;\\n    }\\n\\n    struct SpecificStaticMarketBundle {\\n        StaticMarketBundle _super;\\n        uint256 coinIndex;\\n        uint256 creationValue;\\n        uint256 resolutionTime;\\n        // Dynamics\\n        uint256 resolutionValue;\\n    }\\n\\n    struct SpecificDynamicMarketBundle {\\n        DynamicMarketBundle _super;\\n        uint256 resolutionValue;\\n    }\\n\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\n        internal\\n        view\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\n    {\\n        _bundle._super = buildMarketFactoryBundle(CryptoCurrencyMarketFactoryV3(_marketFactory));\\n    }\\n\\n    function buildSpecificStaticMarketBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _marketId\\n    ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\n        CryptoCurrencyMarketFactoryV3.MarketDetails memory _details =\\n            CryptoCurrencyMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n        _bundle._super = buildStaticMarketBundle(\\n            CryptoCurrencyMarketFactoryV3(_marketFactory),\\n            _ammFactory,\\n            _masterChef,\\n            _marketId\\n        );\\n        _bundle.creationValue = _details.creationValue;\\n        _bundle.coinIndex = _details.coinIndex;\\n        _bundle.resolutionValue = _details.resolutionValue;\\n        _bundle.resolutionTime = _details.resolutionTime;\\n    }\\n\\n    function buildSpecificDynamicMarketBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _marketId\\n    ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\n        CryptoCurrencyMarketFactoryV3.MarketDetails memory _details =\\n            CryptoCurrencyMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n        _bundle._super = buildDynamicMarketBundle(CryptoCurrencyMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\n        _bundle.resolutionValue = _details.resolutionValue;\\n    }\\n\\n    function fetchInitial(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\n            SpecificStaticMarketBundle[] memory _marketBundles,\\n            uint256 _lowestMarketIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\n\\n        uint256[] memory _marketIds;\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n        _total = _marketIds.length;\\n        _marketBundles = new SpecificStaticMarketBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _marketBundles[i] = buildSpecificStaticMarketBundle(\\n                _marketFactory,\\n                _ammFactory,\\n                _masterChef,\\n                _marketIds[i]\\n            );\\n        }\\n\\n        _timestamp = block.timestamp;\\n    }\\n\\n    function fetchDynamic(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificDynamicMarketBundle[] memory _bundles,\\n            uint256 _lowestMarketIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        uint256[] memory _marketIds;\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n        _total = _marketIds.length;\\n        _bundles = new SpecificDynamicMarketBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\n        }\\n\\n        _timestamp = block.timestamp;\\n    }\\n\\n    // Starts from the end of the markets list because newer markets are more interesting.\\n    // _offset is skipping all markets, not just interesting markets\\n    function listOfInterestingMarkets(\\n        address _marketFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\n        _interestingMarketIds = new uint256[](_total);\\n        uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\n\\n        // No markets so return nothing. (needed to prevent integer underflow below)\\n        if (_max == 0 || _offset >= _max) {\\n            return (new uint256[](0), 0);\\n        }\\n\\n        // Starts at the end, less offset.\\n        // Stops before the 0th market since that market is always fake.\\n        uint256 _collectedMarkets = 0;\\n        _marketId = _max - _offset;\\n\\n        while (true) {\\n            if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\n                _interestingMarketIds[_collectedMarkets] = _marketId;\\n                _collectedMarkets++;\\n            }\\n\\n            if (_collectedMarkets >= _total) break;\\n            if (_marketId == 1) break; // skipping 0th market, which is fake\\n            _marketId--; // starts out oone too high, so this works\\n        }\\n\\n        if (_total > _collectedMarkets) {\\n            assembly {\\n                // shortens array\\n                mstore(_interestingMarketIds, _collectedMarkets)\\n            }\\n        }\\n    }\\n}\\n\\n\\n// contract TrustedFetcher is Fetcher {\\n//     constructor() Fetcher(\\\"Trusted\\\", \\\"TBD\\\") {}\\n\\n//     struct SpecificMarketFactoryBundle {\\n//         MarketFactoryBundle _super;\\n//     }\\n\\n//     struct SpecificStaticMarketBundle {\\n//         StaticMarketBundle _super;\\n//         // uint256 coinIndex;\\n//         // uint256 creationValue;\\n//         // uint256 resolutionTime;\\n//         // // Dynamics\\n//         // uint256 resolutionValue;\\n//         string description;\\n//     }\\n\\n//     struct SpecificDynamicMarketBundle {\\n//         DynamicMarketBundle _super;\\n//         //uint256 resolutionValue;\\n//         string description;\\n\\n//     }\\n\\n//     function getMarket(    address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         MasterChef _masterChef,\\n//         uint256 _marketId) public view returns(   SpecificStaticMarketBundle memory _bundle\\n// ){\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n//         _bundle._super = buildStaticMarketBundle(\\n//             TrustedMarketFactoryV3(_marketFactory),\\n//             _ammFactory,\\n//             _masterChef,\\n//             _marketId\\n//         );\\n//         _bundle.description = _details.description;\\n//     }\\n\\n//     function buildSpecificMarketFactoryBundle(address _marketFactory)\\n//         internal\\n//         view\\n//         returns (SpecificMarketFactoryBundle memory _bundle)\\n//     {\\n//         _bundle._super = buildMarketFactoryBundle(TrustedMarketFactoryV3(_marketFactory));\\n//     }\\n\\n//     function buildSpecificStaticMarketBundle(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         MasterChef _masterChef,\\n//         uint256 _marketId\\n//     ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n//         _bundle._super = buildStaticMarketBundle(\\n//             TrustedMarketFactoryV3(_marketFactory),\\n//             _ammFactory,\\n//             _masterChef,\\n//             _marketId\\n//         );\\n//         _bundle.description = _details.description;\\n//         // _bundle.creationValue = _details.creationValue;\\n//         // _bundle.coinIndex = _details.coinIndex;\\n//         // _bundle.resolutionValue = _details.resolutionValue;\\n//         // _bundle.resolutionTime = _details.resolutionTime;\\n//     }\\n\\n//     function buildSpecificDynamicMarketBundle(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         uint256 _marketId\\n//     ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n//         _bundle._super = buildDynamicMarketBundle(TrustedMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\n//         _bundle.description = _details.description;\\n//     }\\n\\n//     function fetchInitial(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         MasterChef _masterChef,\\n//         uint256 _offset,\\n//         uint256 _total\\n//     )\\n//         public\\n//         view\\n//         returns (\\n//             SpecificMarketFactoryBundle memory _marketFactoryBundle,\\n//             SpecificStaticMarketBundle[] memory _marketBundles,\\n//             uint256 _lowestMarketIndex,\\n//             uint256 _timestamp\\n//         )\\n//     {\\n//         _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\n\\n//         uint256[] memory _marketIds;\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n//         _total = _marketIds.length;\\n//         _marketBundles = new SpecificStaticMarketBundle[](_total);\\n//         for (uint256 i; i < _total; i++) {\\n//             _marketBundles[i] = buildSpecificStaticMarketBundle(\\n//                 _marketFactory,\\n//                 _ammFactory,\\n//                 _masterChef,\\n//                 _marketIds[i]\\n//             );\\n//         }\\n\\n//         _timestamp = block.timestamp;\\n//     }\\n\\n//     function fetchDynamic(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         uint256 _offset,\\n//         uint256 _total\\n//     )\\n//         public\\n//         view\\n//         returns (\\n//             SpecificDynamicMarketBundle[] memory _bundles,\\n//             uint256 _lowestMarketIndex,\\n//             uint256 _timestamp\\n//         )\\n//     {\\n//         uint256[] memory _marketIds;\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n//         _total = _marketIds.length;\\n//         _bundles = new SpecificDynamicMarketBundle[](_total);\\n//         for (uint256 i; i < _total; i++) {\\n//             _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\n//         }\\n\\n//         _timestamp = block.timestamp;\\n//     }\\n\\n//     // Starts from the end of the markets list because newer markets are more interesting.\\n//     // _offset is skipping all markets, not just interesting markets\\n//     function listOfInterestingMarkets(\\n//         address _marketFactory,\\n//         uint256 _offset,\\n//         uint256 _total\\n//     ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\n//         _interestingMarketIds = new uint256[](_total);\\n//         uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\n\\n//         // No markets so return nothing. (needed to prevent integer underflow below)\\n//         if (_max == 0 || _offset >= _max) {\\n//             return (new uint256[](0), 0);\\n//         }\\n\\n//         // Starts at the end, less offset.\\n//         // Stops before the 0th market since that market is always fake.\\n//         uint256 _collectedMarkets = 0;\\n//         _marketId = _max - _offset;\\n\\n//         while (true) {\\n//             if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\n//                 _interestingMarketIds[_collectedMarkets] = _marketId;\\n//                 _collectedMarkets++;\\n//             }\\n\\n//             if (_collectedMarkets >= _total) break;\\n//             if (_marketId == 1) break; // skipping 0th market, which is fake\\n//             _marketId--; // starts out oone too high, so this works\\n//         }\\n\\n//         if (_total > _collectedMarkets) {\\n//             assembly {\\n//                 // shortens array\\n//                 mstore(_interestingMarketIds, _collectedMarkets)\\n//             }\\n//         }\\n//     }\\n// }\\n\",\"keccak256\":\"0x49b07f3abdb0af8bbae96b2086707270b7723da376b0bb2109b3aee3caad164c\",\"license\":\"MIT\"},\"contracts/turbo/MMAMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"../libraries/Sport.sol\\\";\\nimport \\\"../libraries/ResolveByFiat.sol\\\";\\nimport \\\"../libraries/HasHeadToHeadMarket.sol\\\";\\nimport \\\"../libraries/Versioned.sol\\\";\\n\\ncontract MMAMarketFactoryV3 is AbstractMarketFactoryV3, SportView, ResolvesByFiat, HasHeadToHeadMarket, Versioned {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 constant HeadToHead = 0;\\n    string constant InvalidName = \\\"No Contest / Draw\\\";\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol,\\n        address _linkNode\\n    )\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\n        Versioned(\\\"v1.2.0\\\")\\n        ManagedByLink(_linkNode)\\n        HasHeadToHeadMarket(HeadToHead, InvalidName)\\n    {}\\n\\n    function createEvent(\\n        uint256 _eventId,\\n        string memory _homeTeamName,\\n        uint256 _homeTeamId,\\n        string memory _awayTeamName,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        int256[2] memory _moneylines // [home,away]\\n    ) public onlyLinkNode returns (uint256[] memory _marketIds) {\\n        _marketIds = makeMarkets(_moneylines, _homeTeamName, _awayTeamName);\\n        makeSportsEvent(\\n            _eventId,\\n            _marketIds,\\n            build1Line(),\\n            _startTimestamp,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _homeTeamName,\\n            _awayTeamName\\n        );\\n    }\\n\\n    function makeMarkets(\\n        int256[2] memory _moneylines,\\n        string memory _homeTeamName,\\n        string memory _awayTeamName\\n    ) internal returns (uint256[] memory _marketIds) {\\n        _marketIds = new uint256[](1);\\n        _marketIds[HeadToHead] = makeHeadToHeadMarket(_moneylines, _homeTeamName, _awayTeamName);\\n    }\\n\\n    function resolveValidEvent(SportsEvent memory _event, uint256 _whoWon) internal override {\\n        resolveHeadToHeadMarket(_event.markets[HeadToHead], _whoWon);\\n    }\\n\\n    function resolveHeadToHeadMarket(uint256 _marketId, uint256 _whoWon) internal {\\n        uint256 _shareTokenIndex = calcHeadToHeadWinner(_whoWon);\\n        endMarket(_marketId, _shareTokenIndex);\\n    }\\n\\n    function calcHeadToHeadWinner(uint256 _whoWon) internal pure returns (uint256) {\\n        if (WhoWonHome == _whoWon) {\\n            return HeadToHeadHome;\\n        } else if (WhoWonAway == _whoWon) {\\n            return HeadToHeadAway;\\n        } else {\\n            return NoContest; // shouldn't happen here\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x178729896888c39c30559bcf6402c1c3752fa87f0313ed3a2db65e328fbb09df\",\"license\":\"MIT\"},\"contracts/turbo/NBAMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"../libraries/Sport.sol\\\";\\nimport \\\"../libraries/HasSpreadMarket.sol\\\";\\nimport \\\"../libraries/ResolveByScore.sol\\\";\\nimport \\\"../libraries/Versioned.sol\\\";\\n\\ncontract NBAMarketFactoryV3 is AbstractMarketFactoryV3, SportView, HasSpreadMarket, ResolvesByScore, Versioned {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 constant Spread = 0;\\n    string constant InvalidName = \\\"No Contest\\\";\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol,\\n        address _linkNode\\n    )\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\n        Versioned(\\\"1.5.0\\\")\\n        ManagedByLink(_linkNode)\\n        HasSpreadMarket(Spread, InvalidName)\\n    {}\\n\\n    function createEvent(\\n        uint256 _eventId,\\n        string memory _homeTeamName,\\n        uint256 _homeTeamId,\\n        string memory _awayTeamName,\\n        uint256 _awayTeamId,\\n        uint256 _startTimestamp,\\n        int256 _homeSpread\\n    ) public onlyLinkNode returns (uint256[] memory _marketIds) {\\n        _marketIds = makeMarkets(_homeTeamName, _awayTeamName);\\n        makeSportsEvent(\\n            _eventId,\\n            _marketIds,\\n            makeLine(_homeSpread),\\n            _startTimestamp,\\n            _homeTeamId,\\n            _awayTeamId,\\n            _homeTeamName,\\n            _awayTeamName\\n        );\\n    }\\n\\n    function makeMarkets(string memory _homeTeamName, string memory _awayTeamName)\\n        internal\\n        returns (uint256[] memory _marketIds)\\n    {\\n        _marketIds = new uint256[](1);\\n        _marketIds[Spread] = makeSpreadMarket(_homeTeamName, _awayTeamName);\\n    }\\n\\n    function makeLine(int256 _homeSpread) internal pure returns (int256[] memory _line) {\\n        _line = build1Line();\\n        _line[0] = addHalfPoint(_homeSpread);\\n    }\\n\\n    function resolveValidEvent(\\n        SportsEvent memory _event,\\n        uint256 _homeScore,\\n        uint256 _awayScore\\n    ) internal override {\\n        resolveSpreadMarket(_event.markets[Spread], _event.lines[Spread], _homeScore, _awayScore);\\n    }\\n}\\n\",\"keccak256\":\"0x5dac2580b65fe5d443e5e075b7349d767e4607f9e445d90c90dd921d384968cc\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external virtual onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external virtual onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xffd1670bd35f6feb4de1aa683a23c171031666e4356cff6f7c93df6d2aa5b78c\",\"license\":\"MIT\"},\"contracts/turbo/TrustedMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\nimport \\\"../libraries/Versioned.sol\\\";\\n\\ncontract TrustedMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\n\\n    struct MarketDetails {\\n        string description;\\n    }\\n    MarketDetails[] internal marketDetails;\\n    // mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\n\\n    modifier onlyOwnerManager() {\\n        require(msg.sender == owner || managers[msg.sender] , \\\"Only Validators can call this function\\\");\\n        _;\\n    }\\n\\n    mapping(address=>bool) managers; \\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees,\\n        address _protocol\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.1.0\\\") {}\\n\\n    //TODO add managers \\n    function createMarket(\\n        address _creator,\\n        string calldata _description,\\n        string[] calldata _names,\\n        uint256[] calldata _odds\\n    ) public  returns (uint256) {\\n        marketDetails.push(MarketDetails(_description));\\n        return startMarket(_creator, _names, _odds, true);\\n    }\\n\\n    //TODO add managers \\n    function trustedResolveMarket(uint256 _id, uint256 _winningOutcome) public {\\n        endMarket(_id, _winningOutcome);\\n    }\\n\\n    function getMarketDetails(uint256 _id) public view returns (MarketDetails memory) {\\n        return marketDetails[_id];\\n    }\\n\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\n        return 0;\\n    }\\n    \\n\\n    //ZCB markets\\n      function createZCBMarket(\\n        address _creator,\\n        string calldata _description,\\n        OwnedERC20[] memory zcb\\n    ) public  returns (uint256) {\\n        uint256[] memory odds = new uint256[](2); //TODO get rid of this \\n        odds[0] = 0;\\n        odds[1] = 0; \\n\\n        marketDetails.push(MarketDetails(_description));\\n        return startZCBMarket(_creator, odds, true, zcb);\\n    }\\n}\",\"keccak256\":\"0x23f7dcad36bf862dd1aa12379f56f24a136ac918a97636565a1c3efc86bb14db\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\n\\n\\nabstract contract ZCBFactory {\\n    function createZCB(string memory _name, address _owner) internal returns(OwnedERC20[] memory){\\n        uint256 _numOutcomes = 1; \\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_name, _name, _owner);\\n        }\\n        return _tokens; \\n    }\\n}\\n\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\\nabstract contract TurboShareTokenFactoryV1 {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0xa089ab77c0ac34afa00ff09eab3aa7da9ec009c2def9f44ad5ffb86150f53069\",\"license\":\"MIT\"},\"contracts/turbo/random.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"./MMAMarketFactoryV3.sol\\\";\\nimport \\\"./AMMFactory.sol\\\";\\nimport \\\"./CryptoMarketFactoryV3.sol\\\";\\nimport \\\"./NBAMarketFactoryV3.sol\\\";\\nimport \\\"../rewards/MasterChef.sol\\\";\\nimport \\\"./CryptoCurrencyMarketFactoryV3.sol\\\";\\nimport \\\"./TrustedMarketFactoryV3.sol\\\";\\nimport \\\"./Fetcher.sol\\\";\\n\\ncontract TrustedFetcher is Fetcher {\\n    constructor() Fetcher(\\\"Trusted\\\", \\\"TBD\\\") {}\\n\\n    struct SpecificMarketFactoryBundle {\\n        MarketFactoryBundle _super;\\n    }\\n\\n    struct SpecificStaticMarketBundle {\\n        StaticMarketBundle _super;\\n        // uint256 coinIndex;\\n        // uint256 creationValue;\\n        // uint256 resolutionTime;\\n        // // Dynamics\\n        // uint256 resolutionValue;\\n        string description;\\n    }\\n\\n    struct SpecificDynamicMarketBundle {\\n        DynamicMarketBundle _super;\\n        //uint256 resolutionValue;\\n        string description;\\n\\n    }\\n\\n    function sayHi() public view returns(uint256){\\n        return 0; \\n    }\\n\\n    function getMarket( address _marketFactory,\\n    AMMFactory _ammFactory,\\n    MasterChef _masterChef,\\n    uint256 _marketId) public view returns(   SpecificStaticMarketBundle memory _bundle\\n){\\n    TrustedMarketFactoryV3.MarketDetails memory _details =\\n        TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n    _bundle._super = buildStaticMarketBundle(\\n        TrustedMarketFactoryV3(_marketFactory),\\n        _ammFactory,\\n        _masterChef,\\n        _marketId\\n    );\\n    _bundle.description = _details.description;\\n    }\\n\\n\\n  function fetchInitial(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\n            SpecificStaticMarketBundle[] memory _marketBundles,\\n            uint256 _lowestMarketIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\n\\n        uint256[] memory _marketIds;\\n\\n       (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n        // (_marketIds, _lowestMarketIndex) = interestingMarkets(_marketFactory, _offset, _total);\\n\\n        _total = _marketIds.length;\\n        _marketBundles = new SpecificStaticMarketBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _marketBundles[i] = buildSpecificStaticMarketBundle(\\n                _marketFactory,\\n                _ammFactory,\\n                _masterChef,\\n                 _marketIds[i]\\n                \\n            );\\n        }\\n\\n        _timestamp = block.timestamp;\\n    }\\n\\n\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\n        internal\\n        view\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\n    {\\n        _bundle._super = buildMarketFactoryBundle(TrustedMarketFactoryV3(_marketFactory));\\n    }\\n\\n\\n function buildSpecificStaticMarketBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        MasterChef _masterChef,\\n        uint256 _marketId\\n    ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\n        TrustedMarketFactoryV3.MarketDetails memory _details =\\n            TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n        _bundle._super = buildStaticMarketBundle(\\n            TrustedMarketFactoryV3(_marketFactory),\\n            _ammFactory,\\n            _masterChef,\\n            _marketId+1\\n        );\\n        _bundle.description = _details.description;\\n        // _bundle.creationValue = _details.creationValue;\\n        // _bundle.coinIndex = _details.coinIndex;\\n        // _bundle.resolutionValue = _details.resolutionValue;\\n        // _bundle.resolutionTime = _details.resolutionTime;\\n    }\\n\\nfunction listOfInterestingMarkets(\\n        address _marketFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\n        _interestingMarketIds = new uint256[](_total);\\n        uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\n\\n        // No markets so return nothing. (needed to prevent integer underflow below)\\n        if (_max == 0 || _offset >= _max) {\\n            return (new uint256[](0), 0);\\n        }\\n\\n        // Starts at the end, less offset.\\n        // Stops before the 0th market since that market is always fake.\\n        uint256 _collectedMarkets = 0;\\n        _marketId = _max - _offset-1;\\n\\n        while (true) {\\n            if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\n                _interestingMarketIds[_collectedMarkets] = _marketId;\\n                _collectedMarkets++;\\n            }\\n\\n            if (_collectedMarkets >= _total) break;\\n            if (_marketId == 0) break; // skipping 0th market, which is fake\\n            _marketId--; // starts out oone too high, so this works\\n        }\\n\\n        if (_total > _collectedMarkets) {\\n            assembly {\\n                // shortens array\\n                mstore(_interestingMarketIds, _collectedMarkets)\\n            }\\n        }\\n    }\\n\\n    function fetchDynamic(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _offset,\\n        uint256 _total\\n    )\\n        public\\n        view\\n        returns (\\n            SpecificDynamicMarketBundle[] memory _bundles,\\n            uint256 _lowestMarketIndex,\\n            uint256 _timestamp\\n        )\\n    {\\n        uint256[] memory _marketIds;\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n        _total = _marketIds.length;\\n        _bundles = new SpecificDynamicMarketBundle[](_total);\\n        for (uint256 i; i < _total; i++) {\\n            _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\n        }\\n\\n        _timestamp = block.timestamp;\\n    }\\n \\n\\n\\n    function buildSpecificDynamicMarketBundle(\\n        address _marketFactory,\\n        AMMFactory _ammFactory,\\n        uint256 _marketId\\n    ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\n        TrustedMarketFactoryV3.MarketDetails memory _details =\\n            TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n        _bundle._super = buildDynamicMarketBundle(TrustedMarketFactoryV3(_marketFactory), _ammFactory, _marketId+1);\\n        _bundle.description = _details.description;\\n    }\\n\\n\\n    }\\n\\n\\n\\n\\n\\n\\n// contract TrustedFetcher is Fetcher {\\n//     constructor() Fetcher(\\\"Trusted\\\", \\\"TBD\\\") {}\\n\\n//     struct SpecificMarketFactoryBundle {\\n//         MarketFactoryBundle _super;\\n//     }\\n\\n//     struct SpecificStaticMarketBundle {\\n//         StaticMarketBundle _super;\\n//         // uint256 coinIndex;\\n//         // uint256 creationValue;\\n//         // uint256 resolutionTime;\\n//         // // Dynamics\\n//         // uint256 resolutionValue;\\n//         string description;\\n//     }\\n\\n//     struct SpecificDynamicMarketBundle {\\n//         DynamicMarketBundle _super;\\n//         //uint256 resolutionValue;\\n//         string description;\\n\\n//     }\\n\\n//     function getMarket(    address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         MasterChef _masterChef,\\n//         uint256 _marketId) public view returns(   SpecificStaticMarketBundle memory _bundle\\n// ){\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n//         _bundle._super = buildStaticMarketBundle(\\n//             TrustedMarketFactoryV3(_marketFactory),\\n//             _ammFactory,\\n//             _masterChef,\\n//             _marketId\\n//         );\\n//         _bundle.description = _details.description;\\n//     }\\n\\n//     function buildSpecificMarketFactoryBundle(address _marketFactory)\\n//         internal\\n//         view\\n//         returns (SpecificMarketFactoryBundle memory _bundle)\\n//     {\\n//         _bundle._super = buildMarketFactoryBundle(TrustedMarketFactoryV3(_marketFactory));\\n//     }\\n\\n//     function buildSpecificStaticMarketBundle(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         MasterChef _masterChef,\\n//         uint256 _marketId\\n//     ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n//         _bundle._super = buildStaticMarketBundle(\\n//             TrustedMarketFactoryV3(_marketFactory),\\n//             _ammFactory,\\n//             _masterChef,\\n//             _marketId\\n//         );\\n//         _bundle.description = _details.description;\\n//         // _bundle.creationValue = _details.creationValue;\\n//         // _bundle.coinIndex = _details.coinIndex;\\n//         // _bundle.resolutionValue = _details.resolutionValue;\\n//         // _bundle.resolutionTime = _details.resolutionTime;\\n//     }\\n\\n//     function buildSpecificDynamicMarketBundle(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         uint256 _marketId\\n//     ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\n//         _bundle._super = buildDynamicMarketBundle(TrustedMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\n//         _bundle.description = _details.description;\\n//     }\\n\\n//     function fetchInitial(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         MasterChef _masterChef,\\n//         uint256 _offset,\\n//         uint256 _total\\n//     )\\n//         public\\n//         view\\n//         returns (\\n//             SpecificMarketFactoryBundle memory _marketFactoryBundle,\\n//             SpecificStaticMarketBundle[] memory _marketBundles,\\n//             uint256 _lowestMarketIndex,\\n//             uint256 _timestamp\\n//         )\\n//     {\\n//         _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\n\\n//         uint256[] memory _marketIds;\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n//         _total = _marketIds.length;\\n//         _marketBundles = new SpecificStaticMarketBundle[](_total);\\n//         for (uint256 i; i < _total; i++) {\\n//             _marketBundles[i] = buildSpecificStaticMarketBundle(\\n//                 _marketFactory,\\n//                 _ammFactory,\\n//                 _masterChef,\\n//                 _marketIds[i]\\n//             );\\n//         }\\n\\n//         _timestamp = block.timestamp;\\n//     }\\n\\n//     function fetchDynamic(\\n//         address _marketFactory,\\n//         AMMFactory _ammFactory,\\n//         uint256 _offset,\\n//         uint256 _total\\n//     )\\n//         public\\n//         view\\n//         returns (\\n//             SpecificDynamicMarketBundle[] memory _bundles,\\n//             uint256 _lowestMarketIndex,\\n//             uint256 _timestamp\\n//         )\\n//     {\\n//         uint256[] memory _marketIds;\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\n\\n//         _total = _marketIds.length;\\n//         _bundles = new SpecificDynamicMarketBundle[](_total);\\n//         for (uint256 i; i < _total; i++) {\\n//             _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\n//         }\\n\\n//         _timestamp = block.timestamp;\\n//     }\\n\\n//     // Starts from the end of the markets list because newer markets are more interesting.\\n//     // _offset is skipping all markets, not just interesting markets\\n//     function listOfInterestingMarkets(\\n//         address _marketFactory,\\n//         uint256 _offset,\\n//         uint256 _total\\n//     ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\n//         _interestingMarketIds = new uint256[](_total);\\n//         uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\n\\n//         // No markets so return nothing. (needed to prevent integer underflow below)\\n//         if (_max == 0 || _offset >= _max) {\\n//             return (new uint256[](0), 0);\\n//         }\\n\\n//         // Starts at the end, less offset.\\n//         // Stops before the 0th market since that market is always fake.\\n//         uint256 _collectedMarkets = 0;\\n//         _marketId = _max - _offset;\\n\\n//         while (true) {\\n//             if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\n//                 _interestingMarketIds[_collectedMarkets] = _marketId;\\n//                 _collectedMarkets++;\\n//             }\\n\\n//             if (_collectedMarkets >= _total) break;\\n//             if (_marketId == 1) break; // skipping 0th market, which is fake\\n//             _marketId--; // starts out oone too high, so this works\\n//         }\\n\\n//         if (_total > _collectedMarkets) {\\n//             assembly {\\n//                 // shortens array\\n//                 mstore(_interestingMarketIds, _collectedMarkets)\\n//             }\\n//         }\\n//     }\",\"keccak256\":\"0x3a7f53233ef25af346d129d116807fdb2687f4ff3b1c49cae4a05994058267a8\",\"license\":\"MIT\"},\"contracts/utils/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\",\"keccak256\":\"0x6d04595d5f68f36186be58f14a5a20c6cafaf49ca329136af1e9f467a62bebe5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526007815266151c9d5cdd195960ca1b60208083019182528351808501909452600384526215109160ea1b9084015281519192916200005c916000916200007b565b508051620000729060019060208401906200007b565b5050506200015e565b828054620000899062000121565b90600052602060002090601f016020900481019282620000ad5760008555620000f8565b82601f10620000c857805160ff1916838001178555620000f8565b82800160010185558215620000f8579182015b82811115620000f8578251825591602001919060010190620000db565b50620001069291506200010a565b5090565b5b808211156200010657600081556001016200010b565b600181811c908216806200013657607f821691505b602082108114156200015857634e487b7160e01b600052602260045260246000fd5b50919050565b611f4a806200016e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c49c36c1461006757806322254b881461007b5780632dd489091461009e57806354fd4d50146100b357806356d27491146100bb57806383116aca146100dd575b600080fd5b604051600081526020015b60405180910390f35b61008e610089366004611616565b6100fd565b6040516100729493929190611cb3565b6100a661021a565b6040516100729190611ca0565b6100a66102a8565b6100ce6100c9366004611670565b6102b5565b60405161007293929190611bdb565b6100f06100eb3660046115c6565b6103bc565b6040516100729190611d72565b6101056112bc565b606060008061011389610461565b935060606101228a8888610479565b81519750935090508567ffffffffffffffff81111561015157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561018a57816020015b6101776112d4565b81526020019060019003908161016f5790505b50935060005b86811015610209576101cb8b8b8b8585815181106101be57634e487b7160e01b600052603260045260246000fd5b602002602001015161061f565b8582815181106101eb57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061020190611eb5565b915050610190565b504291505095509550955095915050565b6000805461022790611e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461025390611e7a565b80156102a05780601f10610275576101008083540402835291602001916102a0565b820191906000526020600020905b81548152906001019060200180831161028357829003601f168201915b505050505081565b6001805461022790611e7a565b606060008060606102c7888787610479565b81519650935090508467ffffffffffffffff8111156102f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561032f57816020015b61031c6112f4565b8152602001906001900390816103145790505b50935060005b858110156103ad5761036f898984848151811061036257634e487b7160e01b600052603260045260246000fd5b60200260200101516106be565b85828151811061038f57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806103a590611eb5565b915050610335565b50429150509450945094915050565b6103c46112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104439190810190611737565b90506104518686868661076b565b8252516020820152949350505050565b6104696112bc565b610472826108e1565b8152919050565b606060008267ffffffffffffffff8111156104a457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104cd578160200160208202803683370190505b50915060006001866001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061192e565b61054f9190611e1c565b905080158061055e5750808510155b1561057c575050604080516000808252602082019092529150610617565b6000600161058a8784611e1c565b6105949190611e1c565b92505b6105a18784610c5b565b156105e057828482815181106105c757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806105dc81611eb5565b9150505b8481106105ec57610608565b826105f657610608565b8261060081611e63565b935050610597565b80851115610614578084525b50505b935093915050565b6106276112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a69190810190611737565b90506104518686866106b9876001611e04565b61076b565b6106c66112f4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0386169063b06c1ba39060240160006040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107459190810190611737565b905061075c8585610757866001611e04565b610d7d565b82525160208201529392505050565b610773611307565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0387169063eb44fdd39060240160006040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f291908101906117b6565b6001600160a01b0387168352602083018490529050610812868685610e3d565b604083810191909152516327def0cb60e21b81526001600160a01b038681166004830152878116602483015260448201859052851690639f7bc32c9060640160a06040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a191906118bb565b60608301526020810151608083015260e08082015160a084015260408201516001600160a01b031660c08401526101209091015190820152949350505050565b6108e961138b565b816001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a919061192e565b816000018181525050816001600160a01b0316634b2d9ffc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061192e565b816020018181525050816001600160a01b0316637d1d7fb86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e919061192e565b816040018181525050816001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac8919061192e565b816060018181525050816001600160a01b0316634c9f66c76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906116e8565b81608001906001600160a01b031690816001600160a01b031681525050610bd8826001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906116e8565b61118a565b8160a00181905250816001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1957600080fd5b505afa158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c51919061192e565b60c0820152919050565b60405163eb44fdd360e01b81526004810182905260009081906001600160a01b0385169063eb44fdd39060240160006040518083038186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cdc91908101906117b6565b60408101519091506001600160a01b0316610cfb576001915050610d77565b600081604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d72919061192e565b119150505b92915050565b610d856113fc565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0386169063eb44fdd39060240160006040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e0491908101906117b6565b6001600160a01b0380871684526020840185905260408201511660608401529050610e30858585610e3d565b6040830152509392505050565b610e45611428565b604051632dadcf5160e11b81526001600160a01b0385811660048301526024820184905260009190851690635b5b9ea29060440160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116e8565b90506001600160a01b038116610edf5750611183565b6001600160a01b038116808352604080516318160ddd60e01b815290516318160ddd91600480820192602092909190829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a919061192e565b60a083015260405163fa0de35960e01b81526001600160a01b0386811660048301526024820185905285169063fa0de3599060440160206040518083038186803b158015610fa757600080fd5b505afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf919061192e565b608083015260405163d2364bf360e01b81526001600160a01b0386811660048301526024820185905285169063d2364bf39060440160006040518083038186803b15801561102c57600080fd5b505afa158015611040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106891908101906116b5565b6040838101919091525163c7b4b6dd60e01b81526001600160a01b0386811660048301526024820185905285169063c7b4b6dd9060440160006040518083038186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110f391908101906116b5565b602083015260405163d055da7160e01b81526001600160a01b0386811660048301526024820185905285169063d055da719060440160006040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261117c91908101906116b5565b6060830152505b9392505050565b6111b7604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038216808252604080516395d89b4160e01b815290516395d89b4191600480820192600092909190829003018186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112369190810190611704565b8160200181905250816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561127757600080fd5b505afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611946565b60ff166040820152919050565b60405180602001604052806112cf61138b565b905290565b60405180604001604052806112e7611307565b8152602001606081525090565b60405180604001604052806112e76113fc565b604080516101008101825260008082526020820152908101611327611428565b81526020016113606040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001606081526020016000815260200160006001600160a01b03168152602001606081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016113ef604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001600081525090565b604080516080810182526000808252602082015290810161141b611428565b8152600060209091015290565b6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b805161147281611efc565b919050565b600082601f830112611487578081fd5b8151602061149c61149783611de0565b611daf565b80838252828201915082860187848660051b89010111156114bb578586fd5b855b858110156114e25781516114d081611efc565b845292840192908401906001016114bd565b5090979650505050505050565b600082601f8301126114ff578081fd5b8151602061150f61149783611de0565b80838252828201915082860187848660051b890101111561152e578586fd5b855b858110156114e257815184529284019290840190600101611530565b8051801515811461147257600080fd5b600082601f83011261156c578081fd5b815167ffffffffffffffff81111561158657611586611ee6565b611599601f8201601f1916602001611daf565b8181528460208386010111156115ad578283fd5b6115be826020830160208701611e33565b949350505050565b600080600080608085870312156115db578384fd5b84356115e681611efc565b935060208501356115f681611efc565b9250604085013561160681611efc565b9396929550929360600135925050565b600080600080600060a0868803121561162d578081fd5b853561163881611efc565b9450602086013561164881611efc565b9350604086013561165881611efc565b94979396509394606081013594506080013592915050565b60008060008060808587031215611685578182fd5b843561169081611efc565b935060208501356116a081611efc565b93969395505050506040820135916060013590565b6000602082840312156116c6578081fd5b815167ffffffffffffffff8111156116dc578182fd5b6115be848285016114ef565b6000602082840312156116f9578081fd5b815161118381611efc565b600060208284031215611715578081fd5b815167ffffffffffffffff81111561172b578182fd5b6115be8482850161155c565b600060208284031215611748578081fd5b815167ffffffffffffffff8082111561175f578283fd5b9083019060208286031215611772578283fd5b60405160208101818110838211171561178d5761178d611ee6565b60405282518281111561179e578485fd5b6117aa8782860161155c565b82525095945050505050565b6000602082840312156117c7578081fd5b815167ffffffffffffffff808211156117de578283fd5b9083019061016082860312156117f2578283fd5b6117fa611d85565b61180383611467565b8152602083015182811115611816578485fd5b61182287828601611477565b60208301525061183460408401611467565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518381111561188a578586fd5b611896888287016114ef565b82840152505061014091506118ac82840161154c565b91810191909152949350505050565b600060a082840312156118cc578081fd5b60405160a0810181811067ffffffffffffffff821117156118ef576118ef611ee6565b8060405250825181526020830151602082015260408301516040820152606083015160608201526119226080840161154c565b60808201529392505050565b60006020828403121561193f578081fd5b5051919050565b600060208284031215611957578081fd5b815160ff81168114611183578182fd5b6000815180845260208085019450808401835b8381101561199f5781516001600160a01b03168752958201959082019060010161197a565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b858110156119f15782840389526119df848351611ad4565b988501989350908401906001016119c7565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561199f57815187529582019590820190600101611a11565b60008151808452611a45816020860160208601611e33565b601f01601f19169290920160200192915050565b60018060a01b0381511682526000602082015160c06020850152611a8060c08501826119fe565b905060408301518482036040860152611a9982826119fe565b91505060608301518482036060860152611ab382826119fe565b9150506080830151608085015260a083015160a08501528091505092915050565b6000815160408452611af26040850182516001600160a01b03169052565b602081015160608501526040810151610180806080870152611b186101c0870183611a59565b606084810151805160a08a0152602081015160c08a0152604081015160e08a01529081015161010089015260808101511515610120890152909250506080830151603f198088850301610140890152611b718483611967565b935060a085015161016089015260c08501519150611b99838901836001600160a01b03169052565b60e0850151945080888503016101a0890152505050611bb881836119fe565b91505060208301518482036020860152611bd28282611a2d565b95945050505050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b01875b84811015611c8557898403607f1901865281518051604080875281516001600160a01b0390811682890152868301518c890152908201518a88018b90529190611c4f60c0890184611a59565b918c01511660a08801529185015186830386880152919050611c718183611a2d565b978501979550505090820190600101611c03565b50508701989098525050505060409091019190915250919050565b6020815260006111836020830184611a2d565b608081526000855160206080840152805160a0840152602081015160c0840152604081015160e08401526060810151610100840152608081015160018060a01b0380821661012086015260a0830151915060e06101408601528082511661018086015250602081015160606101a0860152611d326101e0860182611a2d565b905060408201516101c086015260c08301516101608601528481036020860152611d5c81896119aa565b6040860197909752505050506060015292915050565b6020815260006111836020830184611ad4565b604051610160810167ffffffffffffffff81118282101715611da957611da9611ee6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd857611dd8611ee6565b604052919050565b600067ffffffffffffffff821115611dfa57611dfa611ee6565b5060051b60200190565b60008219821115611e1757611e17611ed0565b500190565b600082821015611e2e57611e2e611ed0565b500390565b60005b83811015611e4e578181015183820152602001611e36565b83811115611e5d576000848401525b50505050565b600081611e7257611e72611ed0565b506000190190565b600181811c90821680611e8e57607f821691505b60208210811415611eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611ec957611ec9611ed0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f1157600080fd5b5056fea264697066735822122018b6e4f9f87d3abb557d6324b078acbb36563d51048f350be799f0ef029bf9a564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630c49c36c1461006757806322254b881461007b5780632dd489091461009e57806354fd4d50146100b357806356d27491146100bb57806383116aca146100dd575b600080fd5b604051600081526020015b60405180910390f35b61008e610089366004611616565b6100fd565b6040516100729493929190611cb3565b6100a661021a565b6040516100729190611ca0565b6100a66102a8565b6100ce6100c9366004611670565b6102b5565b60405161007293929190611bdb565b6100f06100eb3660046115c6565b6103bc565b6040516100729190611d72565b6101056112bc565b606060008061011389610461565b935060606101228a8888610479565b81519750935090508567ffffffffffffffff81111561015157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561018a57816020015b6101776112d4565b81526020019060019003908161016f5790505b50935060005b86811015610209576101cb8b8b8b8585815181106101be57634e487b7160e01b600052603260045260246000fd5b602002602001015161061f565b8582815181106101eb57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061020190611eb5565b915050610190565b504291505095509550955095915050565b6000805461022790611e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461025390611e7a565b80156102a05780601f10610275576101008083540402835291602001916102a0565b820191906000526020600020905b81548152906001019060200180831161028357829003601f168201915b505050505081565b6001805461022790611e7a565b606060008060606102c7888787610479565b81519650935090508467ffffffffffffffff8111156102f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561032f57816020015b61031c6112f4565b8152602001906001900390816103145790505b50935060005b858110156103ad5761036f898984848151811061036257634e487b7160e01b600052603260045260246000fd5b60200260200101516106be565b85828151811061038f57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806103a590611eb5565b915050610335565b50429150509450945094915050565b6103c46112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104439190810190611737565b90506104518686868661076b565b8252516020820152949350505050565b6104696112bc565b610472826108e1565b8152919050565b606060008267ffffffffffffffff8111156104a457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104cd578160200160208202803683370190505b50915060006001866001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061192e565b61054f9190611e1c565b905080158061055e5750808510155b1561057c575050604080516000808252602082019092529150610617565b6000600161058a8784611e1c565b6105949190611e1c565b92505b6105a18784610c5b565b156105e057828482815181106105c757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806105dc81611eb5565b9150505b8481106105ec57610608565b826105f657610608565b8261060081611e63565b935050610597565b80851115610614578084525b50505b935093915050565b6106276112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a69190810190611737565b90506104518686866106b9876001611e04565b61076b565b6106c66112f4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0386169063b06c1ba39060240160006040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107459190810190611737565b905061075c8585610757866001611e04565b610d7d565b82525160208201529392505050565b610773611307565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0387169063eb44fdd39060240160006040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f291908101906117b6565b6001600160a01b0387168352602083018490529050610812868685610e3d565b604083810191909152516327def0cb60e21b81526001600160a01b038681166004830152878116602483015260448201859052851690639f7bc32c9060640160a06040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a191906118bb565b60608301526020810151608083015260e08082015160a084015260408201516001600160a01b031660c08401526101209091015190820152949350505050565b6108e961138b565b816001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a919061192e565b816000018181525050816001600160a01b0316634b2d9ffc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061192e565b816020018181525050816001600160a01b0316637d1d7fb86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e919061192e565b816040018181525050816001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac8919061192e565b816060018181525050816001600160a01b0316634c9f66c76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906116e8565b81608001906001600160a01b031690816001600160a01b031681525050610bd8826001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906116e8565b61118a565b8160a00181905250816001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1957600080fd5b505afa158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c51919061192e565b60c0820152919050565b60405163eb44fdd360e01b81526004810182905260009081906001600160a01b0385169063eb44fdd39060240160006040518083038186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cdc91908101906117b6565b60408101519091506001600160a01b0316610cfb576001915050610d77565b600081604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d72919061192e565b119150505b92915050565b610d856113fc565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0386169063eb44fdd39060240160006040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e0491908101906117b6565b6001600160a01b0380871684526020840185905260408201511660608401529050610e30858585610e3d565b6040830152509392505050565b610e45611428565b604051632dadcf5160e11b81526001600160a01b0385811660048301526024820184905260009190851690635b5b9ea29060440160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116e8565b90506001600160a01b038116610edf5750611183565b6001600160a01b038116808352604080516318160ddd60e01b815290516318160ddd91600480820192602092909190829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a919061192e565b60a083015260405163fa0de35960e01b81526001600160a01b0386811660048301526024820185905285169063fa0de3599060440160206040518083038186803b158015610fa757600080fd5b505afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf919061192e565b608083015260405163d2364bf360e01b81526001600160a01b0386811660048301526024820185905285169063d2364bf39060440160006040518083038186803b15801561102c57600080fd5b505afa158015611040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106891908101906116b5565b6040838101919091525163c7b4b6dd60e01b81526001600160a01b0386811660048301526024820185905285169063c7b4b6dd9060440160006040518083038186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110f391908101906116b5565b602083015260405163d055da7160e01b81526001600160a01b0386811660048301526024820185905285169063d055da719060440160006040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261117c91908101906116b5565b6060830152505b9392505050565b6111b7604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038216808252604080516395d89b4160e01b815290516395d89b4191600480820192600092909190829003018186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112369190810190611704565b8160200181905250816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561127757600080fd5b505afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611946565b60ff166040820152919050565b60405180602001604052806112cf61138b565b905290565b60405180604001604052806112e7611307565b8152602001606081525090565b60405180604001604052806112e76113fc565b604080516101008101825260008082526020820152908101611327611428565b81526020016113606040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001606081526020016000815260200160006001600160a01b03168152602001606081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016113ef604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001600081525090565b604080516080810182526000808252602082015290810161141b611428565b8152600060209091015290565b6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b805161147281611efc565b919050565b600082601f830112611487578081fd5b8151602061149c61149783611de0565b611daf565b80838252828201915082860187848660051b89010111156114bb578586fd5b855b858110156114e25781516114d081611efc565b845292840192908401906001016114bd565b5090979650505050505050565b600082601f8301126114ff578081fd5b8151602061150f61149783611de0565b80838252828201915082860187848660051b890101111561152e578586fd5b855b858110156114e257815184529284019290840190600101611530565b8051801515811461147257600080fd5b600082601f83011261156c578081fd5b815167ffffffffffffffff81111561158657611586611ee6565b611599601f8201601f1916602001611daf565b8181528460208386010111156115ad578283fd5b6115be826020830160208701611e33565b949350505050565b600080600080608085870312156115db578384fd5b84356115e681611efc565b935060208501356115f681611efc565b9250604085013561160681611efc565b9396929550929360600135925050565b600080600080600060a0868803121561162d578081fd5b853561163881611efc565b9450602086013561164881611efc565b9350604086013561165881611efc565b94979396509394606081013594506080013592915050565b60008060008060808587031215611685578182fd5b843561169081611efc565b935060208501356116a081611efc565b93969395505050506040820135916060013590565b6000602082840312156116c6578081fd5b815167ffffffffffffffff8111156116dc578182fd5b6115be848285016114ef565b6000602082840312156116f9578081fd5b815161118381611efc565b600060208284031215611715578081fd5b815167ffffffffffffffff81111561172b578182fd5b6115be8482850161155c565b600060208284031215611748578081fd5b815167ffffffffffffffff8082111561175f578283fd5b9083019060208286031215611772578283fd5b60405160208101818110838211171561178d5761178d611ee6565b60405282518281111561179e578485fd5b6117aa8782860161155c565b82525095945050505050565b6000602082840312156117c7578081fd5b815167ffffffffffffffff808211156117de578283fd5b9083019061016082860312156117f2578283fd5b6117fa611d85565b61180383611467565b8152602083015182811115611816578485fd5b61182287828601611477565b60208301525061183460408401611467565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518381111561188a578586fd5b611896888287016114ef565b82840152505061014091506118ac82840161154c565b91810191909152949350505050565b600060a082840312156118cc578081fd5b60405160a0810181811067ffffffffffffffff821117156118ef576118ef611ee6565b8060405250825181526020830151602082015260408301516040820152606083015160608201526119226080840161154c565b60808201529392505050565b60006020828403121561193f578081fd5b5051919050565b600060208284031215611957578081fd5b815160ff81168114611183578182fd5b6000815180845260208085019450808401835b8381101561199f5781516001600160a01b03168752958201959082019060010161197a565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b858110156119f15782840389526119df848351611ad4565b988501989350908401906001016119c7565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561199f57815187529582019590820190600101611a11565b60008151808452611a45816020860160208601611e33565b601f01601f19169290920160200192915050565b60018060a01b0381511682526000602082015160c06020850152611a8060c08501826119fe565b905060408301518482036040860152611a9982826119fe565b91505060608301518482036060860152611ab382826119fe565b9150506080830151608085015260a083015160a08501528091505092915050565b6000815160408452611af26040850182516001600160a01b03169052565b602081015160608501526040810151610180806080870152611b186101c0870183611a59565b606084810151805160a08a0152602081015160c08a0152604081015160e08a01529081015161010089015260808101511515610120890152909250506080830151603f198088850301610140890152611b718483611967565b935060a085015161016089015260c08501519150611b99838901836001600160a01b03169052565b60e0850151945080888503016101a0890152505050611bb881836119fe565b91505060208301518482036020860152611bd28282611a2d565b95945050505050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b01875b84811015611c8557898403607f1901865281518051604080875281516001600160a01b0390811682890152868301518c890152908201518a88018b90529190611c4f60c0890184611a59565b918c01511660a08801529185015186830386880152919050611c718183611a2d565b978501979550505090820190600101611c03565b50508701989098525050505060409091019190915250919050565b6020815260006111836020830184611a2d565b608081526000855160206080840152805160a0840152602081015160c0840152604081015160e08401526060810151610100840152608081015160018060a01b0380821661012086015260a0830151915060e06101408601528082511661018086015250602081015160606101a0860152611d326101e0860182611a2d565b905060408201516101c086015260c08301516101608601528481036020860152611d5c81896119aa565b6040860197909752505050506060015292915050565b6020815260006111836020830184611ad4565b604051610160810167ffffffffffffffff81118282101715611da957611da9611ee6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd857611dd8611ee6565b604052919050565b600067ffffffffffffffff821115611dfa57611dfa611ee6565b5060051b60200190565b60008219821115611e1757611e17611ed0565b500190565b600082821015611e2e57611e2e611ed0565b500390565b60005b83811015611e4e578181015183820152602001611e36565b83811115611e5d576000848401525b50505050565b600081611e7257611e72611ed0565b506000190190565b600181811c90821680611e8e57607f821691505b60208210811415611eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611ec957611ec9611ed0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f1157600080fd5b5056fea264697066735822122018b6e4f9f87d3abb557d6324b078acbb36563d51048f350be799f0ef029bf9a564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38344,
        "contract": "contracts/turbo/random.sol:TrustedFetcher",
        "label": "marketType",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 38346,
        "contract": "contracts/turbo/random.sol:TrustedFetcher",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}