/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SplitterInterface extends utils.Interface {
  functions: {
    "computeImpliedPrices(uint256)": FunctionFragment;
    "computeValuePrices()": FunctionFragment;
    "elapsedTime()": FunctionFragment;
    "getStoredValuePrices()": FunctionFragment;
    "getTrancheTokens()": FunctionFragment;
    "junior()": FunctionFragment;
    "junior_weight()": FunctionFragment;
    "merge(uint256)": FunctionFragment;
    "pastNBlock()": FunctionFragment;
    "precision()": FunctionFragment;
    "promised_return()": FunctionFragment;
    "senior()": FunctionFragment;
    "split(uint256)": FunctionFragment;
    "storeValuePrices()": FunctionFragment;
    "toggleDelayOracle()": FunctionFragment;
    "trancheMasterAd()": FunctionFragment;
    "trustedBurn(bool,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeImpliedPrices"
      | "computeValuePrices"
      | "elapsedTime"
      | "getStoredValuePrices"
      | "getTrancheTokens"
      | "junior"
      | "junior_weight"
      | "merge"
      | "pastNBlock"
      | "precision"
      | "promised_return"
      | "senior"
      | "split"
      | "storeValuePrices"
      | "toggleDelayOracle"
      | "trancheMasterAd"
      | "trustedBurn"
      | "underlying"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeImpliedPrices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeValuePrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elapsedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredValuePrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "junior", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "junior_weight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pastNBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "precision", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "promised_return",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "senior", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeValuePrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDelayOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trancheMasterAd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedBurn",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "computeImpliedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeValuePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "elapsedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoredValuePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "junior", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "junior_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pastNBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "precision", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promised_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "senior", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeValuePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDelayOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trancheMasterAd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {};
}

export interface Splitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SplitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeImpliedPrices(
      markPjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

    computeValuePrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    elapsedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStoredValuePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTrancheTokens(overrides?: CallOverrides): Promise<[string, string]>;

    junior(overrides?: CallOverrides): Promise<[string]>;

    junior_weight(overrides?: CallOverrides): Promise<[BigNumber]>;

    merge(
      junior_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pastNBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    precision(overrides?: CallOverrides): Promise<[BigNumber]>;

    promised_return(overrides?: CallOverrides): Promise<[BigNumber]>;

    senior(overrides?: CallOverrides): Promise<[string]>;

    split(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeValuePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleDelayOracle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trancheMasterAd(overrides?: CallOverrides): Promise<[string]>;

    trustedBurn(
      isSenior: PromiseOrValue<boolean>,
      who: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  computeImpliedPrices(
    markPjs: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

  computeValuePrices(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      psu: BigNumber;
      pju: BigNumber;
      pjs: BigNumber;
    }
  >;

  elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

  getStoredValuePrices(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTrancheTokens(overrides?: CallOverrides): Promise<[string, string]>;

  junior(overrides?: CallOverrides): Promise<string>;

  junior_weight(overrides?: CallOverrides): Promise<BigNumber>;

  merge(
    junior_amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pastNBlock(overrides?: CallOverrides): Promise<BigNumber>;

  precision(overrides?: CallOverrides): Promise<BigNumber>;

  promised_return(overrides?: CallOverrides): Promise<BigNumber>;

  senior(overrides?: CallOverrides): Promise<string>;

  split(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeValuePrices(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleDelayOracle(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trancheMasterAd(overrides?: CallOverrides): Promise<string>;

  trustedBurn(
    isSenior: PromiseOrValue<boolean>,
    who: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    computeImpliedPrices(
      markPjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

    computeValuePrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredValuePrices(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTrancheTokens(overrides?: CallOverrides): Promise<[string, string]>;

    junior(overrides?: CallOverrides): Promise<string>;

    junior_weight(overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      junior_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pastNBlock(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    promised_return(overrides?: CallOverrides): Promise<BigNumber>;

    senior(overrides?: CallOverrides): Promise<string>;

    split(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    storeValuePrices(overrides?: CallOverrides): Promise<void>;

    toggleDelayOracle(overrides?: CallOverrides): Promise<void>;

    trancheMasterAd(overrides?: CallOverrides): Promise<string>;

    trustedBurn(
      isSenior: PromiseOrValue<boolean>,
      who: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    computeImpliedPrices(
      markPjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeValuePrices(overrides?: CallOverrides): Promise<BigNumber>;

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredValuePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTrancheTokens(overrides?: CallOverrides): Promise<BigNumber>;

    junior(overrides?: CallOverrides): Promise<BigNumber>;

    junior_weight(overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      junior_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pastNBlock(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    promised_return(overrides?: CallOverrides): Promise<BigNumber>;

    senior(overrides?: CallOverrides): Promise<BigNumber>;

    split(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeValuePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleDelayOracle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trancheMasterAd(overrides?: CallOverrides): Promise<BigNumber>;

    trustedBurn(
      isSenior: PromiseOrValue<boolean>,
      who: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    computeImpliedPrices(
      markPjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeValuePrices(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    elapsedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStoredValuePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTrancheTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    junior(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    junior_weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merge(
      junior_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pastNBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promised_return(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    senior(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    split(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeValuePrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleDelayOracle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trancheMasterAd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trustedBurn(
      isSenior: PromiseOrValue<boolean>,
      who: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
