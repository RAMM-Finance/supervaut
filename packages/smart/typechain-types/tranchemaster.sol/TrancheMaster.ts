/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TrancheMasterInterface extends utils.Interface {
  functions: {
    "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)": FunctionFragment;
    "_swapFromTranche(bool,int256,uint256,uint256,bytes)": FunctionFragment;
    "arbByPairRedeem(bool,uint256)": FunctionFragment;
    "freshTrancheNewOrder()": FunctionFragment;
    "getDorc(uint256)": FunctionFragment;
    "getFee(uint256,uint256)": FunctionFragment;
    "getPTV(uint256,bool,uint256)": FunctionFragment;
    "getdVaultBal(uint256,address,bool,uint256)": FunctionFragment;
    "leverageSwap()": FunctionFragment;
    "redeemByDebtVault(uint256,uint256,bool,uint256)": FunctionFragment;
    "redeemFromDebtVault(uint256,uint256,uint256,bool)": FunctionFragment;
    "redeemOptimal()": FunctionFragment;
    "redeemToDebtVault(uint256,bool,uint256)": FunctionFragment;
    "routeOptimalTrade()": FunctionFragment;
    "swapFromInstrument()": FunctionFragment;
    "swapFromTranche()": FunctionFragment;
    "swapFromUnderlying(bool,uint256,uint256,uint256)": FunctionFragment;
    "swapToRatio()": FunctionFragment;
    "swapToUnderlying()": FunctionFragment;
    "unRedeemDebtVault(uint256,uint256,bool,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_swapFromInstrument"
      | "_swapFromTranche"
      | "arbByPairRedeem"
      | "freshTrancheNewOrder"
      | "getDorc"
      | "getFee"
      | "getPTV"
      | "getdVaultBal"
      | "leverageSwap"
      | "redeemByDebtVault"
      | "redeemFromDebtVault"
      | "redeemOptimal"
      | "redeemToDebtVault"
      | "routeOptimalTrade"
      | "swapFromInstrument"
      | "swapFromTranche"
      | "swapFromUnderlying"
      | "swapToRatio"
      | "swapToUnderlying"
      | "unRedeemDebtVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_swapFromInstrument",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_swapFromTranche",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "arbByPairRedeem",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "freshTrancheNewOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDorc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPTV",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getdVaultBal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByDebtVault",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromDebtVault",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOptimal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemToDebtVault",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "routeOptimalTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromInstrument",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromUnderlying",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapToUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unRedeemDebtVault",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_swapFromInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_swapFromTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbByPairRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freshTrancheNewOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDorc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getdVaultBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemByDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemOptimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemToDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routeOptimalTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapToRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unRedeemDebtVault",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TrancheMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrancheMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _swapFromInstrument(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _swapFromTranche(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    arbByPairRedeem(
      senior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freshTrancheNewOrder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDorc(
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFee(
      p1: PromiseOrValue<BigNumberish>,
      p2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPTV(
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      junior_weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pTv: BigNumber }>;

    getdVaultBal(
      vaultId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      isSenior: PromiseOrValue<boolean>,
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    leverageSwap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemByDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemFromDebtVault(
      dVaultAmount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemOptimal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemToDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    routeOptimalTrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFromInstrument(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFromTranche(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFromUnderlying(
      wantSenior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapToRatio(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapToUnderlying(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unRedeemDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _swapFromInstrument(
    toJunior: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _swapFromTranche(
    toJunior: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  arbByPairRedeem(
    senior: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freshTrancheNewOrder(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDorc(
    pjs: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getFee(
    p1: PromiseOrValue<BigNumberish>,
    p2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPTV(
    pjs: PromiseOrValue<BigNumberish>,
    isSenior: PromiseOrValue<boolean>,
    junior_weight: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getdVaultBal(
    vaultId: PromiseOrValue<BigNumberish>,
    who: PromiseOrValue<string>,
    isSenior: PromiseOrValue<boolean>,
    pjs: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  leverageSwap(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemByDebtVault(
    amount: PromiseOrValue<BigNumberish>,
    pjs: PromiseOrValue<BigNumberish>,
    isSenior: PromiseOrValue<boolean>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemFromDebtVault(
    dVaultAmount: PromiseOrValue<BigNumberish>,
    pjs: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    isSenior: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemOptimal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemToDebtVault(
    amount: PromiseOrValue<BigNumberish>,
    isSenior: PromiseOrValue<boolean>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  routeOptimalTrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFromInstrument(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFromTranche(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFromUnderlying(
    wantSenior: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    vaultId: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapToRatio(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapToUnderlying(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unRedeemDebtVault(
    amount: PromiseOrValue<BigNumberish>,
    pjs: PromiseOrValue<BigNumberish>,
    isSenior: PromiseOrValue<boolean>,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _swapFromInstrument(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    _swapFromTranche(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    arbByPairRedeem(
      senior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freshTrancheNewOrder(overrides?: CallOverrides): Promise<void>;

    getDorc(
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFee(
      p1: PromiseOrValue<BigNumberish>,
      p2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTV(
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      junior_weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getdVaultBal(
      vaultId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      isSenior: PromiseOrValue<boolean>,
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverageSwap(overrides?: CallOverrides): Promise<void>;

    redeemByDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemFromDebtVault(
      dVaultAmount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemOptimal(overrides?: CallOverrides): Promise<void>;

    redeemToDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routeOptimalTrade(overrides?: CallOverrides): Promise<void>;

    swapFromInstrument(overrides?: CallOverrides): Promise<void>;

    swapFromTranche(overrides?: CallOverrides): Promise<void>;

    swapFromUnderlying(
      wantSenior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToRatio(overrides?: CallOverrides): Promise<void>;

    swapToUnderlying(overrides?: CallOverrides): Promise<void>;

    unRedeemDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _swapFromInstrument(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _swapFromTranche(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    arbByPairRedeem(
      senior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freshTrancheNewOrder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDorc(
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(
      p1: PromiseOrValue<BigNumberish>,
      p2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTV(
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      junior_weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getdVaultBal(
      vaultId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      isSenior: PromiseOrValue<boolean>,
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverageSwap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemByDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemFromDebtVault(
      dVaultAmount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemOptimal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemToDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    routeOptimalTrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFromInstrument(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFromTranche(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFromUnderlying(
      wantSenior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapToRatio(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapToUnderlying(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unRedeemDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _swapFromInstrument(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _swapFromTranche(
      toJunior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    arbByPairRedeem(
      senior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freshTrancheNewOrder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDorc(
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      p1: PromiseOrValue<BigNumberish>,
      p2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPTV(
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      junior_weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getdVaultBal(
      vaultId: PromiseOrValue<BigNumberish>,
      who: PromiseOrValue<string>,
      isSenior: PromiseOrValue<boolean>,
      pjs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverageSwap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemByDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemFromDebtVault(
      dVaultAmount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemOptimal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemToDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    routeOptimalTrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFromInstrument(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFromTranche(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFromUnderlying(
      wantSenior: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapToRatio(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapToUnderlying(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unRedeemDebtVault(
      amount: PromiseOrValue<BigNumberish>,
      pjs: PromiseOrValue<BigNumberish>,
      isSenior: PromiseOrValue<boolean>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
